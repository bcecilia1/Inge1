

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (8 May 2023 22:02:23) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/cuis_para el parcial copy/CuisUniversity-5706.image!


----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/cuis_para el parcial copy/ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDeSuelo #test01ArrojaErrorAlAgregarDosCapasContiguasDelMismoTipoDeSuelo stamp: 'nh 5/8/2023 22:02:47'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'nh 5/8/2023 22:02:49'!
PASSED!

----STARTUP---- (28 May 2023 11:50:38) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/portfolio/CuisUniversity-5706.image!


----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/portfolio/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:52:07'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:52:24'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'NH 5/28/2023 11:52:19'!
test01TransferToAccount

        |previousBalanceFromAccount1 account1 account2 previousBalanceFromAccount2|

        account1 := ReceptiveAccount new.
        account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
        previousBalanceFromAccount1 := account1 balance. 
        previousBalanceFromAccount2 := account2 balance.
        Transfer from: account1 transfer: 10 to: account2.
        
	self assert: account1 balance equals: previousBalanceFromAccount1 - 10. 
	self assert: account2 balance equals: previousBalanceFromAccount2 + 10! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 11:52:30' prior: 50604678!
test01TransferToAccount

        |previousBalanceFromAccount1 account1 account2 previousBalanceFromAccount2|

        account1 := ReceptiveAccount new.
        account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
        previousBalanceFromAccount1 := account1 balance. 
        previousBalanceFromAccount2 := account2 balance.
        Transfer from: account1 transfer: 10 to: account2.
        
	self assert: account1 balance equals: previousBalanceFromAccount1 - 10. 
	self assert: account2 balance equals: previousBalanceFromAccount2 + 10.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:52:30'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 11:52:40'!
from: aReceptiveAccount transfer: aSmallInteger to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount transfer: aSmallInteger to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 11:53:18' prior: 50604722!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	Withdraw register: aValueToTransfer on: anAccountToExtractMoney.
	Deposit register: aValueToTransfer on: anAccountToReceivedMoney! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:53:20'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:53:20'!
PASSED!
!TransferTest methodsFor: 'nil' stamp: 'NH 5/28/2023 11:53:41'!
test02HasRegisteredTransactionFromSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: aTransaction value equals: 10.
	self assert: (transmitterAccount hasRegistered: (aTransaction source)) equals: true. 
	self assert: (receiverAccount hasRegistered: (aTransaction target)) equals: true. ! !

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:53:46'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 11:54:22' prior: 50604734!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. ! !
!Transfer methodsFor: 'nil' stamp: 'NH 5/28/2023 11:55:17'!
initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:55:33'!
Object subclass: #Transfer
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:55:35'!
Object subclass: #Transfer
	instanceVariableNames: 'transferValue source'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:55:36'!
Object subclass: #Transfer
	instanceVariableNames: 'transferValue source target'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 11:55:30' prior: 50604783!
initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney
	transferValue := aValueToTransfer.
	source := Withdraw register: transferValue on: anAccountToExtractMoney.
	target  := Deposit register: transferValue on: anAccountToReceivedMoney.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:55:38'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:55:38'!
FAILURE!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:55:38'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'NH 5/28/2023 11:56:13'!
source	
	^source! !
!Transfer methodsFor: 'nil' stamp: 'NH 5/28/2023 11:56:22'!
target	
	^target! !
!Transfer methodsFor: 'nil' stamp: 'NH 5/28/2023 11:56:30' overrides: 16902254!
value
	^transferValue! !

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:56:42'!
FAILURE!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:56:42'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 11:57:10' prior: 50604775!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. ! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:57:11'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:57:11'!
PASSED!
!TransferTest methodsFor: 'nil' stamp: 'NH 5/28/2023 11:57:27'!
test03NavigateFromTransferSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: (aTransaction source recipient) equals: (aTransaction target). 
	
	
	! !

!classDefinition: #TransferRemmiter category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:57:55'!
Object subclass: #TransferRemmiter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 11:57:51' prior: 50604812!
initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney
	transferValue := aValueToTransfer.
	source := TransferRemmiter register: transferValue on: anAccountToExtractMoney for: self. 
	target  := Deposit register: transferValue on: anAccountToReceivedMoney.! !
!TransferRemmiter class methodsFor: 'nil' stamp: 'NH 5/28/2023 11:58:16'!
register: aTransferValue on: aReceptiveAccount for: aTransaction
	
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction! !

!classDefinition: #TransferRemmiter category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 11:58:31'!
Object subclass: #TransferRemmiter
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRemmiter methodsFor: 'nil' stamp: 'NH 5/28/2023 11:58:28'!
initializeRegister: aTransferValue on: aSourceReceptiveAccount for: aTransaction
	aSourceReceptiveAccount register: self.
	transaction := aTransaction
	! !
!TransferRemmiter methodsFor: 'nil' stamp: 'NH 5/28/2023 11:58:48'!
recipient
	^transaction target
	! !
!TransferRemmiter methodsFor: 'nil' stamp: 'NH 5/28/2023 11:58:57'!
contributesToAccountBalance: aBalance

	^aBalance - (transaction value)! !

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 11:59:01'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:59:04'!
ERROR!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:59:04'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 11:59:04'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:59:04'!
ERROR!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 11:59:20'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 11:59:22'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:59:24'!
ERROR!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 11:59:24'!
ERROR!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:01:01'!
affectBalance: aBalance

	^aBalance - (transaction value)! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 12:01:05'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 12:01:05'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 12:01:05'!
PASSED!
!TransferTest methodsFor: 'nil' stamp: 'NH 5/28/2023 12:01:25'!
test04NavigateFromTransferTargetToSource

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: (aTransaction target remitter) equals: (aTransaction source). 
	
	! !

Object subclass: #TransferRecipient
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferRecipient category: 'Portfolio-Ejercicio' stamp: 'NH 5/28/2023 12:01:51'!
Object subclass: #TransferRecipient
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #TransferRecipient stamp: 'NH 5/28/2023 12:02:05'!
Object subclass: #TransferRecipient
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #TransferRecipient
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:02:17'!
Object subclass: #TransferRecipient
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRecipient class methodsFor: 'nil' stamp: 'NH 5/28/2023 12:02:34'!
register: aTransferValue on: aReceptiveAccount for: aTransaction 
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction ! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/28/2023 12:02:53'!
affectBalance: aBalance

	^aBalance + (transaction value)! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/28/2023 12:03:02'!
initializeRegister: aTransferValue on: aTargetReceptiveAccount for: aTransaction 
	aTargetReceptiveAccount register: self.
	transaction := aTransaction.! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/28/2023 12:03:12'!
remitter
	^transaction source! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 12:03:14'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 12:03:14'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 12:03:14'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 12:03:14'!
ERROR!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 12:03:14'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:03:33' prior: 50604892!
initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney
	transferValue := aValueToTransfer.
	source := TransferRemmiter register: transferValue on: anAccountToExtractMoney for: self. 
	target  := TransferRecipient register: transferValue on: anAccountToReceivedMoney for: self. ! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 12:03:35'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 12:03:35'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 12:03:35'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 12:03:35'!
PASSED!

!methodRemoval: TransferRemmiter #contributesToAccountBalance: stamp: 'NH 5/28/2023 12:03:43'!
contributesToAccountBalance: aBalance

	^aBalance - (transaction value)!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:04:08'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'nil' stamp: 'NH 5/28/2023 12:04:13'!
test01AccountSummaryForAnEmptyAccount

	|anAccount emptyAccountBalance|
	
	anAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	
	self assert: anAccount accountSummary equals: emptyAccountBalance.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'NH 5/28/2023 12:04:30'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:10:54'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:10:48'!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountReport summary) equals: emptyAccountBalance.! !

!methodRemoval: AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'NH 5/28/2023 12:11:00'!
test01AccountSummaryForAnEmptyAccount

	|anAccount emptyAccountBalance|
	
	anAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	
	self assert: anAccount accountSummary equals: emptyAccountBalance.!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:11:09'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 12:11:17'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 12:11:23' prior: 50605166!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:11:25'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:11:35'!
Object subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'category-name' stamp: 'NH 5/28/2023 12:11:35'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!AccountSummary methodsFor: 'category-name' stamp: 'NH 5/28/2023 12:11:40' prior: 50605192!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:11:42'!
ERROR!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:11:45'!
ERROR!
!AccountSummary methodsFor: 'nil' stamp: 'NH 5/28/2023 12:12:11'!
summary
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:12:49' prior: 50605212!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	accountSummary add: 'Balance = 0'. ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:12:54' prior: 50605216!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	accountSummary add: 'Balance = 0'. 
	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:12:57'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:13:00'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:14:40'!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction

	|aReceptiveAccount aReceptiveAccountReport receptiveAccountBalance|
	
	aReceptiveAccount := ReceptiveAccount new.
	Deposit register:  10 on: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	receptiveAccountBalance := OrderedCollection new.
	receptiveAccountBalance add: 'Balance = 10'. 
	
	self assert: (aReceptiveAccountReport summary) equals: receptiveAccountBalance.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:15:15' prior: 50605238!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction

	|aReceptiveAccount aReceptiveAccountReport receptiveAccountBalance|
	
	aReceptiveAccount := ReceptiveAccount new.
	Deposit register:  10 on: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	receptiveAccountBalance := OrderedCollection new.
	receptiveAccountBalance add: 'Deposito por 10'.
	receptiveAccountBalance add: 'Balance = 10'. 
	
	self assert: (aReceptiveAccountReport summary) equals: receptiveAccountBalance.! !

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:15:18'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:23:26' prior: 50605223!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	(receptiveAccount balance = 0) ifTrue: [
		accountSummary add: 'Balance = 0'. 
	].
	
	^accountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:23:50' prior: 50605282!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	(receptiveAccount balance = 0) ifTrue: [
		accountSummary add: 'Balance = 0'. 
	].
	accountSummary add: 'Deposito por 10'.
	accountSummary add: 'Balance = 10'. 
	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:23:52'!
FAILURE!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:23:52'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:23:52'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:24:48' prior: 50605291!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	((receptiveAccount balance) = 0) ifTrue: [
		accountSummary add: 'Balance = 0'. 
	] ifFalse: [
		accountSummary add: 'Deposito por 10'.
		accountSummary add: 'Balance = 10'. 
	].
	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:24:48'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:24:48'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:27:06'!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	((receptiveAccount balance) = 0) ifTrue: [
		accountSummary add: 'Balance = 0'. 
	] ifFalse: [
		accountSummary add: 'Deposito por 10'.
		accountSummary add: 'Balance = 10'. 
	].
	^accountSummary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:27:06' prior: 50605134!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountReport accountSummary) equals: emptyAccountBalance.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:27:06' prior: 50605257!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction

	|aReceptiveAccount aReceptiveAccountReport receptiveAccountBalance|
	
	aReceptiveAccount := ReceptiveAccount new.
	Deposit register:  10 on: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	receptiveAccountBalance := OrderedCollection new.
	receptiveAccountBalance add: 'Deposito por 10'.
	receptiveAccountBalance add: 'Balance = 10'. 
	
	self assert: (aReceptiveAccountReport accountSummary) equals: receptiveAccountBalance.! !

!methodRemoval: AccountSummary #summary stamp: 'NH 5/28/2023 12:27:06'!
summary
	|accountSummary|
	accountSummary := OrderedCollection new.
	((receptiveAccount balance) = 0) ifTrue: [
		accountSummary add: 'Balance = 0'. 
	] ifFalse: [
		accountSummary add: 'Deposito por 10'.
		accountSummary add: 'Balance = 10'. 
	].
	^accountSummary!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:27:31'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:27:31'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 12:27:34'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 12:27:34'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 12:27:34'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 12:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/28/2023 12:27:38'!
PASSED!

'Deposito por' + '10' !

'Deposito por', '10' !

'Deposito por ', '10'!

'Deposito por', 10 !

'Deposito por', 10!

'Deposito por', 10 asString!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:39:55' prior: 50605335!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	receptiveAccount transactions do:[ :aTransaction |
		
		(aTransaction isKindOf: Deposit) ifTrue: [
			accountSummary add: ('Deposito por ', aTransaction value asString)
		].
		
		
	].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString)

	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:39:59'!
ERROR!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:39:59'!
ERROR!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:40:03'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:40:20' prior: 50605447!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	receptiveAccount transactions do:[ :aTransaction |
		
		(aTransaction isKindOf: Deposit) ifTrue: [
			accountSummary add: ('Deposito por ', aTransaction value asString)
		].
		
		
	].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString).

	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:40:21'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:40:21'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:40:25'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:40:28'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:47:35'!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30.'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: (aReceptiveAccountReport accountSummary) equals: theReceptiveAccountReport.! !

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:47:37'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:48:13'!
test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30.'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: (aReceptiveAccountReport accountSummary) equals: theReceptiveAccountReport.! !

!methodRemoval: AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:48:13'!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30.'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: (aReceptiveAccountReport accountSummary) equals: theReceptiveAccountReport.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:49:49' prior: 50605474!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	receptiveAccount transactions do:[ :aTransaction |
		
		(aTransaction isKindOf: Deposit) ifTrue: [
			accountSummary add: ('Deposito por ', aTransaction value asString)
		].
		(aTransaction isKindOf: Withdraw ) ifTrue: [
			accountSummary add: ('Extraccion por ', aTransaction value asString)
		].
		(aTransaction isKindOf: TransferRemmiter ) ifTrue: [
			accountSummary add: ('Salida por transferencia de ', aTransaction value asString)
		].
		(aTransaction isKindOf: TransferRecipient ) ifTrue: [
			accountSummary add: ('Entrada por transferencia de ', aTransaction value asString)
		].
	].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString).

	^accountSummary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/28/2023 12:49:57'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:50:01'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:50:01'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:01'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:01'!
FAILURE!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:50:08'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:10'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:10'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:50:27' prior: 50605544!
test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: (aReceptiveAccountReport accountSummary) equals: theReceptiveAccountReport.! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:50:32'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:50:32'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:32'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:50:32'!
FAILURE!
!TransferRemmiter methodsFor: 'nil' stamp: 'NH 5/28/2023 12:51:45' overrides: 16902254!
value
	^transaction value! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/28/2023 12:51:57' overrides: 16902254!
value
	^transaction value! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:52:02'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 12:52:02'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:52:02'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 12:52:07'!
PASSED!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:52:44'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:54:19'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'nil' stamp: 'NH 5/28/2023 12:54:16'!
test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 0.! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:55:12'!
ERROR!
!TransferNet class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 12:55:18'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!TransferNet class methodsFor: 'instance creation' stamp: 'NH 5/28/2023 12:55:23' prior: 50605812!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:55:28'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 12:56:07'!
Object subclass: #TransferNet
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'category-name' stamp: 'NH 5/28/2023 12:56:07'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!TransferNet methodsFor: 'category-name' stamp: 'NH 5/28/2023 12:56:11' prior: 50605838!
initializeFor: aReceptiveAccount 
	
	receptiveAccount := aReceptiveAccount.! !
!TransferNet methodsFor: 'nil' stamp: 'NH 5/28/2023 12:56:22'!
transferNet! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:56:26' prior: 50605850!
transferNet
	^0! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:56:30'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 12:56:30'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:57:16'!
test01ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:57:33'!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 0.! !

!methodRemoval: TransferNetTest #test01ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 12:57:33'!
test01ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:58:56' prior: 50605879!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 20.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 12:59:24' prior: 50605906!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: -20.! !

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 12:59:27'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:02:10' prior: 50605854!
transferNet
	
	^ receptiveAccount transactions inject: 0 into: [:transferNet :aTransaction |
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [
			transferNet - aTransaction value
		]
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:02:12'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:02:12'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:02:12'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:02:23' prior: 50605952!
transferNet
	
	^ receptiveAccount transactions inject: 0 into: [:transferNet :aTransaction |
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [
			transferNet - (aTransaction value)
		]
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:02:24'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:02:24'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:02:24'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:04:04' prior: 50605974!
transferNet
	
	^ receptiveAccount transactions 
		inject: 0 
		into: [:transferNet :aTransaction |
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [
			transferNet - (aTransaction value)
		].
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:04:06'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:06'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:06'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:04:17' prior: 50605996!
transferNet
	
	^ receptiveAccount transactions 
		inject: 0 
		into: [:transferNet :aTransaction |
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [
			transferNet - (aTransaction value).
		].
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:04:17'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:17'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:17'!
ERROR!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:04:45'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:45'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:04:45'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:05:06' prior: 50606018!
transferNet
	
	^ receptiveAccount transactions 
		inject: 0 
		into: [:currentTransferNet :aTransaction |
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [
			currentTransferNet - (aTransaction value).
		].
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:05:07'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:05:07'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:05:07'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:05:28'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:05:28'!
ERROR!

currentTransferNet!

aTransaction!

currentTransferNet!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:07:02' prior: 50606053!
transferNet
	
	^ receptiveAccount transactions 
		inject: 0 
		into: [:currentTransferNet :aTransaction |
		
			currentTransferNet - (aTransaction value).
		
	]
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:07:03'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:07:03'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:07:03'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:08:47' prior: 50606086!
transferNet
	|transferNet| 
	transferNet := 0.
	receptiveAccount transactions do:[:aTransaction| 
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [ 
			transferNet := 	transferNet - (aTransaction value)
		]
	].
	^ transferNet 
		
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:08:48'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:08:48'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:08:58' prior: 50606107!
transferNet

	|transferNet| 
	
	transferNet := 0.
	receptiveAccount transactions do:[:aTransaction| 
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [ 
			transferNet := 	transferNet - (aTransaction value)
		]
	].

	^ transferNet 
		
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:09:18'!
test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: -20.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:09:42' prior: 50606137!
test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: (aReceptiveAccountTransferNet transferNet) equals: 10.! !

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:09:45'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:09:53'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:10:14' prior: 50606158!
test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:10 equals:  (aReceptiveAccountTransferNet transferNet) .! !

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:10:15'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:10:29' prior: 50605927!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:-20 equals:  (aReceptiveAccountTransferNet transferNet).! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:10:36' prior: 50606218!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: -20 equals: (aReceptiveAccountTransferNet transferNet).! !

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:10:37'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:10:37'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:10:37'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:10:37'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:10:37'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:10:41'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:10:43'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:10:50' prior: 50605796!
test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:0 equals:  (aReceptiveAccountTransferNet transferNet) .! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:11:35' prior: 50604699!
test01TransferToAccount

        |previousBalanceFromAccount1 account1 account2 previousBalanceFromAccount2|

        account1 := ReceptiveAccount new.
        account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
        previousBalanceFromAccount1 := account1 balance. 
        previousBalanceFromAccount2 := account2 balance.
        Transfer from: account1 transfer: 10 to: account2.
        
	self assert:  previousBalanceFromAccount1 - 10  equals: account1 balance . 
	self assert:previousBalanceFromAccount2 + 10  equals: account2 balance.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:11:38' prior: 50606303!
test01TransferToAccount

        |previousBalanceFromAccount1 account1 account2 previousBalanceFromAccount2|

        account1 := ReceptiveAccount new.
        account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
        previousBalanceFromAccount1 := account1 balance. 
        previousBalanceFromAccount2 := account2 balance.
        Transfer from: account1 transfer: 10 to: account2.
        
	self assert:  previousBalanceFromAccount1 - 10  equals: account1 balance. 
	self assert:previousBalanceFromAccount2 + 10  equals: account2 balance.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:11:39'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:11:39'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:11:39'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 13:11:39'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:11:39'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:11:50' prior: 50604749!
test02HasRegisteredTransactionFromSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: 10 equals: aTransaction value.
	self assert: (transmitterAccount hasRegistered: (aTransaction source)) equals: true. 
	self assert: (receiverAccount hasRegistered: (aTransaction target)) equals: true. ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:11:58' prior: 50606361!
test02HasRegisteredTransactionFromSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: 10 equals: aTransaction value.
	self assert: true equals: (transmitterAccount hasRegistered: (aTransaction source)). 
	self assert: (receiverAccount hasRegistered: (aTransaction target)) equals: true. ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:12:06' prior: 50606383!
test02HasRegisteredTransactionFromSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: 10 equals: aTransaction value.
	self assert: true equals: (transmitterAccount hasRegistered: (aTransaction source)). 
	self assert: true equals:  (receiverAccount hasRegistered: (aTransaction target)). ! !

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:12:08'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:12:08'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:12:08'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 13:12:08'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:12:08'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:12:25' prior: 50604867!
test03NavigateFromTransferSourceToTarget

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: (aTransaction target )equals:  (aTransaction source recipient) . 
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:12:40' prior: 50604978!
test04NavigateFromTransferTargetToSource

        |transmitterAccount receiverAccount aTransaction |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount := ReceptiveAccount new.
	Deposit register: 100 on: transmitterAccount.
	
        
        aTransaction := Transfer from: transmitterAccount transfer: 10 to: receiverAccount.
        
	self assert: (aTransaction source) equals:(aTransaction target remitter). 
	
	! !

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:12:41'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:12:41'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:12:41'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 13:12:41'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:12:41'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:12:59' prior: 50605347!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:13:13' prior: 50605364!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction

	|aReceptiveAccount aReceptiveAccountReport receptiveAccountBalance|
	
	aReceptiveAccount := ReceptiveAccount new.
	Deposit register:  10 on: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	receptiveAccountBalance := OrderedCollection new.
	receptiveAccountBalance add: 'Deposito por 10'.
	receptiveAccountBalance add: 'Balance = 10'. 
	
	self assert: receptiveAccountBalance equals: (aReceptiveAccountReport accountSummary) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:13:34' prior: 50605700!
test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: theReceptiveAccountReport  equals: (aReceptiveAccountReport accountSummary).! !

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 13:13:36'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:13:36'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/28/2023 13:13:36'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/28/2023 13:13:36'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:13:48'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:13:48'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:14:18' prior: 50606126!
transferNet

	|transferNet| 
	
	transferNet := 0.
	receptiveAccount transactions do:[:aTransaction| 
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [ 
			transferNet := 	transferNet - (aTransaction value)
		].
		(aTransaction isKindOf: TransferRecipient ) ifTrue: [ 
				transferNet := 	transferNet + (aTransaction value)
		].
	].

	^ transferNet 
		
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/28/2023 13:14:21'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/28/2023 13:14:21'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/28/2023 13:14:21'!
PASSED!

Object subclass: #TransferLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:00'!
Object subclass: #TransferLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #TransferRecipient
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:06'!
TransferLegs subclass: #TransferRecipient
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #TransferRemmiter
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRemmiter category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:15'!
TransferLegs subclass: #TransferRemmiter
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:51'!
TransferLegs subclass: #TransferRecipient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRemmiter category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:51'!
TransferLegs subclass: #TransferRemmiter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'NH 5/28/2023 13:21:51'!
Object subclass: #TransferLegs
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:22:04'!
initializeRegister: aTransferValue on: aTargetReceptiveAccount for: aTransaction 
	aTargetReceptiveAccount register: self.
	transaction := aTransaction.! !

!methodRemoval: TransferRecipient #initializeRegister:on:for: stamp: 'NH 5/28/2023 13:22:04'!
initializeRegister: aTransferValue on: aTargetReceptiveAccount for: aTransaction 
	aTargetReceptiveAccount register: self.
	transaction := aTransaction.!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:22:29' prior: 50606683!
initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction 
	aReceptiveAccount register: self.
	transaction := aTransaction.! !

!methodRemoval: TransferRemmiter #initializeRegister:on:for: stamp: 'NH 5/28/2023 13:22:36'!
initializeRegister: aTransferValue on: aSourceReceptiveAccount for: aTransaction
	aSourceReceptiveAccount register: self.
	transaction := aTransaction
	!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:22:45' overrides: 16902254!
value
	^transaction value! !

!methodRemoval: TransferRemmiter #value stamp: 'NH 5/28/2023 13:22:45'!
value
	^transaction value!

!methodRemoval: TransferRecipient #value stamp: 'NH 5/28/2023 13:23:08'!
value
	^transaction value!
!TransferLegs methodsFor: 'nil' stamp: 'NH 5/28/2023 13:23:33'!
affectBalance: aBalance
	self subclassResponsibility ! !
!TransferLegs class methodsFor: 'as yet unclassified' stamp: 'NH 5/28/2023 13:23:46'!
register: aTransferValue on: aReceptiveAccount for: aTransaction
	
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction! !

!methodRemoval: TransferRemmiter class #register:on:for: stamp: 'NH 5/28/2023 13:23:46'!
register: aTransferValue on: aReceptiveAccount for: aTransaction
	
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction!

!methodRemoval: TransferRecipient class #register:on:for: stamp: 'NH 5/28/2023 13:23:50'!
register: aTransferValue on: aReceptiveAccount for: aTransaction 
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:23:57'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:23:57'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 13:23:57'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:23:57'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/28/2023 13:24:01'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/28/2023 13:24:01'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/28/2023 13:24:01'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/28/2023 13:24:01'!
PASSED!

----QUIT----(28 May 2023 13:28:13) CuisUniversity-5706.image priorSource: 8713034!

----STARTUP---- (30 May 2023 21:13:19) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/portfolio/CuisUniversity-5706.image!

!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:18:44'!
test05CannotTransferToInexistentAccount

        |transmitterAccount receiverAccount |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount :=''.
	Deposit register: 100 on: transmitterAccount.
	
        [Transfer from: transmitterAccount transfer: 10 to: receiverAccount.] 
	on: [ ]
	do: []
        
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:19:38' prior: 50606786!
test05CannotTransferToInexistentAccount

        |transmitterAccount receiverAccount |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount :=''.
	Deposit register: 100 on: transmitterAccount.
	
      self 
		should: [Transfer ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | ]
        
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:21:26' prior: 50606800!
test05CannotTransferToInexistentAccount

        |transmitterAccount receiverAccount |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount :=''.
	Deposit register: 100 on: transmitterAccount.
	
      self 
		should: [ Transfer from: transmitterAccount transfer: 10 to: receiverAccount. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: Transfer canTransferToInexistentAccountDescription]
        
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:21:32' prior: 50606814!
test05CannotTransferToInexistentAccount

        |transmitterAccount receiverAccount |

        transmitterAccount := ReceptiveAccount new.
        receiverAccount :=''.
	Deposit register: 100 on: transmitterAccount.
	
      self 
		should: [ Transfer from: transmitterAccount transfer: 10 to: receiverAccount. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: Transfer cannotTransferToInexistentAccountDescription]
        
	
	! !

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/30/2023 21:21:37'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/30/2023 21:28:03' prior: 50604852!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	(anAccountToReceivedMoney isKindOf: ReceptiveAccount) ifTrue: [
		^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. 
	].
	self error: self .
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/30/2023 21:28:17' prior: 50606855!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	(anAccountToReceivedMoney isKindOf: ReceptiveAccount) ifTrue: [
		^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. 
	].
	self error: self cannotTransferToInexistentAccountDescription.
	! !
!Transfer class methodsFor: 'nil' stamp: 'NH 5/30/2023 21:29:10'!
cannotTransferToInexistentAccountDescription
	^'can only transfer to existent receptive account'! !

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/30/2023 21:29:25'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/30/2023 21:29:36'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/30/2023 21:29:36'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/30/2023 21:29:36'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/30/2023 21:29:36'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/30/2023 21:29:36'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:32:02'!
test06CannotTransferFromInexistentAccount

        |transmitterAccount receiverAccount |

        transmitterAccount := ''.
        receiverAccount := ReceptiveAccount new.
	
      self 
		should: [ Transfer from: transmitterAccount transfer: 10 to: receiverAccount. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: anError messageText equals: Transfer cannotTransferFromInexistentAccountDescription]
        
	
	! !

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:32:07'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/30/2023 21:34:13' prior: 50606867!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney

	((anAccountToReceivedMoney isKindOf: ReceptiveAccount ) 
	and:(anAccountToExtractMoney isKindOf: ReceptiveAccount)) ifTrue: [
		^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. 
	].
	self error: self cannotTransferToInexistentAccountDescription.
	! !

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:35:03'!
ERROR!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:35:03'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:35:22'!
cannotTransferFromInexistentAccountDescription
	^'can only transfer from existent receptive account'! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/30/2023 21:35:23'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/30/2023 21:35:23'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/30/2023 21:35:23'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/30/2023 21:35:23'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/30/2023 21:35:23'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:35:23'!
FAILURE!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:35:23'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/30/2023 21:37:34' prior: 50606927!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	(anAccountToReceivedMoney isKindOf: ReceptiveAccount ) ifFalse: [^self error: self cannotTransferToInexistentAccountDescription.].
	(anAccountToExtractMoney isKindOf: ReceptiveAccount) ifFalse: [^self error: self cannotTransferToInexistentAccountDescription.].
	^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. 
	
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'NH 5/30/2023 21:38:11' prior: 50606979!
from: anAccountToExtractMoney transfer: aValueToTransfer to: anAccountToReceivedMoney
	(anAccountToReceivedMoney isKindOf: ReceptiveAccount ) ifFalse: [^self error: self cannotTransferToInexistentAccountDescription.].
	(anAccountToExtractMoney isKindOf: ReceptiveAccount) ifFalse: [^self error: self cannotTransferFromInexistentAccountDescription.].
	^self new initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney. 
	
	
	! !

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/30/2023 21:38:19'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/30/2023 21:38:19'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:52:26' prior: 50605615!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	receptiveAccount transactions do:[ :aTransaction |  accountSummary add: aTransaction lineForAccountSummary.
	].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString).

	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:52:34'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/30/2023 21:52:39'!
ERROR!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/30/2023 21:52:39'!
ERROR!
!Deposit methodsFor: 'category-name' stamp: 'NH 5/30/2023 21:52:49'!
lineForAccountSummary
	self shouldBeImplemented.! !
!Deposit methodsFor: 'category-name' stamp: 'NH 5/30/2023 21:53:13' prior: 50607062!
lineForAccountSummary
	^'Deposito por ', value asString
		! !

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:53:22'!
ERROR!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:53:22'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/30/2023 21:53:28'!
lineForAccountSummary
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/30/2023 21:53:49' prior: 50607080!
lineForAccountSummary
	'Extraccion por ',  value asString
		
		! !

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:53:58'!
ERROR!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:54:04'!
lineForAccountSummary
	self shouldBeImplemented.! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:55:22' prior: 50607095!
lineForAccountSummary
	('Salida por transferencia de ', self value asString)
		! !

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:55:24'!
ERROR!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:55:28'!
lineForAccountSummary
	self shouldBeImplemented.! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:55:44' prior: 50607110!
lineForAccountSummary
	^('Entrada por transferencia de ', self value asString)
		! !

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:55:46'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:55:55'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:55:55'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:56:13'!
FAILURE!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:56:43' prior: 50607100!
lineForAccountSummary
	^('Salida por transferencia de ', self value asString)
		! !
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/30/2023 21:56:50' prior: 50607085!
lineForAccountSummary
	^'Extraccion por ',  value asString
		
		! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:56:51'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/30/2023 21:56:51'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:56:51'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:56:51'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/30/2023 21:56:52'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:57:00'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/30/2023 21:57:00'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 21:57:00'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:57:27' prior: 50607038!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	receptiveAccount transactions do:[ :aTransaction |  accountSummary add: aTransaction lineForAccountSummary.].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString).

	^accountSummary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:57:59'!
test01ReceptiveAccountSummaryForAnEmptyPortfolio

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := Portfolio new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:58:20'!
test04ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:58:20'!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:58:58'!
test04ReceptiveAccountSummaryForAnEmptyReceptiveAccoun

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 21:58:58'!
test04ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:59:09'!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04ReceptiveAccountSummaryForAnEmptyReceptiveAccoun stamp: 'NH 5/30/2023 21:59:09'!
test04ReceptiveAccountSummaryForAnEmptyReceptiveAccoun

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 21:59:24'!
test04PortfolioAccountSummaryForAnEmptyPortfolio

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := Portfolio new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyPortfolio stamp: 'NH 5/30/2023 21:59:24'!
test01ReceptiveAccountSummaryForAnEmptyPortfolio

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := Portfolio new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/30/2023 22:01:22' prior: 50607400!
test04PortfolioAccountSummaryForAnEmptyPortfolio

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAnEmptyPortfolio stamp: 'NH 5/30/2023 22:01:23'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/30/2023 22:01:23'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/30/2023 22:01:23'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/30/2023 22:01:23'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAnEmptyPortfolio stamp: 'NH 5/30/2023 22:01:23'!
PASSED!

----QUIT----(30 May 2023 22:02:48) CuisUniversity-5706.image priorSource: 8804106!

----STARTUP---- (31 May 2023 21:05:19) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/portfolio/CuisUniversity-5706.image!

!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:08:09'!
test04PortfolioAccountSummaryForAPortfolioWithOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04PortfolioAccountSummaryForAnEmptyPortfolio stamp: 'NH 5/31/2023 21:08:09'!
test04PortfolioAccountSummaryForAnEmptyPortfolio

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:08:37'!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:08:40'!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:08:48'!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:08:51'!
test04PortfolioAccountSummaryForAPortfolioWithOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport|
	
	aPortfolio := Portfolio new.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Balance = 0'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:22:31' prior: 50607535!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	Deposit register: 100 on: account1.
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:22:57' prior: 50607566!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:23:01'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:23:01'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:23:01'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:23:01'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:23:01'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:31:18'!
test04PortfolioAccountSummaryForAPortfolioWithOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 |
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.

	
	Deposit register: 100 on: account1.
	
	aPortfolio := Portfolio with: account1.
	
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:31:22'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:31:22'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:31:22'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:31:22'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:31:22'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:31:22'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:31:48'!
test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !

!methodRemoval: AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:31:48'!
test04PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:35:12' prior: 50607679!
test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Withdraw register:  50 on: account2.
	Transfer from: account1 transfer: 50 to: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 50'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport accountSummary) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:38:28' prior: 50607726!
test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio thePortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	thePortfolioBalance := OrderedCollection new.
	thePortfolioBalance add: 'Deposito por 100'.
	thePortfolioBalance add: 'Salida por transferencia de 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 25'.

	thePortfolioBalance add: 'Extraccion por 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 50'.
	thePortfolioBalance add: 'Salida por transferencia de 25'.

	thePortfolioBalance add: 'Balance = 50'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: thePortfolioBalance  equals:(aPortfolioReport accountSummary) 
	! !

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:38:30'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:38:37'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:38:43'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:38:47'!
FAILURE!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:38:47'!
FAILURE!

|aPortfolio thePortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	thePortfolioBalance := OrderedCollection new.
	thePortfolioBalance add: 'Deposito por 100'.
	thePortfolioBalance add: 'Salida por transferencia de 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 25'.

	thePortfolioBalance add: 'Extraccion por 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 50'.
	thePortfolioBalance add: 'Salida por transferencia de 25'.

	thePortfolioBalance add: 'Balance = 50'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	!

self accountSummary !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:44:06' prior: 50607758!
test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio thePortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	thePortfolioBalance := OrderedCollection new.
	thePortfolioBalance add: 'Deposito por 100'.
	thePortfolioBalance add: 'Salida por transferencia de 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 25'.

	thePortfolioBalance add: 'Entrada por transferencia de 50'.
	thePortfolioBalance add: 'Extraccion por 50'.
	thePortfolioBalance add: 'Salida por transferencia de 25'.

	thePortfolioBalance add: 'Balance = 50'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: thePortfolioBalance  equals:(aPortfolioReport accountSummary) 
	! !

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:44:07'!
PASSED!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 21:44:39'!
Object subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:44:37' prior: 50607273!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	account transactions do:[ :aTransaction |  accountSummary add: aTransaction lineForAccountSummary.].
	
	accountSummary add: ('Balance = ', receptiveAccount balance asString).

	^accountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:44:53' prior: 50605199!
initializeFor: anAccount 
	account := anAccount.! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 21:45:05' prior: 50605175!
for: anAccount 
	^self new initializeFor: anAccount ! !

Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 21:45:28'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:45:57' prior: 50607915!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	account transactions do:[ :aTransaction |  accountSummary add: aTransaction lineForAccountSummary.].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:46:00'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:46:00'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:46:00'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:46:00'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:46:00'!
PASSED!
!TransferNetTest methodsFor: 'nil' stamp: 'NH 5/31/2023 21:49:12'!
test04PortfolioTransferNetForAPortfolioWithOneAccount

	|aPortfolio  aPortfolioTransferNet account1 |
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	aPortfolio := Portfolio with: account1.
	
	aPortfolioTransferNet := TransferNet for: aPortfolio.
	
	self assert: 0 equals:(aPortfolioTransferNet transferNet) .! !

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:49:15'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:49:15'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:49:15'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:49:15'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:49:15'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:50:49'!
test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount

	|aPortfolio aPortfolioTransferNet account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	aPortfolioTransferNet := TransferNet for: aPortfolio.
	
	self assert: 0  equals:(aPortfolioTransferNet transferNet) ! !

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:50:58'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 21:51:25'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:51:25' prior: 50606595!
transferNet

	|transferNet| 
	
	transferNet := 0.
	account transactions do:[:aTransaction| 
		(aTransaction isKindOf: TransferRemmiter) ifTrue: [ 
			transferNet := 	transferNet - (aTransaction value)
		].
		(aTransaction isKindOf: TransferRecipient ) ifTrue: [ 
				transferNet := 	transferNet + (aTransaction value)
		].
	].

	^ transferNet 
		
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:51:25' prior: 50605845!
initializeFor: aReceptiveAccount 
	
	account := aReceptiveAccount.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:51:48' prior: 50608085!
initializeFor: anAccount 
	
	account := anAccount.! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:51:49'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:51:49'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:51:49'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:51:49'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:51:49'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:54:09' prior: 50608071!
transferNet

	|transferNet| 
	
	transferNet := 0.
	account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueForTransferNet )].

	^ transferNet 
		
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:54:12'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:54:12'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:54:15'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:54:34'!
valueForTransferNet
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:54:38' prior: 50608150!
valueForTransferNet
	! !

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:54:43'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:54:59'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:55:22' prior: 50608155!
valueForTransferNet
	0! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:55:25'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:55:25'!
ERROR!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:55:25'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:55:25'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:55:25'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:55:28'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:55:45' prior: 50608168!
valueForTransferNet
	^0! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:55:47'!
ERROR!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:55:47'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:55:47'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:55:47'!
ERROR!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:55:50'!
ERROR!
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/31/2023 21:56:00'!
valueForTransferNet
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/31/2023 21:56:20' prior: 50608474!
valueForTransferNet
	^0! !

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:56:23'!
ERROR!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:56:29'!
valueForTransferNet
	self shouldBeImplemented.! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:57:17' prior: 50608487!
valueForTransferNet
	^ -1 * (self value).
	! !

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:57:23'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:57:25'!
ERROR!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:57:31'!
valueForTransferNet
	self shouldBeImplemented.! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 21:57:42' prior: 50608505!
valueForTransferNet
	^ self value! !

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:57:45'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:57:47'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 21:57:56'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 21:57:56'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 21:57:56'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 21:57:56'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 21:57:56'!
PASSED!

!methodRemoval: Deposit #lineForAccountSummary stamp: 'NH 5/31/2023 21:59:00'!
lineForAccountSummary
	^'Deposito por ', value asString
		!
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:00:15'!
lineForAccountSummary
	^'Deposito por ',  value asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:00:17'!
PASSED!
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:01:32'!
lineFor: accountSummary
	accountSummary lineForDeposit.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:01:37' prior: 50608697!
lineFor: accountSummary
	^accountSummary lineForDeposit.! !
!AccountSummary methodsFor: 'nil' stamp: 'NH 5/31/2023 22:03:30'!
lineForDepositWith: aDepositValue
	'Deposito por ', aDepositValue! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:03:35' prior: 50608702!
lineFor: accountSummary
	^accountSummary lineForDepositWith: (value asString).! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:03:35'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:03:41'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:03:41'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:03:41'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:03:41'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:03:41'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:08:13' prior: 50607950!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: accountSummary).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary! !
!Withdraw methodsFor: 'nil' stamp: 'NH 5/31/2023 22:08:36'!
lineFor: accountSummary
	^accountSummary lineForWithdrawWith: (value asString).! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:09:10'!
lineForWithdrawWith: aWithdrawValue
	^'Extraccion por ',  aWithdrawValue asString
		! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:11:02'!
lineFor: accountSummary
	^accountSummary lineForTransferRecipientWith: (self value asString).
	
		! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:11:15'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:11:15'!
ERROR!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:11:15'!
ERROR!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:11:15'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:11:15'!
ERROR!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:11:17'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:12:04' prior: 50608706!
lineForDepositWith: aDepositValue
	^'Deposito por ', aDepositValue! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:12:08'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:12:08'!
ERROR!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:12:08'!
ERROR!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:12:08'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:12:08'!
ERROR!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:12:11'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:12:42' prior: 50608883!
accountSummary
	|accountSummary|
	accountSummary := OrderedCollection new.
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: self).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:12:44'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:12:44'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:12:44'!
ERROR!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:12:44'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:12:44'!
ERROR!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:12:47'!
ERROR!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:12:54'!
lineFor: anAccountSummary 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:13:49'!
lineForTransferRecipientWith: aTRValue
	^('Entrada por transferencia de ', aTRValue)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:14:06'!
lineForTransferRemmiterWith: aTRValue
	^('Salida por transferencia de ', aTRValue)
		! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:14:35' prior: 50609006!
lineFor: anAccountSummary 
	^anAccountSummary lineForTransferRecipientWith: (self value asString).! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:14:41'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:14:41'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:14:41'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:14:41'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:14:41'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:14:44'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:15:26' prior: 50608900!
lineForWithdrawWith: aWithdrawValue
	^'Extraccion por ',  aWithdrawValue 
		! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:16:14'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:16:14'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:16:14'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:16:14'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:16:15'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:16:22'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:17:25' prior: 50609055!
lineForWithdrawWith: aWithdrawValue
	^('Extraccion por ',  aWithdrawValue)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:17:31' prior: 50608938!
lineForDepositWith: aDepositValue
	^('Deposito por ', aDepositValue)! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:17:33'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:17:33'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:17:33'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:17:33'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:17:33'!
FAILURE!

|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. !

|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	aReceptiveAccountReport accountSummary!

|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	aReceptiveAccountReport accountSummary!
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:18:55' prior: 50609023!
lineFor: anAccountSummary 
	^anAccountSummary lineForTransferRemmiterWith: (self value asString).! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:19:12'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:19:12'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:19:12'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:19:12'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:19:12'!
PASSED!

!methodRemoval: TransferRemmiter #lineForAccountSummary stamp: 'NH 5/31/2023 22:19:25'!
lineForAccountSummary
	^('Salida por transferencia de ', self value asString)
		!

!methodRemoval: TransferRecipient #lineForAccountSummary stamp: 'NH 5/31/2023 22:19:37'!
lineForAccountSummary
	^('Entrada por transferencia de ', self value asString)
		!

!methodRemoval: Deposit #lineForAccountSummary stamp: 'NH 5/31/2023 22:19:48'!
lineForAccountSummary
	^'Deposito por ',  value asString!

!methodRemoval: Withdraw #lineForAccountSummary stamp: 'NH 5/31/2023 22:19:59'!
lineForAccountSummary
	^'Extraccion por ',  value asString
		
		!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:23:10' prior: 50608117!
transferNet

	|transferNet| 
	
	transferNet := 0.
	account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: transferNet )].

	^ transferNet 
		
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:23:21' prior: 50609248!
transferNet

	|transferNet| 
	
	transferNet := 0.
	account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: self )].

	^ transferNet 
		
	! !
!TransferNet methodsFor: 'nil' stamp: 'NH 5/31/2023 22:25:17'!
valueForDepositWith: aDepositValue
	^0! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:25:42'!
valueForWith: aDepositValue
	^aDepositValue! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:25:57' prior: 50609265!
valueForDepositWith: aDepositValue
	^aDepositValue! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:25:59'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:25:59'!
ERROR!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:25:59'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:25:59'!
ERROR!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:25:59'!
ERROR!

!methodRemoval: TransferNet #valueForWith: stamp: 'NH 5/31/2023 22:26:02'!
valueForWith: aDepositValue
	^aDepositValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:26:22'!
valueForWithdrawWith: aWithdrawValue
	^aWithdrawValue! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:26:48'!
valueForTransferRecipientWith: aTransferRecipientValue
	^aTransferRecipientValue! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:27:08'!
valueFor: anAccountSummary
	^anAccountSummary valueForDepositWith: 0! !
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/31/2023 22:27:20'!
valueFor: anAccountSummary
	^anAccountSummary valueForWithdrawWith: 0! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:29:31'!
valueFor: aTransferNet
	^ aTransferNet valueForTransferRemmiterWith: self value.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:29:53'!
valueForTransferRemmiterWith: aTransferRemmiterValue
	^-1 * aTransferRemmiterValue! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/31/2023 22:30:27'!
valueFor: aTransferNet
	^ aTransferNet valueForTransferRecipientWith: self value.
	! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:30:53' prior: 50609313!
valueFor: aTransferNet
	^aTransferNet valueForDepositWith: 0! !
!Withdraw methodsFor: 'category-name' stamp: 'NH 5/31/2023 22:31:07' prior: 50609318!
valueFor: aTransferNet
	^aTransferNet valueForWithdrawWith: 0! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:31:30'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:31:30'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:31:30'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:31:31'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:31:31'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:36:30' prior: 50608969!
accountSummary

	|accountSummary|
	
	accountSummary := OrderedCollection new.
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: self).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:38:23'!
operationForDepositWith: aDepositValue
	^aDepositValue! !

!methodRemoval: TransferNet #valueForDepositWith: stamp: 'NH 5/31/2023 22:38:23'!
valueForDepositWith: aDepositValue
	^aDepositValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:38:45'!
operationForTransferRecipientWith: aTransferRecipientValue
	^aTransferRecipientValue! !

!methodRemoval: TransferNet #valueForTransferRecipientWith: stamp: 'NH 5/31/2023 22:38:45'!
valueForTransferRecipientWith: aTransferRecipientValue
	^aTransferRecipientValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:39:04'!
operationForTransferRemmiterWith: aTransferRemmiterValue
	^-1 * aTransferRemmiterValue! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:39:04' prior: 50609323!
valueFor: aTransferNet
	^ aTransferNet operationForTransferRemmiterWith: self value.
	! !

!methodRemoval: TransferNet #valueForTransferRemmiterWith: stamp: 'NH 5/31/2023 22:39:04'!
valueForTransferRemmiterWith: aTransferRemmiterValue
	^-1 * aTransferRemmiterValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:39:43'!
operationForWithdrawWith: aWithdrawValue
	^aWithdrawValue! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:39:43' prior: 50609345!
valueFor: aTransferNet
	^aTransferNet operationForWithdrawWith: 0! !

!methodRemoval: TransferNet #valueForWithdrawWith: stamp: 'NH 5/31/2023 22:39:43'!
valueForWithdrawWith: aWithdrawValue
	^aWithdrawValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:40:24'!
valueForDepositWith: aDepositValue
	^aDepositValue! !

!methodRemoval: TransferNet #operationForDepositWith: stamp: 'NH 5/31/2023 22:40:24'!
operationForDepositWith: aDepositValue
	^aDepositValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:40:38'!
operationForDepositWith: aDepositValue
	^aDepositValue! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:40:38' prior: 50609340!
valueFor: aTransferNet
	^aTransferNet operationForDepositWith: 0! !

!methodRemoval: TransferNet #valueForDepositWith: stamp: 'NH 5/31/2023 22:40:38'!
valueForDepositWith: aDepositValue
	^aDepositValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:41:02'!
valueForWithdrawWith: aWithdrawValue
	^aWithdrawValue! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:41:02' prior: 50609424!
valueFor: aTransferNet
	^aTransferNet valueForWithdrawWith: 0! !

!methodRemoval: TransferNet #operationForWithdrawWith: stamp: 'NH 5/31/2023 22:41:02'!
operationForWithdrawWith: aWithdrawValue
	^aWithdrawValue!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:41:14'!
operationForWithdrawWith: aWithdrawValue
	^aWithdrawValue! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:41:14' prior: 50609461!
valueFor: aTransferNet
	^aTransferNet operationForWithdrawWith: 0! !

!methodRemoval: TransferNet #valueForWithdrawWith: stamp: 'NH 5/31/2023 22:41:14'!
valueForWithdrawWith: aWithdrawValue
	^aWithdrawValue!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:41:20'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:41:20'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:41:20'!
ERROR!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:41:20'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:41:20'!
ERROR!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:41:23'!
ERROR!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:41:47' prior: 50609334!
valueFor: aTransferNet
	^ aTransferNet operationForTransferRecipientWith: self value.
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:41:53'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 22:41:54'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 22:41:54'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:41:54'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:41:54'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:42:37' prior: 50609092!
lineForDepositWith: aDepositValue
	^('Deposito por ', aDepositValue asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:42:46' prior: 50609011!
lineForTransferRecipientWith: aTRValue
	^('Entrada por transferencia de ', aTRValue asString)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:42:50' prior: 50609017!
lineForTransferRemmiterWith: aTRValue
	^('Salida por transferencia de ', aTRValue asString)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:42:54' prior: 50609086!
lineForWithdrawWith: aWithdrawValue
	^('Extraccion por ',  aWithdrawValue asString)
		! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:43:03'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:43:03'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:43:03'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:43:03'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:43:03'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:18'!
operationForWithdrawWith: aWithdrawValue
	^('Extraccion por ',  aWithdrawValue asString)
		! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:18' prior: 50608894!
lineFor: accountSummary
	^accountSummary operationForWithdrawWith: (value asString).! !

!methodRemoval: AccountSummary #lineForWithdrawWith: stamp: 'NH 5/31/2023 22:43:18'!
lineForWithdrawWith: aWithdrawValue
	^('Extraccion por ',  aWithdrawValue asString)
		!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:36'!
operationForTransferRemmiterWith: aTRValue
	^('Salida por transferencia de ', aTRValue asString)
		! !
!TransferRemmiter methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:36' prior: 50609201!
lineFor: anAccountSummary 
	^anAccountSummary operationForTransferRemmiterWith: (self value asString).! !

!methodRemoval: AccountSummary #lineForTransferRemmiterWith: stamp: 'NH 5/31/2023 22:43:36'!
lineForTransferRemmiterWith: aTRValue
	^('Salida por transferencia de ', aTRValue asString)
		!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:53'!
operationForTransferRecipientWith: aTRValue
	^('Entrada por transferencia de ', aTRValue asString)
		! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:43:53' prior: 50608906!
lineFor: accountSummary
	^accountSummary operationForTransferRecipientWith: (self value asString).
	
		! !

!methodRemoval: AccountSummary #lineForTransferRecipientWith: stamp: 'NH 5/31/2023 22:43:53'!
lineForTransferRecipientWith: aTRValue
	^('Entrada por transferencia de ', aTRValue asString)
		!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:44:24'!
operationForDepositWith: aDepositValue
	^('Deposito por ', aDepositValue asString)! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:44:24' prior: 50608711!
lineFor: accountSummary
	^accountSummary operationForDepositWith: (value asString).! !

!methodRemoval: AccountSummary #lineForDepositWith: stamp: 'NH 5/31/2023 22:44:24'!
lineForDepositWith: aDepositValue
	^('Deposito por ', aDepositValue asString)!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 22:45:08'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 22:45:08'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 22:45:08'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 22:45:08'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 22:45:08'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:48:42' prior: 50609371!
accountSummary
	
	^account giveReport: self. 

	"|accountSummary|
	
	accountSummary := OrderedCollection new.
	
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: self).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary"! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 22:50:10'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:50:08' prior: 50609679!
accountSummary
	
	account giveReport: self. 
	^accountSummary

	"|accountSummary|
	
	accountSummary := OrderedCollection new.
	
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: self).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary"! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 22:50:27' prior: 50607927!
initializeFor: anAccount 
	account := anAccount.
	accountSummary := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'NH 5/31/2023 22:50:50'!
giveReport: anAccountSummary
! !
!ReceptiveAccount methodsFor: 'account summary' stamp: 'NH 5/31/2023 22:56:48' prior: 50609719!
giveReport: aReport

	transactions do:[ :aTransaction |  aTransaction doOperationForReport: aReport ].! !
!ReceptiveAccount methodsFor: 'account summary' stamp: 'NH 5/31/2023 22:57:10' prior: 50609724!
giveReport: aReport

	^transactions do:[ :aTransaction |  aTransaction doOperationForReport: aReport ].! !
!Deposit methodsFor: 'nil' stamp: 'NH 5/31/2023 22:58:23'!
doOperationForReport: aReport
	^aReport operationForDepositWith: value.
! !
!Withdraw methodsFor: 'nil' stamp: 'NH 5/31/2023 22:58:58'!
doOperationForReport: aReport
	^aReport operationForWithdrawWith: value.
! !
!TransferRecipient methodsFor: 'nil' stamp: 'NH 5/31/2023 22:59:31'!
doOperationForReport: aReport
	^aReport operationForTransferRecipientWith: self value.
! !
!TransferRemmiter methodsFor: 'nil' stamp: 'NH 5/31/2023 22:59:53'!
doOperationForReport: aReport
	^aReport operationForTransferRemmiterWith: self value.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:01:21' prior: 50609640!
operationForDepositWith: aDepositValue
	^accountSummary add: ('Deposito por ', aDepositValue asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:01:26' prior: 50609621!
operationForTransferRecipientWith: aTRValue
	^accountSummary add: ('Entrada por transferencia de ', aTRValue asString)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:01:30' prior: 50609602!
operationForTransferRemmiterWith: aTRValue
	^accountSummary add: ('Salida por transferencia de ', aTRValue asString)
		! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:01:34' prior: 50609585!
operationForWithdrawWith: aWithdrawValue
	^accountSummary add: ('Extraccion por ',  aWithdrawValue asString)
		! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:01:36'!
FAILURE!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 23:01:36'!
FAILURE!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 23:01:36'!
FAILURE!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:01:36'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:01:36'!
ERROR!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:01:39'!
FAILURE!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:01:59'!
FAILURE!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 23:02:08'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:02:43' prior: 50609700!
accountSummary
	
	account giveReport: self. 
	accountSummary add: ('Balance = ', account balance asString).
	^accountSummary

	"|accountSummary|
	
	accountSummary := OrderedCollection new.
	
	
	account transactions do:[ :aTransaction |  accountSummary add: (aTransaction lineFor: self).].
	
	accountSummary add: ('Balance = ', account balance asString).

	^accountSummary"! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:02:45'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 23:02:45'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 23:02:45'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:02:45'!
ERROR!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:02:45'!
ERROR!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:02:48'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'NH 5/31/2023 23:05:23'!
giveReport: aReport

	^accounts do:[ :anAccount |  anAccount giveReport: aReport ].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 5/31/2023 23:08:23'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:08:28'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 23:08:28'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 23:08:28'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:08:28'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:08:28'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:09:17' prior: 50609820!
accountSummary
	
	account giveReport: self. 
	accountSummary add: ('Balance = ', account balance asString).
	
	^accountSummary! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:11:10' prior: 50609257!
transferNet

	|transferNet| 
	
	transferNet := 0.
	account giveReport: self.
	"account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: self )]."

	^ transferNet 
		
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:13:15' prior: 50609952!
transferNet

	account giveReport: self.
	"account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: self )]."

	 
		
	! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:13:20'!
Object subclass: #TransferNet
	instanceVariableNames: 'account transerNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:13:19' prior: 50609962!
transferNet

	account giveReport: self.
	"account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: self )]."

	^transerNet 
		
	! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:13:30'!
Object subclass: #TransferNet
	instanceVariableNames: 'account transerNet transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:13:29' prior: 50608091!
initializeFor: anAccount 
	
	account := anAccount.
	transferNet := 0.! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:13:31'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:13:31'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:13:31'!
FAILURE!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:13:31'!
FAILURE!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:13:31'!
FAILURE!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:13:35'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:13:52' prior: 50609442!
operationForDepositWith: aDepositValue
	^transferNet + aDepositValue! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:14:25' prior: 50609391!
operationForTransferRecipientWith: aTransferRecipientValue
	^transferNet := transferNet + aTransferRecipientValue! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:14:39' prior: 50610026!
operationForDepositWith: aDepositValue
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:14:53' prior: 50610039!
operationForDepositWith: aDepositValue
	^transferNet! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:15:23' prior: 50609402!
operationForTransferRemmiterWith: aTransferRemmiterValue
	^ transferNet := transferNet  - aTransferRemmiterValue! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:15:25'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:15:25'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:15:25'!
FAILURE!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:15:25'!
FAILURE!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:15:25'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:15:46' prior: 50609471!
operationForWithdrawWith: aWithdrawValue
	^transferNet! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:15:47'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:15:47'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:15:47'!
FAILURE!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:15:47'!
FAILURE!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:15:47'!
FAILURE!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:15:51'!
FAILURE!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:18:08'!
FAILURE!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:18:08'!
FAILURE!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:18:08'!
FAILURE!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:18:08'!
FAILURE!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:18:08'!
FAILURE!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:18:10'!
FAILURE!

|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:0 equals:  (aReceptiveAccountTransferNet transferNet) .!

|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:19:49' prior: 50609978!
transferNet

	account giveReport: self.
	"account transactions do:[:aTransaction | transferNet := 	transferNet + (aTransaction valueFor: self )]."

	^transferNet 
		
	! !

Object subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:19:57'!
Object subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:20:01'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:20:01'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:20:01'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:20:01'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:20:01'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:20:10'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:20:10'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:20:10'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:20:10'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:20:10'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:20:44'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:20:56'!
Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:21:02'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:22:01' prior: 50610145!
transferNet

	account giveReport: self.
	

	^transferNet 
		
	! !

!methodRemoval: Deposit #lineFor: stamp: 'NH 5/31/2023 23:22:14'!
lineFor: accountSummary
	^accountSummary operationForDepositWith: (value asString).!

!methodRemoval: Deposit #valueFor: stamp: 'NH 5/31/2023 23:22:19'!
valueFor: aTransferNet
	^aTransferNet operationForDepositWith: 0!

!methodRemoval: Deposit #valueForTransferNet stamp: 'NH 5/31/2023 23:22:25'!
valueForTransferNet
	^0!

!methodRemoval: Withdraw #lineFor: stamp: 'NH 5/31/2023 23:22:34'!
lineFor: accountSummary
	^accountSummary operationForWithdrawWith: (value asString).!

!methodRemoval: TransferRecipient #lineFor: stamp: 'NH 5/31/2023 23:22:40'!
lineFor: accountSummary
	^accountSummary operationForTransferRecipientWith: (self value asString).
	
		!

!methodRemoval: TransferRecipient #valueFor: stamp: 'NH 5/31/2023 23:22:44'!
valueFor: aTransferNet
	^ aTransferNet operationForTransferRecipientWith: self value.
	!

!methodRemoval: TransferRecipient #valueForTransferNet stamp: 'NH 5/31/2023 23:22:46'!
valueForTransferNet
	^ self value!

!methodRemoval: TransferRemmiter #lineFor: stamp: 'NH 5/31/2023 23:22:50'!
lineFor: anAccountSummary 
	^anAccountSummary operationForTransferRemmiterWith: (self value asString).!

!methodRemoval: TransferRemmiter #valueFor: stamp: 'NH 5/31/2023 23:22:53'!
valueFor: aTransferNet
	^ aTransferNet operationForTransferRemmiterWith: self value.
	!

!methodRemoval: TransferRemmiter #valueForTransferNet stamp: 'NH 5/31/2023 23:22:54'!
valueForTransferNet
	^ -1 * (self value).
	!
!Report methodsFor: 'nil' stamp: 'NH 5/31/2023 23:23:32'!
initializeFor: anAccount 
	self subclassResponsibility ! !
!Report methodsFor: 'nil' stamp: 'NH 5/31/2023 23:23:47'!
operationForDepositWith: aDepositValue
	^self subclassResponsibility ! !
!Report methodsFor: 'nil' stamp: 'NH 5/31/2023 23:24:07'!
operationForTransferRecipientWith: aTRValue
	^self subclassResponsibility 
		! !
!Report methodsFor: 'nil' stamp: 'NH 5/31/2023 23:24:30'!
operationForTransferRemmiterWith: aTRValue
	^self subclassResponsibility 
		! !
!Report methodsFor: 'nil' stamp: 'NH 5/31/2023 23:24:52'!
operationForWithdrawWith: aWithdrawValue
	^self subclassResponsibility ! !

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:25:01'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 5/31/2023 23:25:01'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 5/31/2023 23:25:01'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:25:01'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:25:01'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:25:03'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:25:03'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:25:03'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:25:03'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:25:03'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:25:31' prior: 50610044 overrides: 50610300!
operationForDepositWith: aDepositValue
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:25:32'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:25:32'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:25:32'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:25:32'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:25:32'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:25:38' prior: 50610077 overrides: 50610315!
operationForWithdrawWith: aWithdrawValue
	! !

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:25:39'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:25:39'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:25:39'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:25:39'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:25:39'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 5/31/2023 23:25:43'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 5/31/2023 23:25:43'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 5/31/2023 23:25:43'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 5/31/2023 23:25:43'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 5/31/2023 23:25:43'!
PASSED!

TestCase subclass: #PortfolioSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSummaryTest category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:30:20'!
TestCase subclass: #PortfolioSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummaryTest methodsFor: 'nil' stamp: 'NH 5/31/2023 23:31:02'!
test01PortfolioSummaryForEmptyPortfolio! !

!classDefinition: #PortfolioSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:34:15'!
Object subclass: #PortfolioSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:34:08' prior: 50610447!
test01PortfolioSummaryForEmptyPortfolio

	|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio new.
	thePortfolioSummary  := OrderedCollection new.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. 
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:34:18'!
ERROR!
!PortfolioSummary class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:34:29'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!PortfolioSummary class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:34:44' prior: 50610476!
for: aPortfolio 
	^self new initializeFor: aPortfolio ! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:34:51'!
ERROR!

!classDefinition: #PortfolioSummary category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:34:59'!
Object subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:34:59'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:35:04' prior: 50610501!
initializeFor: aPortfolio 

	portfolio := aPortfolio.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:35:05'!
ERROR!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:35:11'!
report
	self shouldBeImplemented.! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:35:23' prior: 50610515!
report
	^OrderedCollection new.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:35:26'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:35:26'!
PASSED!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:42:50'!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familiyAccount myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familiyAccount  := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familiyAccount. 
	aPortfolioSummary add:'Portfolio de la familia'.
	aPortfolioSummary add:' Cuenta mia'.
	aPortfolioSummary add:' Portfolio de hijos'.
	
	thePortfolioSummary  := OrderedCollection new.
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:43:42' prior: 50610460!
test01PortfolioSummaryForEmptyPortfolio

	|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. 
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:44:00' prior: 50610556!
test01PortfolioSummaryForEmptyPortfolio

	|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'portfolio vacio'.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. 
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:44:05'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:44:17'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:44:34' prior: 50610588!
named: aName
	^self new initializeNamed: aName ! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:44:36'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:44:46'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:44:46'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:44:50' prior: 50610612!
initializeNamed: aName 
	name := aName.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:44:52'!
FAILURE!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:45:26' prior: 50610520!
report
	^OrderedCollection with: 'Portfolio vaio'.! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 5/31/2023 23:45:28' prior: 50610625!
report
	^OrderedCollection with: 'Portfolio vacio'.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:45:29'!
FAILURE!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:45:29'!
ERROR!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:45:59' prior: 50610570!
test01PortfolioSummaryForEmptyPortfolio

	|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'Portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio vacio'.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. 
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:46:00'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:46:00'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:46:00'!
ERROR!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:46:00'!
ERROR!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 5/31/2023 23:46:13'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:47:45'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:47:52'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:48:07' prior: 50610680!
named: aName 
	
	
	^self new initializeNamed: aName ! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:48:10'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:48:20'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:48:20'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:48:24' prior: 50610705!
initializeNamed: aName 
	
	name := aName.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:48:26'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:48:36'!
named: aString with: aReceptiveAccount with: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount with: aPortfolio ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 5/31/2023 23:48:57' prior: 50610719!
named: aString with: aReceptiveAccount with: aPortfolio 

	^self new initializeNamed: aString with: aReceptiveAccount with: aPortfolio ! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:49:00'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:49:09'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:49:09'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name string receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'NH 5/31/2023 23:49:09'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name string receptiveAccount portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:49:09'!
initializeNamed: aString with: aReceptiveAccount with: aPortfolio 
	self shouldBeImplemented.
	string := aString.
	receptiveAccount := aReceptiveAccount.
	portfolio := aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'NH 5/31/2023 23:49:37' prior: 50610766!
initializeNamed: aName with: aReceptiveAccount with: aPortfolio 
	
	name := aName.
	receptiveAccount := aReceptiveAccount.
	portfolio := aPortfolio.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:49:39'!
ERROR!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:50:08' prior: 50610531!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familiyAccount myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familiyAccount  := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familiyAccount. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:50:09'!
FAILURE!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 5/31/2023 23:50:33' prior: 50610787!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familiyAccount myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familiyAccount  := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familiyAccount. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 5/31/2023 23:50:36'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'NH 6/1/2023 00:04:32' prior: 50610617!
initializeNamed: aName 
	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 6/1/2023 00:04:41'!
PASSED!

!methodRemoval: Portfolio #initializeNamed:with:with: stamp: 'NH 6/1/2023 00:04:45'!
initializeNamed: aName with: aReceptiveAccount with: aPortfolio 
	
	name := aName.
	receptiveAccount := aReceptiveAccount.
	portfolio := aPortfolio.!
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 6/1/2023 00:05:59' prior: 50610730!
named: aName with: anAccount with: anotherAccount 

	^self new initializeNamed: aName;
		add: anAccount;
		add: anotherAccount;
		yourself ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 6/1/2023 00:06:42' prior: 50610915!
named: aName with: anAccount with: anotherAccount 

	^(self new initializeNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself ! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 00:08:31' prior: 50610816!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 00:08:36'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'NH 6/1/2023 00:08:50'!
named: aName with: anAccount 

	^(self new initializeNamed: aName)
		add: anAccount;
		yourself ! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 00:09:03'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'NH 6/1/2023 00:12:01' overrides: 16903442!
name
	^name! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'NH 6/1/2023 00:13:05'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(1 June 2023 00:14:46) CuisUniversity-5706.image priorSource: 8826107!

----QUIT----(1 June 2023 01:33:54) CuisUniversity-5706.image priorSource: 8938723!

----STARTUP---- (1 June 2023 11:14:48) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/portfolio/CuisUniversity-5706.image!


!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:16:33'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:16:36'!
FAILURE!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:16:36'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:26:06'!
accounts
	^accounts ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:26:13' prior: 50611007!
accounts
	^accounts copy ! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:27:37' prior: 50610630!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolioReport add: portfolio name.
	portfolioReport accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
		
	]! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:27:52' prior: 50611015!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolioReport add: portfolio name.
	portfolioReport accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	]
	^ portfolioReport! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NH 6/1/2023 11:29:30' prior: 50610711!
initializeNamed: aName 
	
	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:29:53'!
ERROR!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:29:53'!
ERROR!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:29:56'!
ERROR!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:30:13' prior: 50611025!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolioReport add: portfolio name.
	portfolio accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	]
	^ portfolioReport! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:30:14'!
ERROR!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:30:14'!
ERROR!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:30:16'!
ERROR!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:33:38' prior: 50611052!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolioReport add: portfolio name.
	portfolio accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	].
	^ portfolioReport! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:33:39'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:33:39'!
FAILURE!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:33:39'!
FAILURE!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:33:58'!
PASSED!

|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	aPortfolioSummary report!
!ReceptiveAccount methodsFor: 'nil' stamp: 'NH 6/1/2023 11:36:35' overrides: 16903442!
name
	^name! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:37:23' prior: 50610931!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	aPortfolioSummary report
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:37:24'!
ERROR!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:37:33' prior: 50611120!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:37:36'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:37:36'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:37:36'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:37:41'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:37:47'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:37:47'!
PASSED!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:38:56' prior: 50611150!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	"familyPortfolio add: childrenPortfolio."
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	"thePortfolioSummary add:' Portfolio de hijos'."
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:39:01'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 11:39:01'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 11:39:01'!
PASSED!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:39:12' prior: 50611198!
test02PortfolioSummaryForPortfolioWithOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:39:31'!
test03PortfolioSummaryForPortfolioWithMoreThanOneLevel

	|familyPortfolio myAccount childrenPortfolio thePortfolioSummary aPortfolioSummary|
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio  := Portfolio named: 'Portfolio de la familia' with: myAccount.
	familyPortfolio add: childrenPortfolio.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio. 
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:45:08' prior: 50611260!
test03PortfolioSummaryForPortfolioWithMoreThanOneLevel

	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	
	self assert: thePortfolioSummary equals: familyPortfolio report.! !

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 11:45:10'!
ERROR!
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 11:46:45' prior: 50611286!
test03PortfolioSummaryForPortfolioWithMoreThanOneLevel

	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 11:46:47'!
FAILURE!

|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.!

self report!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:53:09' prior: 50611073!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolio giveNameReport: portfolioReport. 
	"
	portfolioReport add: portfolio name.
	portfolio accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	]."
	^ portfolioReport! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 11:53:22' prior: 50611386!
report
	|portfolioReport|
	portfolioReport := OrderedCollection new.
	portfolio giveNameReport: portfolioReport with: 0.
	"
	portfolioReport add: portfolio name.
	portfolio accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	]."
	^ portfolioReport! !

' ' join: 5!

' ' join: 2!

5 timesRepeat: ' ',' ' !

5 timesRepeat: [' ',' ']!

5 timesRepeat: [' ',' ']!

' ' add: ' ' withOccurrences: 3 !

'' add: ' ' withOccurrences: 3 !

|aString|
aString := ''.
5 timesRepeat: [ aString := aString, ' '].
aString!

|aString|
aString := 'portfolio'.
5 timesRepeat: [ aString := aString, ' '].
aString !

aString   !

|aString|
aString := 'portfolio'.
5 timesRepeat: [ aString := ' ', aString].
aString !
!Portfolio methodsFor: 'nil' stamp: 'NH 6/1/2023 12:06:09'!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: (nameToAdd := ' ', nameToAdd ).
	aPortfolioReport add: nameToAdd. 
	accounts do:[:anAccount | anAccount giveNameReport: aPortfolioReport with: (level +1) ].
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'NH 6/1/2023 12:06:36'!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: (nameToAdd := ' ', nameToAdd ).
	aPortfolioReport add: nameToAdd. 
	
	! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:07:38' prior: 50611398!
report
	! !

!classDefinition: #PortfolioSummary category: 'Portfolio-Solucion' stamp: 'NH 6/1/2023 12:07:46'!
Object subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio portfolioReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:07:44' prior: 50611443!
report
	
	portfolio giveNameReport: portfolioReport with: 0.
	"
	portfolioReport add: portfolio name.
	portfolio accounts do:[:anAccount | 
		portfolioReport add: (' ', anAccount name)
	]."
	^ portfolioReport! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:07:48'!
ERROR!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:07:48'!
ERROR!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:07:48'!
ERROR!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:07:54'!
ERROR!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:08:12' prior: 50610507!
initializeFor: aPortfolio 

	portfolio := aPortfolio.
	portfolioReport := OrderedCollection new.! !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:08:13'!
FAILURE!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:08:13'!
FAILURE!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:08:13'!
FAILURE!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:08:15'!
FAILURE!

|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'Portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio vacio'.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. !

self report !

|aString|
aString := 'portfolio'.
0 timesRepeat: [ aString := ' ', aString].
aString   !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:10:27'!
FAILURE!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:10:27'!
FAILURE!

|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'Portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio vacio'.!

self accounts !

|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'Portfolio vacio'.!

self accounts!

|aPortfolio thePortfolioSummary aPortfolioSummary|
	
	aPortfolio  := Portfolio named:'Portfolio vacio'.
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio vacio'.
	aPortfolioSummary := PortfolioSummary for: aPortfolio. 
	aPortfolioSummary report!

nameToAdd!

level!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:14:19' prior: 50611423!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: [nameToAdd := ' ', nameToAdd ].
	aPortfolioReport add: nameToAdd. 
	accounts do:[:anAccount | anAccount giveNameReport: aPortfolioReport with: (level +1) ].
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 6/1/2023 12:14:22'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:14:28'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:14:28'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:14:28'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:14:28'!
FAILURE!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:14:28'!
FAILURE!

|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report.!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:29:21' prior: 50611434!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: [nameToAdd := ' ', nameToAdd].
	aPortfolioReport add: nameToAdd. 
	
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 6/1/2023 12:29:22'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:29:39'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:29:39'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:29:39'!
FAILURE!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:29:39'!
FAILURE!

|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report!

|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report!

|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary !

	aPortfolioSummary report   !

	
|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report   !


|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:'	 Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary !


|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' ', '	Cuenta mia'.
	thePortfolioSummary add:' ', 'Portfolio de hijos'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Juan'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary !

thePortfolioSummary!

thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' ', '	Cuenta mia'.
	thePortfolioSummary add:' ', 'Portfolio de hijos'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Juan'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Angeles'.!

thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' ', '	Cuenta mia'.
	thePortfolioSummary add:' ', 'Portfolio de hijos'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Juan'.
	thePortfolioSummary add:' ', ' ', 'Cuenta de Angeles'.
	thePortfolioSummary!

thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' 	Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	thePortfolioSummary!

thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	thePortfolioSummary!

	
|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary   !
!PortfolioSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:40:54' prior: 50611321!
test03PortfolioSummaryForPortfolioWithMoreThanOneLevel

	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
		
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	
	self assert: thePortfolioSummary equals: aPortfolioSummary report.! !

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:40:54'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:40:55'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:40:55'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:40:55'!
PASSED!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:42:14' prior: 50611455!
report
	
	portfolio giveNameReport: portfolioReport with: 0.
	^ portfolioReport! !

----SNAPSHOT----(1 June 2023 12:44:00) CuisUniversity-5706.image priorSource: 8938811!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:49:04' prior: 50611989!
report
	portfolio givePortfolioSummaryFor: self with: 0. 
	
	"portfolio giveNameReport: portfolioReport with: 0."
	^ portfolioReport! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:51:16'!
addPortfolioName: aNameToAdd with: level
	|nameToAdd|
	nameToAdd  := aNameToAdd.
	level timesRepeat: [nameToAdd := ' ', nameToAdd ].
	portfolioReport add: nameToAdd. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:51:51'!
givePortfolioSummaryFor: aPortfolioSummary with: level
	aPortfolioSummary addPortfolioName: self name with: level. 
	accounts do:[:anAccount | anAccount givePortfolioSummaryFor: aPortfolioSummary with: (level +1) ].
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:52:52'!
givePortfolioSummaryFor: aPortfolioSummary with: level
	aPortfolioSummary addName: self name with: level. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:53:08' prior: 50612013!
givePortfolioSummaryFor: aPortfolioSummary with: level
	aPortfolioSummary addName: self name with: level. 
	accounts do:[:anAccount | anAccount givePortfolioSummaryFor: aPortfolioSummary with: (level +1) ].
	! !
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:53:19'!
addName: aNameToAdd with: level
	|nameToAdd|
	nameToAdd  := aNameToAdd.
	level timesRepeat: [nameToAdd := ' ', nameToAdd ].
	portfolioReport add: nameToAdd. ! !

!methodRemoval: PortfolioSummary #addPortfolioName:with: stamp: 'NH 6/1/2023 12:53:19'!
addPortfolioName: aNameToAdd with: level
	|nameToAdd|
	nameToAdd  := aNameToAdd.
	level timesRepeat: [nameToAdd := ' ', nameToAdd ].
	portfolioReport add: nameToAdd. !

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 12:53:44'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 12:53:44'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 12:53:44'!
PASSED!
!PortfolioSummary methodsFor: 'category-name' stamp: 'NH 6/1/2023 12:54:02' prior: 50611998!
report
	portfolio givePortfolioSummaryFor: self with: 0. 
	^ portfolioReport! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:54:20' prior: 50612030!
givePortfolioSummaryFor: aPortfolioSummary with: level

	aPortfolioSummary addName: self name with: level. 
	accounts do:[:anAccount | anAccount givePortfolioSummaryFor: aPortfolioSummary with: (level +1) ].
	! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 6/1/2023 12:54:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 6/1/2023 12:54:27'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01'!
report

	account giveReport: self.
	

	^transferNet 
		
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01' prior: 50606239!
test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.

	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert: -20 equals: (aReceptiveAccountTransferNet report).! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01' prior: 50606190!
test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountTransferNet |
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:10 equals:  (aReceptiveAccountTransferNet report) .! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01' prior: 50608017!
test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount

	|aPortfolio aPortfolioTransferNet account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	aPortfolioTransferNet := TransferNet for: aPortfolio.
	
	self assert: 0  equals:(aPortfolioTransferNet report) ! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01' prior: 50606290!
test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount

	|aReceptiveAccount  aReceptiveAccountTransferNet|
	
	aReceptiveAccount := ReceptiveAccount new.
	aReceptiveAccountTransferNet := TransferNet for: aReceptiveAccount.
	
	self assert:0 equals:  (aReceptiveAccountTransferNet report) .! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:01' prior: 50607982!
test04PortfolioTransferNetForAPortfolioWithOneAccount

	|aPortfolio  aPortfolioTransferNet account1 |
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	aPortfolio := Portfolio with: account1.
	
	aPortfolioTransferNet := TransferNet for: aPortfolio.
	
	self assert: 0 equals:(aPortfolioTransferNet report) .! !

!methodRemoval: TransferNet #transferNet stamp: 'NH 6/1/2023 12:57:01'!
transferNet

	account giveReport: self.
	

	^transferNet 
		
	!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 12:57:05'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 6/1/2023 12:57:05'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 6/1/2023 12:57:05'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 12:57:05'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 12:57:05'!
PASSED!
!AccountSummary methodsFor: 'accountSummary' stamp: 'NH 6/1/2023 12:57:21'!
report
	
	account giveReport: self. 
	accountSummary add: ('Balance = ', account balance asString).
	
	^accountSummary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:21' prior: 50607367!
test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount

	|aReceptiveAccount emptyAccountBalance aReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	emptyAccountBalance := OrderedCollection new.
	emptyAccountBalance add: 'Balance = 0'. 
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	self assert: emptyAccountBalance  equals:(aReceptiveAccountReport report) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:21' prior: 50606534!
test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions

	|aReceptiveAccount anotherReceptiveAccount aReceptiveAccountReport theReceptiveAccountReport|
	
	aReceptiveAccount := ReceptiveAccount new.
	anotherReceptiveAccount := ReceptiveAccount new.
	Deposit register:  100 on: aReceptiveAccount.
	Withdraw register:  50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount transfer: 20 to: anotherReceptiveAccount.
	Transfer from: anotherReceptiveAccount transfer: 30 to: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	theReceptiveAccountReport := OrderedCollection new.
	theReceptiveAccountReport add: 'Deposito por 100'.
	theReceptiveAccountReport add: 'Extraccion por 50'.
	theReceptiveAccountReport add: 'Salida por transferencia de 20'.
	theReceptiveAccountReport add: 'Entrada por transferencia de 30'.
	theReceptiveAccountReport add: 'Balance = 60'. 
	
	self assert: theReceptiveAccountReport  equals: (aReceptiveAccountReport report).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:21' prior: 50607633!
test04PortfolioAccountSummaryForAPortfolioWithOneAccount

	|aPortfolio emptyPortfolioBalance aPortfolioReport account1 |
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.

	
	Deposit register: 100 on: account1.
	
	aPortfolio := Portfolio with: account1.
	
	
	emptyPortfolioBalance := OrderedCollection new.
	emptyPortfolioBalance add: 'Deposito por 100'.
	emptyPortfolioBalance add: 'Balance = 100'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: emptyPortfolioBalance  equals:(aPortfolioReport report) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:21' prior: 50606513!
test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction

	|aReceptiveAccount aReceptiveAccountReport receptiveAccountBalance|
	
	aReceptiveAccount := ReceptiveAccount new.
	Deposit register:  10 on: aReceptiveAccount.
	aReceptiveAccountReport := AccountSummary for: aReceptiveAccount.
	
	receptiveAccountBalance := OrderedCollection new.
	receptiveAccountBalance add: 'Deposito por 10'.
	receptiveAccountBalance add: 'Balance = 10'. 
	
	self assert: receptiveAccountBalance equals: (aReceptiveAccountReport report) .! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 12:57:21' prior: 50607845!
test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount

	|aPortfolio thePortfolioBalance aPortfolioReport account1 account2|
	
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new. 
	
	Deposit register: 100 on: account1.
	Transfer from: account1 transfer: 50 to: account2.
	Withdraw register:  50 on: account2.
	Transfer from: account2 transfer: 25 to: account1.
	
	aPortfolio := Portfolio with: account1.
	aPortfolio add: account2.
	
	thePortfolioBalance := OrderedCollection new.
	thePortfolioBalance add: 'Deposito por 100'.
	thePortfolioBalance add: 'Salida por transferencia de 50'.
	thePortfolioBalance add: 'Entrada por transferencia de 25'.

	thePortfolioBalance add: 'Entrada por transferencia de 50'.
	thePortfolioBalance add: 'Extraccion por 50'.
	thePortfolioBalance add: 'Salida por transferencia de 25'.

	thePortfolioBalance add: 'Balance = 50'. 
	aPortfolioReport := AccountSummary for: aPortfolio.
	
	self assert: thePortfolioBalance  equals:(aPortfolioReport report) 
	! !

!methodRemoval: AccountSummary #accountSummary stamp: 'NH 6/1/2023 12:57:21'!
accountSummary
	
	account giveReport: self. 
	accountSummary add: ('Balance = ', account balance asString).
	
	^accountSummary!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 12:57:24'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 6/1/2023 12:57:24'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 6/1/2023 12:57:24'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 12:57:24'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 12:57:24'!
PASSED!

!methodRemoval: Portfolio #giveNameReport:with: stamp: 'NH 6/1/2023 12:59:45'!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: [nameToAdd := ' ', nameToAdd ].
	aPortfolioReport add: nameToAdd. 
	accounts do:[:anAccount | anAccount giveNameReport: aPortfolioReport with: (level +1) ].
	!


	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary.
	childrenPortfolio rootParents size!


	
|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary.
	johnsAccount rootParents size !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 6/1/2023 13:10:42'!
PASSED!

!methodRemoval: ReceptiveAccount #giveNameReport:with: stamp: 'NH 6/1/2023 13:10:45'!
giveNameReport: aPortfolioReport with: level
	|nameToAdd|
	nameToAdd  := self name.
	level timesRepeat: [nameToAdd := ' ', nameToAdd].
	aPortfolioReport add: nameToAdd. 
	
	!



	
|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio thePortfolioSummary aPortfolioSummary|
	
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:
	myAccount with: childrenPortfolio.
	
	thePortfolioSummary  := OrderedCollection new.
	thePortfolioSummary add:'Portfolio de la familia'.
	thePortfolioSummary add:' Cuenta mia'.
	thePortfolioSummary add:' Portfolio de hijos'.
	thePortfolioSummary add:'  Cuenta de Juan'.
	thePortfolioSummary add:'  Cuenta de Angeles'.
	
	aPortfolioSummary := PortfolioSummary for: familyPortfolio.
	aPortfolioSummary report = thePortfolioSummary.
	familyPortfolio rootParents size !

!methodRemoval: Portfolio #accounts stamp: 'NH 6/1/2023 13:39:36'!
accounts
	^accounts copy !

!methodRemoval: Withdraw #valueFor: stamp: 'NH 6/1/2023 13:41:01'!
valueFor: aTransferNet
	^aTransferNet operationForWithdrawWith: 0!

!methodRemoval: Withdraw #valueForTransferNet stamp: 'NH 6/1/2023 13:41:01'!
valueForTransferNet
	^0!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 13:41:35'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 6/1/2023 13:41:35'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 6/1/2023 13:41:35'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 13:41:35'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 13:41:35'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 6/1/2023 13:41:47'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 13:41:52'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 13:41:52'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 13:41:52'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 13:43:01'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 13:43:01'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 13:43:01'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 13:46:41'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 6/1/2023 13:46:41'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 6/1/2023 13:46:41'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 13:46:41'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 13:46:41'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 13:46:48'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 6/1/2023 13:46:48'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 6/1/2023 13:46:48'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 13:46:48'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 13:46:48'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 13:47:04'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 6/1/2023 13:47:04'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 6/1/2023 13:47:04'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 13:47:04'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 13:47:04'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'NH 6/1/2023 13:47:13'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 13:47:15'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 13:47:15'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 13:47:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 6/1/2023 13:47:18'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 13:47:26'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 6/1/2023 13:47:26'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 6/1/2023 13:47:26'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 13:47:26'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 13:47:26'!
PASSED!
!Transfer methodsFor: 'intialization' stamp: 'NH 6/1/2023 13:58:10' prior: 50605069!
initializeWith: aValueToTransfer from: anAccountToExtractMoney to: anAccountToReceivedMoney
	transferValue := aValueToTransfer.
	source := TransferRemmiter register: self on: anAccountToExtractMoney .
	target := TransferRecipient register: self on: anAccountToReceivedMoney ! !
!TransferLegs class methodsFor: 'instance creation' stamp: 'NH 6/1/2023 13:58:39'!
register: aTransaction on: aReceptiveAccount 
	
	^self new initializeRegister: aTransaction on: aReceptiveAccount! !
!TransferLegs methodsFor: 'intialization' stamp: 'NH 6/1/2023 13:59:03'!
initializeRegister: aTransaction on: aReceptiveAccount 
	aReceptiveAccount register: self.
	transaction := aTransaction.! !
!TransferLegs class methodsFor: 'nil' stamp: 'NH 6/1/2023 14:03:39'!
for: aTransaction
	self new initializeFor: aTransaction! !
!TransferLegs methodsFor: 'intialization' stamp: 'NH 6/1/2023 14:04:20'!
initializeFor: aTransaction
	transaction  := aTransaction ! !

!methodRemoval: TransferLegs class #register:on: stamp: 'NH 6/1/2023 14:05:17'!
register: aTransaction on: aReceptiveAccount 
	
	^self new initializeRegister: aTransaction on: aReceptiveAccount!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'NH 6/1/2023 14:05:44'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:06:28'!
ERROR!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 14:06:28'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 14:06:28'!
ERROR!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 14:06:28'!
ERROR!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 14:06:28'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 14:06:28'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:06:33'!
ERROR!
!TransferLegs class methodsFor: 'as yet unclassified' stamp: 'NH 6/1/2023 14:07:21' prior: 50612855!
for: aTransaction
	^self new initializeFor: aTransaction! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 14:07:36'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:07:41'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 14:07:41'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 14:07:41'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 14:07:41'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 14:07:41'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 14:07:41'!
PASSED!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NH 6/1/2023 14:08:34' prior: 50604574!
register: TransactionInfo on: account

	| transaction |
	
	transaction := self for: TransactionInfo.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: TransferLegs class #register:on:for: stamp: 'NH 6/1/2023 14:08:44'!
register: aTransferValue on: aReceptiveAccount for: aTransaction
	
	^self new initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction!

!methodRemoval: TransferLegs #initializeRegister:on: stamp: 'NH 6/1/2023 14:09:08'!
initializeRegister: aTransaction on: aReceptiveAccount 
	aReceptiveAccount register: self.
	transaction := aTransaction.!

!methodRemoval: TransferLegs #initializeRegister:on:for: stamp: 'NH 6/1/2023 14:09:11'!
initializeRegister: aTransferValue on: aReceptiveAccount for: aTransaction 
	aReceptiveAccount register: self.
	transaction := aTransaction.!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 14:10:03'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 14:11:35'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 14:11:35'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 14:11:35'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 14:11:39'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 6/1/2023 14:11:39'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 6/1/2023 14:11:39'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 14:11:39'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 14:11:39'!
PASSED!

!testRun: #TransferNetTest #test01ReceptiveAccountTransferNetForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 14:11:43'!
PASSED!

!testRun: #TransferNetTest #test02ReceptiveAccountTransferNetForAReceptiveAccountWithOneTransfer stamp: 'NH 6/1/2023 14:11:43'!
PASSED!

!testRun: #TransferNetTest #test03ReceptiveAccountTransferNetForAReceptiveAccountWithMoreTransfer stamp: 'NH 6/1/2023 14:11:43'!
PASSED!

!testRun: #TransferNetTest #test04PortfolioTransferNetForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 14:11:43'!
PASSED!

!testRun: #TransferNetTest #test05PortfolioTransferNetForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 14:11:43'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #TransferTest #test02HasRegisteredTransactionFromSourceToTarget stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #TransferTest #test03NavigateFromTransferSourceToTarget stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #TransferTest #test04NavigateFromTransferTargetToSource stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #TransferTest #test05CannotTransferToInexistentAccount stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #TransferTest #test06CannotTransferFromInexistentAccount stamp: 'NH 6/1/2023 14:11:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'NH 6/1/2023 14:11:48'!
PASSED!

!testRun: #PortfolioSummaryTest #test01PortfolioSummaryForEmptyPortfolio stamp: 'NH 6/1/2023 14:11:50'!
PASSED!

!testRun: #PortfolioSummaryTest #test02PortfolioSummaryForPortfolioWithOneLevel stamp: 'NH 6/1/2023 14:11:50'!
PASSED!

!testRun: #PortfolioSummaryTest #test03PortfolioSummaryForPortfolioWithMoreThanOneLevel stamp: 'NH 6/1/2023 14:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test01ReceptiveAccountSummaryForAnEmptyReceptiveAccount stamp: 'NH 6/1/2023 14:11:54'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountSummaryForAnReceptiveAccountWithOneTransaction stamp: 'NH 6/1/2023 14:11:54'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountSummaryForAnReceptiveAccountWithMoreTransactions stamp: 'NH 6/1/2023 14:11:54'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioAccountSummaryForAPortfolioWithOneAccount stamp: 'NH 6/1/2023 14:11:54'!
PASSED!

!testRun: #AccountSummaryTest #test05PortfolioAccountSummaryForAPortfolioWithMoreThanOneAccount stamp: 'NH 6/1/2023 14:11:54'!
PASSED!

----QUIT----(1 June 2023 14:12:04) CuisUniversity-5706.image priorSource: 8970994!