

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (5 May 2023 20:31:10) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/CuisUniversity-5706.image!


----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial.st----!

----STARTUP---- (7 May 2023 18:46:59) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/CuisUniversity-5706.image!


----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 18:49:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 18:49:21'!
PASSED!
!City class methodsFor: 'nil' stamp: 'NH 5/7/2023 18:58:03' overrides: 16785646!
new
	self new initialize! !

!methodRemoval: City class #new stamp: 'NH 5/7/2023 18:58:28'!
new
	self new initialize!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 18:58:31'!
PASSED!
!City methodsFor: 'nil' stamp: 'NH 5/7/2023 19:02:08' overrides: 16920235!
initialize
	! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:02:47' prior: 50604724 overrides: 16920235!
initialize
	zones := OrderedCollection new.
	
	services := OrderedCollection new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:02:51'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:04:00'!
initializeWith: aName
	zones := OrderedCollection new.
	name:= aName. 
	services := OrderedCollection new.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:04:15' prior: 50604832!
initializeWith: aName
	name := aName. 
	zones := OrderedCollection new.
	services := OrderedCollection new.! !
!City class methodsFor: 'nil' stamp: 'NH 5/7/2023 19:04:50'!
with:aName
	self new initializeWith: aName! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:04:53'!
PASSED!

!methodRemoval: City #initialize stamp: 'NH 5/7/2023 19:05:12'!
initialize
	zones := OrderedCollection new.
	
	services := OrderedCollection new.!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:05:58' prior: 50604388!
waterConsumption
	
	| index total |
	
	"zones ifNil: [zones := OrderedCollection new]."
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
ERROR!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:06:01'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:06:38' prior: 50604953!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:07:02' overrides: 16920235!
initialize

	zones := OrderedCollection new.
	services := OrderedCollection new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:07:05'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:10:41' prior: 50605071!
waterConsumption
	
	| index total |
	
	"zones ifNil: [zones := OrderedCollection new]."
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:10:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:10:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:10:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:10:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:10:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:10:44'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:13:35' prior: 50605194!
waterConsumption
	
	
	"zones ifNil: [zones := OrderedCollection new]."
	^zones inject: 0 into:[:total :zone |
		zone type = #Residential ifTrue: [ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [total + ((10 * wp) * zone getNumberOfCells) ].	
	]. 
"
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	]."

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:13:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:13:49'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:16:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:16:08'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:16:53'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:22:54' prior: 50605312!
waterConsumption
	
	
	"zones ifNil: [zones := OrderedCollection new]."
	^zones inject: 0 into:[:total :zone | total + self waterConsumptionIn: zone ].
	"
		zone type = #Residential ifTrue: [ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [  total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
	]." 
"
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	]."

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:23:05'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:23:08'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:23:33' prior: 50605548!
waterConsumption
	
	
	"zones ifNil: [zones := OrderedCollection new]."
	^zones inject: 0 into:[:total :zone | total + (self waterConsumptionIn: zone) ].
	"
		zone type = #Residential ifTrue: [ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [  total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
	]." 
"
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	]."

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:23:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:23:35'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:23:38'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:23:47'!
waterConsumptionIn: zone 
	self shouldBeImplemented.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:24:21' prior: 50605810!
waterConsumptionIn: zone 
	zone type = #Residential ifTrue: [ ^((9 * wp) * zone getNumberOfCells) ].	
	zone type = #Commertial ifTrue: [  ^((2 * wp) * zone getNumberOfCells) ].	
	zone type = #Industrial ifTrue: [ ^((10 * wp) * zone getNumberOfCells) ]! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:24:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:24:27'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:24:55' prior: 50605679!
waterConsumption
	
	
	"zones ifNil: [zones := OrderedCollection new]."
	^zones inject: 0 into:[:total :zone | total + (self waterConsumptionIn: zone) ].
	
"
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	]."

	! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:25:34' prior: 50604418!
zones

	"zones ifNil: [ zones := OrderedCollection new]."

	^ zones.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:25:40'!
PASSED!

!methodRemoval: City #initializeWith: stamp: 'NH 5/7/2023 19:25:51'!
initializeWith: aName
	name := aName. 
	zones := OrderedCollection new.
	services := OrderedCollection new.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:25:57'!
PASSED!

!methodRemoval: City class #with: stamp: 'NH 5/7/2023 19:26:03'!
with:aName
	self new initializeWith: aName!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:26:16' prior: 50604297!
addService: aService 

	"services ifNil: [ services := OrderedCollection new]."
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:26:31' prior: 50604303!
addZone: aZone

	"zones ifNil: [ zones := OrderedCollection new]."

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #Commertial ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:26:37'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:28:02' prior: 50604338!
energyConsumption
	
	^ zones inject: 0 into:[ : total :zone |
		total +  (self energyConsumptionIn: zone)	
	].
	"| index total |
	
	zones ifNil: [zones := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total."! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:28:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:28:09'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:28:16'!
energyConsumptionIn: zone 
	self shouldBeImplemented.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:29:25' prior: 50606422!
energyConsumptionIn: aZone 
	aZone type = #Residential ifTrue: [^((5 * ep) * aZone getNumberOfCells) ].	
	aZone type = #Commertial ifTrue: [^((8 * ep) * aZone getNumberOfCells) ].	
	aZone type = #Industrial ifTrue: [ ^((10 * ep) * aZone getNumberOfCells) ].	! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:29:33'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:29:38'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:29:58' prior: 50606298!
energyConsumption
	
	^ zones inject: 0 into:[ : total :zone |
		total +  (self energyConsumptionIn: zone)	
	].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:31:10' prior: 50606427!
energyConsumptionIn: aZone 
	^ aZone energyConsumption.
	
	"aZone type = #Residential ifTrue: [^((5 * ep) * aZone getNumberOfCells) ].	
	aZone type = #Commertial ifTrue: [^((8 * ep) * aZone getNumberOfCells) ].	
	aZone type = #Industrial ifTrue: [ ^((10 * ep) * aZone getNumberOfCells) ].	"! !

Zone subclass: #Residential
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: 'type numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 19:34:08'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 19:34:24'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 19:34:30'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Zone methodsFor: 'nil' stamp: 'NH 5/7/2023 19:35:42'!
energyConsumption
	self subclassResponsibility ! !
!Commertial methodsFor: 'nil' stamp: 'NH 5/7/2023 19:35:57' overrides: 50606605!
energyConsumption
	self subclassResponsibility ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:36:38' prior: 50606610 overrides: 50606605!
energyConsumption
	^ ((5 * ep) * self getNumberOfCells) ! !
!Industrial methodsFor: 'nil' stamp: 'NH 5/7/2023 19:38:01' overrides: 50606605!
energyConsumption
	^ ((5 * ep) * self getNumberOfCells) ! !
!Residential methodsFor: 'nil' stamp: 'NH 5/7/2023 19:38:04' overrides: 50606605!
energyConsumption
	^ ((5 * ep) * self getNumberOfCells) ! !
!Commertial methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:38:27' prior: 50606616 overrides: 50606605!
energyConsumption
	^ ((8 * ep) * self getNumberOfCells) ! !
!Industrial methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:38:40' prior: 50606621 overrides: 50606605!
energyConsumption
	^ ((10 * ep) * self getNumberOfCells) ! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:38:48' prior: 50606548!
energyConsumptionIn: aZone 
	^ aZone energyConsumption.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:38:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:38:55'!
ERROR!
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 19:40:25' prior: 50604485!
initializeWithType: aZoneType 

	type := aZoneType.
	(self type = #Residential) ifTrue: [
		Residential  new	
	]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:40:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:40:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:40:27'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:40:27'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:40:27'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:40:27'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:40:28'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 19:41:06' prior: 50606750!
initializeWithType: aZoneType 

	type := aZoneType.
	(self type = #Residential) ifTrue: [
		Residential  new	
	].
	(self type = #Commertial) ifTrue: [
			Commertial  new	
	].
	(self type = #Industrial) ifTrue: [
			Industrial  new	
		].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:41:10'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 19:42:37' prior: 50606855!
initializeWithType: aZoneType 

	type := aZoneType.
	(self type = #Residential) ifTrue: [
		Residential  new	
	].
	(self type = #Commertial) ifTrue: [
			Commertial  new	
	].
	(self type = #Industrial) ifTrue: [
			Industrial  new	
	].! !
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 19:42:41' prior: 50606964!
initializeWithType: aZoneType 

	type := aZoneType.
	(self type = #Residential) ifTrue: [
		Residential  new	
	].
	(self type = #Commertial) ifTrue: [
		Commertial  new	
	].
	(self type = #Industrial) ifTrue: [
		Industrial  new	
	].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:42:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:42:45'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:45:32' prior: 50603952!
commertialZone

	^Commertial new 
	 ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:45:33'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:45:33'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:45:43' prior: 50603956!
industrialZone

	^ Industrial new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:45:49' prior: 50603960!
residentialZone

	^ Residential new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:45:52'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:45:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:45:52'!
ERROR!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:45:57'!
ERROR!
!Zone methodsFor: 'nil' stamp: 'NH 5/7/2023 19:47:34'!
waterConsumption
	self subclassResponsibility ! !
!Residential methodsFor: 'nil' stamp: 'NH 5/7/2023 19:48:14'!
waterConsumptionIn 
	^((9 * wp) * self getNumberOfCells)
	! !
!Industrial methodsFor: 'nil' stamp: 'NH 5/7/2023 19:49:02' overrides: 50607301!
waterConsumption
	^((10 * wp) * self getNumberOfCells)
	! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:49:25' overrides: 50607301!
waterConsumption 
	^((9 * wp) * self getNumberOfCells)
	! !

!methodRemoval: Residential #waterConsumptionIn stamp: 'NH 5/7/2023 19:49:25'!
waterConsumptionIn 
	^((9 * wp) * self getNumberOfCells)
	!
!Commertial methodsFor: 'nil' stamp: 'NH 5/7/2023 19:49:42' overrides: 50607301!
waterConsumption 
	^((2 * wp) * self getNumberOfCells)
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:49:44'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:49:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:49:44'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:50:05' prior: 50605929!
waterConsumption
	
	
	"zones ifNil: [zones := OrderedCollection new]."
	^zones inject: 0 into:[:total :zone | total + (zone waterConsumption) ].
	
"
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	]."

	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
FAILURE!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
FAILURE!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:50:07'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:50:07'!
PASSED!

!methodRemoval: City #waterConsumptionIn: stamp: 'NH 5/7/2023 19:50:23'!
waterConsumptionIn: zone 
	zone type = #Residential ifTrue: [ ^((9 * wp) * zone getNumberOfCells) ].	
	zone type = #Commertial ifTrue: [  ^((2 * wp) * zone getNumberOfCells) ].	
	zone type = #Industrial ifTrue: [ ^((10 * wp) * zone getNumberOfCells) ]!

!methodRemoval: City #energyConsumptionIn: stamp: 'NH 5/7/2023 19:50:28'!
energyConsumptionIn: aZone 
	^ aZone energyConsumption.
	!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:50:37' prior: 50606541!
energyConsumption
	
	^ zones inject: 0 into:[ : total :zone |
		total +  (zone energyConsumption)	
	].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:52:19' prior: 50606169!
addZone: aZone

	"zones ifNil: [ zones := OrderedCollection new]."

	(aZone isKindOf: Residential) ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	(aZone isKindOf: Commertial) ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	(aZone isKindOf: Industrial) ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:52:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:52:31'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:53:51'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:53:55'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:55:35'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:56:45'!
PASSED!
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 19:57:12' prior: 50606975!
initializeWithType: aZoneType 

	type := aZoneType.
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 19:57:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 19:58:13'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 19:59:59' prior: 50604369!
hasResidentialZones
	^zones includes: Residential. 
	"
	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false."
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:00:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:00:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:00:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:00:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:00:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:00:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:00:02'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:05:34' prior: 50608108!
hasResidentialZones
	zones do:[:zone | (zone isKindOf: Residential) ifTrue:[^true] ]
	^false
	"
	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false."
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:05:37'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:05:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:06:00'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:06:08' prior: 50608218!
hasResidentialZones
	zones do:[:zone | (zone isKindOf: Residential) ifTrue:[^true] ].
	^false
	"
	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false."
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:06:10'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:08:15' prior: 50607569!
addZone: aZone

	aZone satisfiesRequierementOf: self. 

	(aZone isKindOf: Residential) ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	(aZone isKindOf: Commertial) ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	(aZone isKindOf: Industrial) ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!Zone methodsFor: 'nil' stamp: 'NH 5/7/2023 20:08:41'!
satisfiesRequierementOf: aCity
	self subclassResponsibility ! !
!Commertial methodsFor: 'nil' stamp: 'NH 5/7/2023 20:10:51' overrides: 50608474!
satisfiesRequierementOf: aCity 
	aCity verifyCommertialRequierementIn: self! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:12:04'!
 verifyCommertialRequierementIn: aZone
	self energyAvailable < (5 * ep) ifTrue: [ self error: self cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: self cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:12:12' prior: 50608484!
verifyCommertialRequierementIn: aZone
	self energyAvailable < (5 * ep) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:12:52'!
verifyResidentialRequierementIn: aZone
	self energyAvailable < (5 * ep) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:13:23' prior: 50608494!
verifyCommertialRequierementIn: aZone
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:13:48'!
verifyIndustrialRequierementIn: aZone

		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	! !
!Industrial methodsFor: 'nil' stamp: 'NH 5/7/2023 20:14:51' overrides: 50608474!
satisfiesRequierementOf: aCity 
	aCity verifyIndustrialRequierementIn: self! !
!Residential methodsFor: 'nil' stamp: 'NH 5/7/2023 20:15:04' overrides: 50608474!
satisfiesRequierementOf: aCity 
	aCity verifyResidentialRequierementIn: self! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:15:09'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:15:26' prior: 50608444!
addZone: aZone

	aZone satisfiesRequierementOf: self. 

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:15:49' prior: 50608333!
hasResidentialZones
	zones do:[:zone | (zone isKindOf: Residential) ifTrue:[^true] ].
	^false
	
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:16:02' prior: 50608515!
verifyCommertialRequierementIn: aZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].

! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:16:19' prior: 50607428!
waterConsumption
	
	
	^zones inject: 0 into:[:total :zone | total + (zone waterConsumption) ].
	

	! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:16:28' prior: 50605950!
zones

	^ zones.
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:42:19' prior: 50608654!
hasResidentialZones
	^ zones anySatisfy: [:zone | zone isKindOf: Residential].
	"zones do:[:zone | (zone isKindOf: Residential) ifTrue:[^true] ].
	^false"
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:42:24'!
PASSED!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 20:45:28'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:45:35' prior: 50603964!
solarPlant

	^ SolarPlant new ! !

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 20:45:48'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:45:50' prior: 50604260!
waterTower

	^ WaterTower new! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:47:57' prior: 50604356!
energyProduced
	^ services inject: 0 into: [:totalEnergy :service | totalEnergy + service energyProduction].
	"
	| index total |
	
	services ifNil: [services := OrderedCollection new].
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total."! !
!Service methodsFor: 'nil' stamp: 'NH 5/7/2023 20:48:11'!
energyProduction
	self subclassResponsibility ! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:48:30' prior: 50608822!
energyProduced
	^ services inject: (0 *ep )into: [:totalEnergy :service | totalEnergy + service energyProduction].
	"
	| index total |
	
	services ifNil: [services := OrderedCollection new].
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total."! !
!SolarPlant methodsFor: 'nil' stamp: 'NH 5/7/2023 20:48:42' overrides: 50608837!
energyProduction
	(500 * ep)! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:48:45' prior: 50608858 overrides: 50608837!
energyProduction
	^(500 * ep)! !
!WaterTower methodsFor: 'nil' stamp: 'NH 5/7/2023 20:48:56' overrides: 50608837!
energyProduction! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:49:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:49:01'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:49:01'!
ERROR!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:49:23' prior: 50608867 overrides: 50608837!
energyProduction
	! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:49:29' prior: 50608863 overrides: 50608837!
energyProduction
	(500 * ep)! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:49:48'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:49:48'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:49:48'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:48'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:49:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:49:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:49:49'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:49:49'!
ERROR!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:49:58' prior: 50608970 overrides: 50608837!
energyProduction
	0 * ep! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:50:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:50:00'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:50:00'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:50:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:50:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:50:01'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:50:01'!
ERROR!
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:50:08' prior: 50608975 overrides: 50608837!
energyProduction
	^(500 * ep)! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:50:15' prior: 50609078 overrides: 50608837!
energyProduction
	^(0 * ep)! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:50:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:50:17'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:50:17'!
ERROR!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:50:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:50:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:50:25'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:50:25'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:50:25'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
FAILURE!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:50:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:50:26'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:50:26'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:50:28'!
ERROR!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:52:49' prior: 50604406!
waterProduced
	| index total |
	
	services ifNil: [services := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		(service isKindOf: WaterTower ) ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:52:55'!
PASSED!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:53:07' prior: 50609186 overrides: 50608837!
energyProduction
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:53:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:53:09'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:53:09'!
ERROR!
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:53:15' prior: 50609503 overrides: 50608837!
energyProduction
	^(0 * ep)! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:53:28' prior: 50608842!
energyProduced
	^ services inject: (0 *ep )into: [:totalEnergy :service | totalEnergy + service energyProduction].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:53:33' prior: 50608683!
hasResidentialZones
	^ zones anySatisfy: [:zone | zone isKindOf: Residential].
	
	
! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:54:55' prior: 50609391!
waterProduced
	
	^ services inject: (0 *wp)into: [:totalWater :service | totalWater+ service waterProduction].
	"| index total |
	
	services ifNil: [services := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		(service isKindOf: WaterTower ) ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total."! !
!Service methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:55:03'!
waterProduction
	self subclassResponsibility ! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:55:15' overrides: 50609639!
waterProduction
	^(0 * ep)! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:55:28' overrides: 50609639!
waterProduction
	^(200 * wp)! !
!SolarPlant methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:55:33' prior: 50609644 overrides: 50609639!
waterProduction
	^(0 * wp)! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 20:55:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 20:55:38'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 20:55:38'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 20:55:38'!
PASSED!
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:55:43' prior: 50609623!
waterProduced
	
	^ services inject: (0 *wp)into: [:totalWater :service | totalWater+ service waterProduction].
	! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:56:52' prior: 50606162!
addService: aService 

	
	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 20:56:53' prior: 50609763!
addService: aService 

	services add: aService.! !
!City methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:00:03' prior: 50608660!
verifyCommertialRequierementIn: aZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:00:04'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:00:05'!
PASSED!

!methodRemoval: Zone #type stamp: 'NH 5/7/2023 21:03:44'!
type
	
	^ type!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:03:55'!
PASSED!

!methodRemoval: Zone #initializeWithType: stamp: 'NH 5/7/2023 21:04:09'!
initializeWithType: aZoneType 

	type := aZoneType.
	!

!methodRemoval: Zone class #withType: stamp: 'NH 5/7/2023 21:04:27'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:04:32'!
PASSED!
!Zone methodsFor: 'accessing' stamp: 'NH 5/7/2023 21:05:25' prior: 50604489!
getNumberOfCells

	
	^ numberOfCells! !
!Zone methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:05:36' overrides: 16920235!
initialize 
	numberOfCells := 1! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:05:41'!
PASSED!

!methodRemoval: Service #initializeWithType: stamp: 'NH 5/7/2023 21:06:07'!
initializeWithType: aServiceType 

	type _ aServiceType.!

!methodRemoval: Service class #withType: stamp: 'NH 5/7/2023 21:06:13'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:06:16'!
PASSED!

!methodRemoval: Service #type stamp: 'NH 5/7/2023 21:07:10'!
type
	
	^type!

Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:07:18'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: 'energyQuantity waterQuantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:07:52'!
Service subclass: #SolarPlant
	instanceVariableNames: 'energyQuantity waterQuantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:08:12'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

TestCase subclass: #CityTest
	instanceVariableNames: 'city1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:11:04'!
TestCase subclass: #CityTest
	instanceVariableNames: 'city1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'nil' stamp: 'NH 5/7/2023 21:11:18'!
SetUp
	city1 := City new! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:11:49' prior: 50610358!
SetUp
	! !

TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:11:56'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:12:40' prior: 50603968!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city1 |

	city1 := City new.
	self assert: 0 * ep equals: city1 energyProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:13:19' prior: 50610377!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	 

	city1 := City new.
	self assert: 0 * ep equals: city1 energyProduced.! !

!classDefinition: #CityTest category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:13:19'!
TestCase subclass: #CityTest
	instanceVariableNames: 'city1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:13:32' prior: 50610385!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	 

	self assert: 0 * ep equals: city1 energyProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:13:35' prior: 50610362!
SetUp
	city1 := City new.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:13:59' prior: 50603975!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	
	city1 addService: self solarPlant.
	
	self assert: 500 * ep equals: city1 energyAvailable.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:14:01'!
ERROR!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:14:01'!
ERROR!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:14:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:14:02'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:14:23'!
ERROR!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:14:55' overrides: 16961394!
setUp
	city1 := City new.! !

!methodRemoval: CityTest #SetUp stamp: 'NH 5/7/2023 21:14:55'!
SetUp
	city1 := City new.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:14:59'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:15:29' prior: 50603984!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	
	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city1 energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:15:44' prior: 50603995!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	
	city1 addService: self solarPlant.
	city1 addService: self waterTower.
	
	city1 addZone: self residentialZone.
	city1 addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city1 energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:15:55' prior: 50604007!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	
	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city1 energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:16:09' prior: 50604018!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	
	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self residentialZone.
	city1 addZone: self commertialZone.
	city1 addZone: self industrialZone.	
	city1 addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city1 energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:16:23' prior: 50604033!
test07CityWithoutWaterServicesHaveZeroWaterProduced

	
	self assert: 0 * wp equals: city1 waterProduced.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:16:30' prior: 50604040!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	
	city1 addService: self waterTower.
	
	self assert: 200 * wp equals: city1 waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:16:40' prior: 50604049!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city1 waterAvailable.! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:16:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:16:43'!
PASSED!
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:19:48' prior: 50604247!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| zone |

	city1 addService: self solarPlant.
	city1 addService: self waterTower.
	
	zone := self industrialZone.
	zone setNumberOfCells: 2.
	city1 addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city1 waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:20:05' prior: 50604232!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	
	| zone |
	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self residentialZone.
	
	zone := self commertialZone.
	zone setNumberOfCells: 2.
	city1 addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city1 waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:20:20' prior: 50604219!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	|  zone |

	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	zone := self residentialZone.
	zone setNumberOfCells: 2.
	city1 addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city1 waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:20:38' prior: 50604206!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| zone |

	
	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	zone := self industrialZone.
	zone setNumberOfCells: 2.
	city1 addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city1 energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:21:18' prior: 50604060!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	


	city1 addService: self solarPlant.
	city1 addService: self waterTower.

	city1 addZone: self residentialZone.
	city1 addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city1 waterAvailable.! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:26:03'!
hasEnergy

	^ self energyAvailable < (5 * ep)! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:26:03' prior: 50608504!
verifyResidentialRequierementIn: aZone
	self hasEnergy ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
! !

!methodRemoval: City #hasEnergy stamp: 'NH 5/7/2023 21:27:40'!
hasEnergy

	^ self energyAvailable < (5 * ep)!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:27:40' prior: 50610872!
verifyResidentialRequierementIn: aZone
	( self energyAvailable < (5 * ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (9 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
! !

Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:29:03'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Residential
	instanceVariableNames: 'waterPorints EnergyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:29:38'!
Zone subclass: #Residential
	instanceVariableNames: 'waterPorints EnergyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Residential methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:30:09'!
energyPoints

	^ 5 * ep! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:30:09' prior: 50606626 overrides: 50606605!
energyConsumption
	^ ((self energyPoints) * self getNumberOfCells) ! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:30:39'!
waterPoints

	^ 9 * wp! !
!Residential methodsFor: 'as yet unclassified' stamp: 'NH 5/7/2023 21:30:39' prior: 50607315 overrides: 50607301!
waterConsumption 
	^((self waterPoints) * self getNumberOfCells)
	! !
!Residential methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:31:13' overrides: 50610097!
initialize
	! !

Zone subclass: #Residential
	instanceVariableNames: 'waterPorints energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'NH 5/7/2023 21:31:21'!
Zone subclass: #Residential
	instanceVariableNames: 'waterPorints energyPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Residential methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:31:45' prior: 50610942 overrides: 50610097!
initialize
	waterPorints := 0.
	energyPoints := 0! !
!Residential methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:32:01' prior: 50610960 overrides: 50610097!
initialize
	waterPorints := 0.
	energyPoints := 5 * ep! !
!Residential methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:32:15' prior: 50610966 overrides: 50610097!
initialize
	waterPorints := 9 * wp.
	energyPoints := 5 * ep! !
!Residential methodsFor: 'accessing' stamp: 'NH 5/7/2023 21:32:22' prior: 50610921!
energyPoints

	^ energyPoints ! !
!Residential methodsFor: 'accessing' stamp: 'NH 5/7/2023 21:32:27' prior: 50610931!
waterPoints

	^ waterPorints ! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:39:53'!
hasLessEnergyThan: anEnergyPoint
	self energyAvailable < anEnergyPoint! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:40:40' prior: 50609773!
verifyCommertialRequierementIn: aZone
	(self hasLessEnergyThan: (2 * ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:40:42'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:40:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:40:52'!
ERROR!
!Residential methodsFor: 'initialization' stamp: 'NH 5/7/2023 21:41:41' prior: 50610972 overrides: 50610097!
initialize
	waterPorints := (9 * wp).
	energyPoints := (5 * ep)! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:41:43'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:41:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:41:52'!
ERROR!

self energyPoints!

energyPoints * self getNumberOfCells!

!methodRemoval: Residential #initialize stamp: 'NH 5/7/2023 21:44:45'!
initialize
	waterPorints := (9 * wp).
	energyPoints := (5 * ep)!
!Residential methodsFor: 'accessing' stamp: 'NH 5/7/2023 21:45:06' prior: 50610926 overrides: 50606605!
energyConsumption
	^ ((5 * ep )* self getNumberOfCells) ! !
!Residential methodsFor: 'accessing' stamp: 'NH 5/7/2023 21:45:35' prior: 50610936 overrides: 50607301!
waterConsumption 
	^((9 * wp) * self getNumberOfCells)
	! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
FAILURE!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:45:36'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:45:36'!
PASSED!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:46:18' prior: 50610989!
verifyCommertialRequierementIn: aZone
	(self energyAvailable  < (2*wp)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:46:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:46:20'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:46:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:46:23'!
ERROR!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:46:38' prior: 50611329!
verifyCommertialRequierementIn: aZone
	(self energyAvailable  < (2*ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:46:40'!
PASSED!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:46:49' prior: 50610984!
hasLessEnergyThan: anEnergyPoint
	^self energyAvailable < anEnergyPoint! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:46:59' prior: 50611445!
verifyCommertialRequierementIn: aZone
	(self hasLessEnergyThan: (2*ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self waterAvailable < (8 * wp) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:47:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:47:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:47:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:47:01'!
PASSED!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:47:43'!
hasLessWaterThan

	^ self waterAvailable < (8 * wp)! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:47:43' prior: 50611562!
verifyCommertialRequierementIn: aZone
	(self hasLessEnergyThan: (2*ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	self hasLessWaterThan ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:47:53' prior: 50611679!
verifyCommertialRequierementIn: aZone
	(self hasLessEnergyThan: (2*ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	(self hasLessWaterThan) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:48:07'!
hasLessWaterThan: aWaterPoint

	^ self waterAvailable < aWaterPoint! !

!methodRemoval: City #hasLessWaterThan stamp: 'NH 5/7/2023 21:48:10'!
hasLessWaterThan

	^ self waterAvailable < (8 * wp)!
!City methodsFor: 'private' stamp: 'NH 5/7/2023 21:48:24' prior: 50611692!
verifyCommertialRequierementIn: aZone
	(self hasLessEnergyThan: (2*ep)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	(self hasLessWaterThan:(8*wp)) ifTrue: [ self error: self class cannotAddZoneErrorDescription ].
	
	self hasResidentialZones ifFalse: [ self error: self class cannotAddCommertialZoneErrorDescription ].

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:48:27'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'NH 5/7/2023 21:48:29'!
PASSED!

----STARTUP---- (7 May 2023 22:04:50) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/CuisUniversity-5706.image!


----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial-Solution.st----!

----STARTUP---- (13 May 2023 11:35:42) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/practicas/CuisUniversity-5706.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 11:37:26'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 11:37:37'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRoverTest methodsFor: 'nil' stamp: 'NH 5/13/2023 11:48:05'!
test01MarsRoverCreatedCorrectly

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	
	self assert: 0@0 equals:  aMarsRover currentPosition. 
	self assert: #North equals: aMarsRover currentDirection.! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:48:09'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'NH 5/13/2023 11:48:26'!
landsAt: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeLandsAt: aPoint facing: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'NH 5/13/2023 11:49:32' prior: 50603976!
landsAt: aPointInAMap facing: aDirection 

	^self new initializeLandsAt: aPointInAMap facing: aDirection ! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:49:34'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 11:49:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'pointInAMap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 11:49:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'pointInAMap direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'initialization' stamp: 'NH 5/13/2023 11:49:52'!
initializeLandsAt: aPointInAMap facing: aDirection 
	self shouldBeImplemented.
	pointInAMap := aPointInAMap.
	direction := aDirection.! !

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 11:50:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'pointInAMap direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'initialization' stamp: 'NH 5/13/2023 11:50:46' prior: 50604010!
initializeLandsAt: aPointInAMap facing: aDirection 
	
	position := aPointInAMap.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:50:53'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:51:09'!
currentPosition
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:51:16' prior: 50604035!
currentPosition
	^ 0@0! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:51:19'!
ERROR!
!MarsRover methodsFor: 'category-name' stamp: 'NH 5/13/2023 11:51:25'!
currentDirection
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'category-name' stamp: 'NH 5/13/2023 11:51:57' prior: 50604047!
currentDirection
	^ #North! !
!MarsRover methodsFor: 'category-name' stamp: 'NH 5/13/2023 11:52:01' prior: 50604052!
currentDirection
	^#North! !
!MarsRover class methodsFor: 'instance creation' stamp: 'NH 5/13/2023 11:52:22' prior: 50603985!
landsAt: aPosition facing: aDirection 

	^self new initializeLandsAt: aPosition facing: aDirection ! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:52:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:52:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:54:03'!
assertMarsRoversIsAt: aMarsRover

	self assert: 0@0 equals:  aMarsRover currentPosition. 
	self assert: #North equals: aMarsRover currentDirection! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:54:03' prior: 50603963!
test01MarsRoverCreatedCorrectly

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	
	self assertMarsRoversIsAt: aMarsRover.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:55:05'!
assertMarsRover: aMarsRover IsAt: aPosition facing: aDirection

	self assert: aPosition equals:  aMarsRover currentPosition. 
	self assert: aDirection equals: aMarsRover currentDirection! !

!methodRemoval: MarsRoverTest #assertMarsRoversIsAt: stamp: 'NH 5/13/2023 11:55:09'!
assertMarsRoversIsAt: aMarsRover

	self assert: 0@0 equals:  aMarsRover currentPosition. 
	self assert: #North equals: aMarsRover currentDirection!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 11:55:37' prior: 50604080!
test01MarsRoverCreatedCorrectly

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:55:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 11:55:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:06:39' prior: 50604105!
test01MarsRoverCreatedCorrectly

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:06:45'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:06:52'!
readCommands: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:06:55' prior: 50604132!
readCommands: aRenameMe1 
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:07:02'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:07:02'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:09:44'!
test02MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:09:47'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:10:44' prior: 50604137!
readCommands: aCommand 
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:11:02' prior: 50604040!
currentPosition
	^ position! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:11:04'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:11:04'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:11:04'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:11:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:11:34'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:11:34'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:11:50' prior: 50604160!
readCommands: aCommand 
	position := 0@1! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:11:52' prior: 50604188!
readCommands: aCommand 
	position := 0@1.! !

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:11:58'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:12:01'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:12:01'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:12:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:12:43' prior: 50604193!
readCommands: aCommand 
	aCommand ifNotEmpty: [position := 0@1.]. 
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:12:44'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:12:44'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:13:53'!
test03MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:13:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:15:06' prior: 50604211!
readCommands: aCommand 
	aCommand ifEmpty:[].
	aCommand='f' ifTrue: [position := 0@1.]. 
	position := 0@-1
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:15:11'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:15:11'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:15:11'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:15:19'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:15:32' prior: 50604236!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [position := 0@1.]. 
	position := 0@-1
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:15:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:15:33'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:15:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:15:33'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:15:48' prior: 50604256!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [^position := 0@1.]. 
	position := 0@-1
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:15:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:15:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:15:49'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:16:15' prior: 50604223!
test03MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:17:16'!
test03MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:17:28'!
test01MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverCreatedCorrectly stamp: 'NH 5/13/2023 12:17:28'!
test01MarsRoverCreatedCorrectly

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:17:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:18:04' prior: 50604056!
currentDirection
	^direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:18:35' prior: 50604276!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [^position := 0@1.]. 
	aCommand='l' ifTrue: [^direction=#West].
	position := 0@-1
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:18:38'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:18:38'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:18:38'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:18:38'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:18:53' prior: 50604293!
test03MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:18:54'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:18:54'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:18:54'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:18:54'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:18:54'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:18:54'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:19:41' prior: 50604338!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [position := 0@1.]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction=#West].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:19:41'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:19:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:19:42'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:19:42'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:19:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:20:07' prior: 50604390!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [position := 0@1.]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:20:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:20:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:20:08'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:20:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:20:08'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:20:17'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:20:17'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:20:17'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:20:17'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:20:17'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 12:20:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:21:26' prior: 50604360!
test03MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:21:38'!
test04MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!methodRemoval: MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:21:38'!
test03MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:21:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:21:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:21:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:21:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:21:44'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:22:04'!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:22:12' prior: 50604518!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:22:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:22:36' prior: 50604416!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [position := 0@1.]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:22:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:22:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:22:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:22:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:22:40'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:22:40'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:22:55'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:22:55'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:22:55'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:22:55'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:22:55'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:22:55'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:23:06' prior: 50604528!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:23:08'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:23:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:23:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:23:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:23:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:23:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:26:16'!
test05MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:26:16'!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:30:46' prior: 50604147!
test02MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:30:48'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:31:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:31:10'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:31:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:31:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:31:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:31:10'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:32:14' prior: 50604541!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = 0@0 ifTrue:[position := 0@1].
		position = 0@1 ifTrue:[position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:32:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:32:16'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:32:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:32:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:32:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:32:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:32:36' prior: 50604674!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		(position = 0@0) ifTrue:[position := 0@1].
		(position = 0@1) ifTrue:[position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:32:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:32:36'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:32:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:32:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:32:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:32:36'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:32:49' prior: 50604707!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[position := 0@1].
		position = (0@1) ifTrue:[position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:32:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:32:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:32:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:32:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:32:50'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:35:17' prior: 50604740!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		"position = (0@0) ifTrue:[position := 0@1]."
		position = (0@1) ifTrue:[position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:35:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:35:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:35:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:35:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:35:18'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:36:04'!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:36:37' prior: 50604311!
test01MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:36:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:36:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:37:15'!
test01MarsRoverCreatedCorrectlyAt01FacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:37:15'!
test01MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:37:47' prior: 50604770!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[position := 0@1].
		position = (0@1) ifTrue:[position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:38:30'!
test01MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverCreatedCorrectlyAt01FacingNorth stamp: 'NH 5/13/2023 12:38:30'!
test01MarsRoverCreatedCorrectlyAt01FacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:39:11'!
test01MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:39:11'!
test02MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:39:23' prior: 50604895!
test01MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:39:30'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:39:30'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:39:40'!
test02MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !

!methodRemoval: MarsRoverTest #test03MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:39:40'!
test03MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:39:48'!
test03MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!methodRemoval: MarsRoverTest #test04MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:39:48'!
test04MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:39:56'!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test05MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:39:56'!
test05MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:40:02'!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:02'!
test01MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:40:13' prior: 50604987!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:15'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:40:31' prior: 50605008!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:32'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:40:40'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:41:21'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:41:23'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:41:23'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:41:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:41:30'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:41:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:41:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:42:10'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:42:10'!
FAILURE!

aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:43:08' prior: 50604863!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2]
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:43:08'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:43:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:43:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:43:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:43:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:43:08'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:43:35' prior: 50605122!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		]. 
	aCommand='b' ifTrue: [position := 0@-1].
	aCommand='l' ifTrue: [direction:=#West].
	aCommand='r' ifTrue: [direction:=#East].
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:43:42' prior: 50605156!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:43:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:43:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:43:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:43:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:43:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:43:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:49:44'!
test05MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: #North! !

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:49:45'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:50:07' prior: 50605169!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		position = (3@3) ifTrue:[^position := 3@4].
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:50:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:50:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:50:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:50:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:50:11'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:50:11'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:50:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:53:51'!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:53:55' prior: 50605255!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@8 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:54:07'!
test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: #North! !

!methodRemoval: MarsRoverTest #test05MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:07'!
test05MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: #North!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:18'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:54:52' prior: 50605216!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		position = (3@3) ifTrue:[^position := 3@4].
		position = (4@7) ifTrue:[^position := 4@8].
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:54:54'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:55:38' prior: 50605330!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + 0@1."
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		position = (3@3) ifTrue:[^position := 3@4].
		position = (4@7) ifTrue:[^position := 4@8]."
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:55:49' prior: 50605375!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1)."
		position = (0@0) ifTrue:[^position := 0@1].
		position = (0@1) ifTrue:[^position := 0@2].
		position = (3@3) ifTrue:[^position := 3@4].
		position = (4@7) ifTrue:[^position := 4@8]."
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 12:55:50'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:56:05' prior: 50605392!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='b' ifTrue: [^position := 0@-1].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:56:49'!
test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 12:56:50'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:00:27'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:01:26' prior: 50605438!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='b' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@-1].
		position = (0@1) ifTrue:[^position := 0@0].
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:02:01'!
test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 3@2 facing: #North! !

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:02'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:02:20' prior: 50605468!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='b' ifTrue: [
		position = (0@0) ifTrue:[^position := 0@-1].
		position = (0@1) ifTrue:[^position := 0@0].
		position = (3@3) ifTrue:[^position := 3@2].
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:21'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:02:55' prior: 50605496!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='b' ifTrue: [
		position := position  + (0@-1).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:02:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:16:01'!
test01MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:16:03'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:16:38' prior: 50605548!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='ff' ifTrue: [
		position := position + (0@2).
		]. 
	aCommand='b' ifTrue: [
		position := position  + (0@-1).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:16:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:17:26'!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:17:26'!
test01MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:18:56'!
test11MarsRoverMovesFowardThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'fff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@3 facing: #North! !

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:18:58'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:19:07' prior: 50605609!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand='f' ifTrue: [
		position := position + (0@1).
		]. 
	aCommand='ff' ifTrue: [
		position := position + (0@2).
		]. 
	aCommand='fff' ifTrue: [
		position := position + (0@3).
		]. 
	aCommand='b' ifTrue: [
		position := position  + (0@-1).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:19:33'!
PASSED!

'fff' includesSubString: 'f'!

'fff' includesSubString: 'f'!

'fff' includesSubString: 'ffff'!

'fbf' includesSubString: 'f'!

'fbf' includes: 'f'!

'fff' includes: 'f'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:23:31' prior: 50605695!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
	].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:23:33'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:24:04' prior: 50605760!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
	].
	aCommand='b' ifTrue: [
			position := position  + (0@-1).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:24:11'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:24:15' prior: 50605817!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	aCommand='b' ifTrue: [
			position := position  + (0@-1).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:29:14'!
test12MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:29:25' prior: 50605889!
test12MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: #North! !

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:29:26'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:29:50'!
test12MarsRoverMovesBackwardsTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: #North! !

!methodRemoval: MarsRoverTest #test12MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:29:53'!
test12MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:30:10'!
test13MarsRoverMovesBackwardsThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: #North! !

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:30:15'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:30:19'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:30:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:30:42' prior: 50605875!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	aCommand='b' ifTrue: [
			position := position  + (0@-1).
		].
	aCommand='bb' ifTrue: [
			position := position  + (0@-2).
		].
	aCommand='bbb' ifTrue: [
			position := position  + (0@-3).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:30:42'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:30:43'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:31:30' prior: 50605952!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:31:31'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:32:03'!
test04MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:32:23' prior: 50606091!
test04MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:32:38'!
test14MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test04MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:32:38'!
test04MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:32:52'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:32:52'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:33:07' prior: 50606022!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:12'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:12'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:12'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:33:24' prior: 50606138!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:26'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:26'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:26'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:33:46' prior: 50606111!
test14MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:47'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:33:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:33:48'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:33:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:34:07'!
test14MarsRoverRotatesLeftThreeTimesFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftThreeTimesFacingWest stamp: 'NH 5/13/2023 13:34:08'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:34:30' prior: 50606215!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftThreeTimesFacingWest stamp: 'NH 5/13/2023 13:34:45'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:34:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:37:27'!
test15MarsRoverRotatesLeftThreeTimesFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test14MarsRoverRotatesLeftThreeTimesFacingWest stamp: 'NH 5/13/2023 13:37:27'!
test14MarsRoverRotatesLeftThreeTimesFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:38:06'!
test16MarsRoverRotatesRightTwiceFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:38:24'!
test17MarsRoverRotatesRightThreeTimesFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimesFacingEast stamp: 'NH 5/13/2023 13:38:25'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:39:09'!
test14MarsRoverRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !

!methodRemoval: MarsRoverTest #test14MarsRoverRotatesLeftTwiceFacingWest stamp: 'NH 5/13/2023 13:39:09'!
test14MarsRoverRotatesLeftTwiceFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:39:20'!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test15MarsRoverRotatesLeftThreeTimesFacingWest stamp: 'NH 5/13/2023 13:39:20'!
test15MarsRoverRotatesLeftThreeTimesFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:39:25'!
test16MarsRoverRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !

!methodRemoval: MarsRoverTest #test16MarsRoverRotatesRightTwiceFacingEast stamp: 'NH 5/13/2023 13:39:25'!
test16MarsRoverRotatesRightTwiceFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:39:37'!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!methodRemoval: MarsRoverTest #test17MarsRoverRotatesRightThreeTimesFacingEast stamp: 'NH 5/13/2023 13:39:37'!
test17MarsRoverRotatesRightThreeTimesFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:40:00'!
test01MarsRoverMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!methodRemoval: MarsRoverTest #test01MarsRoverMovesFowardFacingNorth stamp: 'NH 5/13/2023 13:40:00'!
test01MarsRoverMovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:40:05'!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !

!methodRemoval: MarsRoverTest #test02MarsRoverMovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:40:05'!
test02MarsRoverMovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:40:09'!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!methodRemoval: MarsRoverTest #test03MarsRoverRotatesLeftFacingWest stamp: 'NH 5/13/2023 13:40:09'!
test03MarsRoverRotatesLeftFacingWest

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:40:12'!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test04MarsRoverRotatesRightFacingEast stamp: 'NH 5/13/2023 13:40:12'!
test04MarsRoverRotatesRightFacingEast

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:40:32'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:40:32'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:40:59' prior: 50606373!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rr' ifTrue: [^direction:=#West].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 13:41:00'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:41:00'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:41:00'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:41:06' prior: 50606653!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rrr' ifTrue: [^direction:=#West].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 13:41:06'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:41:06'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 13:45:18'!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West! !

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 13:45:25'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:55:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 13:55:18'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 13:55:18'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:58:54' prior: 50606742!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@1).
		].
	].
	
	
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rrr' ifTrue: [^direction:=#West].
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:59:08' prior: 50606910!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
	].
	
	
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rrr' ifTrue: [^direction:=#West].
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 13:59:16' prior: 50606941!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
	].
	(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rrr' ifTrue: [^direction:=#West].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 13:59:16'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 13:59:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 13:59:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 13:59:17'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 13:59:17'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:00:04'!
test18MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: #West! !

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:00:08'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:00:57' prior: 50606972!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
	].
	
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	aCommand='r' ifTrue: [^direction:=#East].
	aCommand='rr' ifTrue: [^direction:=#South].
	aCommand='rrr' ifTrue: [^direction:=#West].
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:00:58'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:00:58'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:01:16'!
test19MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West! !

!methodRemoval: MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:01:16'!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West!
!MarsRoverTest methodsFor: 'nil' stamp: 'NH 5/13/2023 14:01:49'!
test20MarsRoverFacingWestRotateRightOnce! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:05:39' prior: 50607207!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:05:53'!
test20MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:06:03'!
test20MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:06:16'!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test20MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:06:16'!
test20MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:06:22'!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!methodRemoval: MarsRoverTest #test20MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:06:22'!
test20MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:07:51' prior: 50607083!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#North].
	].
	
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:07:53'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:07:53'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:07:53'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:08:07'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:08:07'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:08:07'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:08:14' prior: 50607240!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:08:17' prior: 50607259!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:08:23'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:08:23'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:08:23'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:09:09' prior: 50607279!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
	].
	
	aCommand='l' ifTrue: [^direction:=#West].
	aCommand='ll' ifTrue: [^direction:=#South].
	aCommand='lll' ifTrue: [^direction:=#East].
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:09:10'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:09:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:09:39'!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'left'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:09:57'!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:10:01' prior: 50607702!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:10:12'!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:10:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:11:11' prior: 50607582!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:11:12'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:11:12'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 14:14:18'!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West! !

!methodRemoval: MarsRoverTest #test19MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:14:18'!
test19MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West!
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 14:14:23'!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: #West! !

!methodRemoval: MarsRoverTest #test18MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:14:23'!
test18MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: #West!
!MarsRoverTest methodsFor: 'nil' stamp: 'NH 5/13/2023 14:15:42'!
test26MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: #South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:16:10'!
test26MarsRoverFacingSouthMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:16:18'!
test27MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: #South.! !

!methodRemoval: MarsRoverTest #test26MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:16:18'!
test26MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: #South.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:17:49'!
test27MarsRoverFacingSouthRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:18:05'!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!methodRemoval: MarsRoverTest #test27MarsRoverFacingSouthRotatesRight stamp: 'NH 5/13/2023 14:18:05'!
test27MarsRoverFacingSouthRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:18:19'!
test29MarsRoverFacingSouthRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:19:18'!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:19:27' prior: 50607994!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:20:03'!
test31MarsRoverFacingSouthRotatesLefttOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:20:20'!
test32MarsRoverFacingSouthRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:20:26'!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!methodRemoval: MarsRoverTest #test31MarsRoverFacingSouthRotatesLefttOnce stamp: 'NH 5/13/2023 14:20:26'!
test31MarsRoverFacingSouthRotatesLefttOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:20:47'!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:23:04' prior: 50607743!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:23:06'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:23:06'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:23:17' prior: 50608063!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:17'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:23:18'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:23:18'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:23:18'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:23:18'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:23:37' prior: 50608246!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	
	
	
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:23:41' prior: 50608428!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	
	
	
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:23:58' prior: 50608493!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:24:10'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:24:11'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:24:11'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:26:34' prior: 50608558!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:26:36'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:26:36'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:26:36'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:26:48' prior: 50608740!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:26:50'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:26:50'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:26:50'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:26:50'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:26:59' prior: 50606609!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:27:06' prior: 50606627!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:27:13' prior: 50606513!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 14:27:18' prior: 50606551!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:27:22'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:27:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:30:57'!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:31:17'!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:32:19'!
test36MarsRoverFacingSouthRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:32:29' prior: 50609281!
test36MarsRoverFacingSouthRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:32:46'!
test37MarsRoverFacingSouthRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:32:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:34:13' prior: 50608922!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	].
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 14:34:14'!
PASSED!

Object subclass: #Direction
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Direction category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:35:27'!
Object subclass: #Direction
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Direction category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:35:36'!
Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #North
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:35:50'!
Direction subclass: #North
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #West
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #West category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:35:56'!
Direction subclass: #West
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #South
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #South category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:35:59'!
Direction subclass: #South
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #East
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #East category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:36:06'!
Direction subclass: #East
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!Direction methodsFor: 'nil' stamp: 'NH 5/13/2023 14:36:41'!
right
	self subclassResponsibility! !
!Direction methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:36:51'!
left
	self subclassResponsibility! !
!East methodsFor: 'nil' stamp: 'NH 5/13/2023 14:37:34' overrides: 50609600!
right
	^South! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:37:46' prior: 50609608 overrides: 50609600!
right
	^right! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:37:56' overrides: 50609604!
left
	^left! !

Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #East category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:38:20'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #North
	instanceVariableNames: 't'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:38:25'!
Direction subclass: #North
	instanceVariableNames: 't'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 14:38:27'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!North methodsFor: 'nil' stamp: 'NH 5/13/2023 14:38:45' overrides: 50609600!
right
	^West! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:38:53' overrides: 50609604!
left
	^East! !
!South methodsFor: 'nil' stamp: 'NH 5/13/2023 14:39:12' overrides: 50609600!
right
	^East! !
!South methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:39:29' overrides: 50609604!
left
	^West! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:39:41' prior: 50609612 overrides: 50609600!
right
	^North! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:39:50' prior: 50609616 overrides: 50609604!
left
	^South! !
!West methodsFor: 'nil' stamp: 'NH 5/13/2023 14:40:10' overrides: 50609600!
right
	^South! !
!West methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:40:20' overrides: 50609604!
left
	^North! !

North left!

North new left!

North new left timesRepeat: 4!

4 timesRepeat: [aNorth left]!

|aNorth|
aNorth := North new. 
4 timesRepeat: [aNorth left]!

----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/cuis_para el parcial/Packages/TerseGuide.pck.st----!

----SNAPSHOT----(13 May 2023 14:48:56) CuisUniversity-5706.image priorSource: 8713034!

4 timesRepeat: [aNorth := aNorth left]!

|aNorth|
aNorth := North new. 
4 timesRepeat: [aNorth := aNorth left]!

4 timesRepeat: [aNorth := aNorth new left]!

4 timesRepeat: [aNorth := aNorth left new]!

|aNorth|
aNorth := North new. 
4 timesRepeat: [aNorth := aNorth left new]!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:51:16' prior: 50609315!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	].
	
	
	
	
	! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:52:12' prior: 50609657 overrides: 50609604!
left
	^East new ! !

true!

false!

----End fileIn of /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/practicas/AlgebraDeBoole-Clases.st----!

Smalltalk!

North left!

North new left!

North new left left!

North new left left left!

North new left left left!

North new left left !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:32:41' prior: 50609653 overrides: 50609600!
right
	^West new! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:32:46' prior: 50609672 overrides: 50609604!
left
	^South new! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:32:50' prior: 50609668 overrides: 50609600!
right
	^North new! !
!West methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:32:55' prior: 50609675 overrides: 50609600!
right
	^South new! !
!West methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:32:59' prior: 50609679 overrides: 50609604!
left
	^North new! !

North new left left left!

North new left left left left!

North new left left left left!

North new left left left !

North new left left!
!South methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:33:50' prior: 50609664 overrides: 50609604!
left
	^West new! !
!South methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:33:54' prior: 50609660 overrides: 50609600!
right
	^East new! !

North new left left left left!

North new left left left left left !

4 timesRepeat: [aDirection := aDirection left].!

|aDirection|
aDirection := East new.
4 timesRepeat: [aDirection := aDirection left].!

|aDirection|
aDirection := East new.
3 timesRepeat: [aDirection := aDirection left].
aDirection!

|aDirection|
aDirection := East new.
4 timesRepeat: [aDirection := aDirection left].
aDirection !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:38:43' prior: 50612620!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		"aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East]."
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	].
	
	
	
	
	! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:39:10' prior: 50612913 overrides: 50609600!
right
	#West
	"^West new"! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:39:14' prior: 50613052 overrides: 50609600!
right
	^#West
	"^West new"! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:39:27' prior: 50612709 overrides: 50609604!
left
	#East
	"^East new "! !
!East class methodsFor: 'nil' stamp: 'NH 5/13/2023 15:40:18'!
intialize 
	Smalltalk at: #East put: self new! !
!North class methodsFor: 'nil' stamp: 'NH 5/13/2023 15:40:35'!
intialize 
	Smalltalk at: #East put: self new! !
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:40:40' prior: 50613069!
intialize 
	Smalltalk at: #North put: self new! !
!South class methodsFor: 'nil' stamp: 'NH 5/13/2023 15:40:47'!
intialize 
	Smalltalk at: #South put: self new! !
!West class methodsFor: 'nil' stamp: 'NH 5/13/2023 15:40:53'!
intialize 
	Smalltalk at: #West put: self new! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:41:13'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 15:41:13'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:41:13'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:41:22'!
ERROR!
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:41:55' prior: 50613062 overrides: 50609604!
left

	^East! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:42:08' prior: 50613057 overrides: 50609600!
right
	
	^West! !

North left!

North new left!

North new left left!

North new left left left!
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:43:05' prior: 50613225 overrides: 50609600!
right
	
	^West new! !
!North methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:43:16' prior: 50613232 overrides: 50609600!
right
	
	^West ! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:43:22' prior: 50612921 overrides: 50609600!
right
	^North ! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:43:25' prior: 50612917 overrides: 50609604!
left
	^South ! !

North new left left!

North new left !

East left!
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:44:02' prior: 50613241 overrides: 50609600!
right
	^North new! !
!East methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:44:06' prior: 50613245 overrides: 50609604!
left
	^South new! !
!MarsRover methodsFor: 'initialization' stamp: 'NH 5/13/2023 15:44:46' prior: 50604026!
initializeLandsAt: aPointInAMap facing: aDirection 
	
	position := aPointInAMap.
	direction := aDirection new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:45:20' prior: 50612961!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	
	
	"direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		"aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East]."
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	]."
	
	
	
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:45:58' prior: 50613267!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(direction isKindOf: North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	].
	
	"direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	]."
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:45:59'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:46:00'!
ERROR!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 15:47:08' prior: 50604799!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:47:10'!
FAILURE!

Direction subclass: #North
	instanceVariableNames: 'uniqueinstance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 15:47:50'!
Direction subclass: #North
	instanceVariableNames: 'uniqueinstance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 15:48:26'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

North class
	instanceVariableNames: 'uniqueinstance'!

!classDefinition: 'North class' category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 15:48:30'!
North class
	instanceVariableNames: 'uniqueinstance'!
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:48:50' prior: 50613074!
intialize 
	uniqueinstance := self basicNew
	Smalltalk at: #North put: self new! !
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:48:52' prior: 50613703!
intialize 
	uniqueinstance := self basicNew.
	Smalltalk at: #North put: self new! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 15:48:55'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 15:48:56'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:48:56'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:48:56'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:49:14'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:49:14'!
FAILURE!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 15:49:58' prior: 50613659!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North new! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:50:00'!
FAILURE!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 15:50:35' prior: 50613853!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover aNorth|
	aNorth := North new.
	aMarsRover := MarsRover landsAt: 0@0 facing: aNorth.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: aNorth! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:50:38'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'NH 5/13/2023 15:50:51' prior: 50613260!
initializeLandsAt: aPointInAMap facing: aDirection 
	
	position := aPointInAMap.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 15:50:55'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:50:56'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:51:00'!
PASSED!

DenotativeObject subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Direction category: 'MarsRover-Ejercicio' stamp: 'NH 5/13/2023 15:55:22'!
DenotativeObject subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:55:48' prior: 50613709!
intialize 
	! !

!methodRemoval: North class #intialize stamp: 'NH 5/13/2023 15:55:54'!
intialize 
	!

East left!
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:56:47'!
left
	^South new! !

!methodRemoval: East #left stamp: 'NH 5/13/2023 15:56:47'!
left
	^South new!
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:56:54'!
right
	^North new! !

!methodRemoval: East #right stamp: 'NH 5/13/2023 15:56:54'!
right
	^North new!
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:23'!
left

	^East! !

!methodRemoval: North #left stamp: 'NH 5/13/2023 15:57:23'!
left

	^East!
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:28'!
right
	
	^West ! !

!methodRemoval: North #right stamp: 'NH 5/13/2023 15:57:28'!
right
	
	^West !
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:39'!
right
	^South new! !

!methodRemoval: West #right stamp: 'NH 5/13/2023 15:57:39'!
right
	^South new!
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:44'!
left
	^North new! !

!methodRemoval: West #left stamp: 'NH 5/13/2023 15:57:44'!
left
	^North new!

!methodRemoval: West class #intialize stamp: 'NH 5/13/2023 15:57:49'!
intialize 
	Smalltalk at: #West put: self new!

!methodRemoval: South class #intialize stamp: 'NH 5/13/2023 15:57:53'!
intialize 
	Smalltalk at: #South put: self new!

!methodRemoval: East class #intialize stamp: 'NH 5/13/2023 15:58:00'!
intialize 
	Smalltalk at: #East put: self new!
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:05' prior: 50614052!
right
	^North! !
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:09' prior: 50614046!
left
	^South! !

East left!

East left left!
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:46'!
right
	^East new! !

!methodRemoval: South #right stamp: 'NH 5/13/2023 15:58:46'!
right
	^East new!
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:51'!
left
	^West new! !

!methodRemoval: South #left stamp: 'NH 5/13/2023 15:58:51'!
left
	^West new!
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:14' prior: 50614108!
left
	^West! !
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:18' prior: 50614070!
right
	^South! !
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:21' prior: 50614076!
left
	^North! !

East left left left !

East left left left left!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 15:59:54' prior: 50613868!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |

	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:59:58'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 15:59:59'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:00:06'!
PASSED!
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:27' prior: 50606571!
test01MarsRoverMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:32' prior: 50606590!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:36' prior: 50609105!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:42' prior: 50609115!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'r'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:46' prior: 50605022!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:50' prior: 50605276!
test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:55' prior: 50605266!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@8 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:59' prior: 50605449!
test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:04' prior: 50605481!
test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 3@2 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:08' prior: 50605662!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:12' prior: 50605681!
test11MarsRoverMovesFowardThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'fff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@3 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:18' prior: 50605912!
test12MarsRoverMovesBackwardsTwiceFacingNorth

	|aMarsRover|

	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:24' prior: 50605931!
test13MarsRoverMovesBackwardsThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:29' prior: 50606494!
test14MarsRoverRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:33' prior: 50609125!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:37' prior: 50606532!
test16MarsRoverRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:55' prior: 50609136!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:58' prior: 50614448!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:03:04' prior: 50607489!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:03:08' prior: 50607721!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:03:12' prior: 50607984!
test29MarsRoverFacingSouthRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:03:16' prior: 50608024!
test32MarsRoverFacingSouthRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:03:19' prior: 50609301!
test37MarsRoverFacingSouthRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 16:03:27'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 16:03:27'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 16:03:28'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:03:28'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 16:03:28'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 16:03:28'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:03:28'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:03:28'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:03:42'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:03:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:04:04' prior: 50613357!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	].
	
	"direction = #North ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
		(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
		].
		aCommand='r' ifTrue: [^direction:=#West].
		aCommand='rr' ifTrue: [^direction:=#South].
		aCommand='rrr' ifTrue: [^direction:=#East].
		aCommand='l' ifTrue: [^direction:=#East].
		aCommand='ll' ifTrue: [^direction:=#South].
		aCommand='lll' ifTrue: [^direction:=#West].
	].
	direction = #West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#South].
		aCommand='rr' ifTrue: [^direction:=#East].
		aCommand='rrr' ifTrue: [^direction:=#North].
		aCommand='l' ifTrue: [^direction:=#North].
		aCommand='ll' ifTrue: [^direction:=#East].
		aCommand='lll' ifTrue: [^direction:=#South].
	].
	direction = #South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		].
		aCommand='r' ifTrue: [^direction:=#East].
		aCommand='rr' ifTrue: [^direction:=#North].
		aCommand='rrr' ifTrue: [^direction:=#West].
		aCommand='l' ifTrue: [^direction:=#West].
		aCommand='ll' ifTrue: [^direction:=#North].
		aCommand='lll' ifTrue: [^direction:=#East].
	].
	direction = #East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
		aCommand='r' ifTrue: [^direction:=#North].
		aCommand='rr' ifTrue: [^direction:=#West].
		aCommand='rrr' ifTrue: [^direction:=#South].
		aCommand='l' ifTrue: [^direction:=#South].
		aCommand='ll' ifTrue: [^direction:=#West].
		aCommand='lll' ifTrue: [^direction:=#North].
	]."
	
	
	
	
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:04:15'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:04:15'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 16:04:15'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 16:04:16'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 16:04:16'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:04:16'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 16:04:16'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:04:16'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:07:23' prior: 50614659!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 16:07:32'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:07:32'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:07:32'!
FAILURE!
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:08:38' prior: 50614102!
right
	^East! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:08:49'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 16:08:52'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 16:08:52'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 16:08:52'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 16:08:52'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:08:52'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:08:52'!
ERROR!
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:08:57' prior: 50607878!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:02' prior: 50607897!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: West! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:06' prior: 50607212!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:11' prior: 50607479!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:13' prior: 50607711!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:15' prior: 50615156!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test with MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:20' prior: 50607730!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 16:09:23'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:09:24'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 16:09:28'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 16:09:28'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 16:09:28'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 16:09:28'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:09:28'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 16:09:28'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 16:09:28'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:09:28'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 16:09:28'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 16:09:28'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:09:28'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:09:28'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:32' prior: 50607927!
test26MarsRoverFacingSouthMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:36' prior: 50607937!
test27MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: South.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:41' prior: 50607965!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:45' prior: 50608004!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:50' prior: 50608034!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:54' prior: 50608053!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:09:58' prior: 50609272!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: East! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:10:02' prior: 50609291!
test36MarsRoverFacingSouthRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:10:07' prior: 50609263!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: East! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:10:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:10:17'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:11:49'!
test36MarsRoverFacingEastRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !

!methodRemoval: MarsRoverTest #test36MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'NH 5/13/2023 16:11:49'!
test36MarsRoverFacingSouthRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South!
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:12:00'!
test37MarsRoverFacingEastRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !

!methodRemoval: MarsRoverTest #test37MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'NH 5/13/2023 16:12:00'!
test37MarsRoverFacingSouthRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North!

!classRemoval: #Verdad stamp: 'NH 5/13/2023 16:14:54'!
ValorDeVerdad subclass: #Verdad
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Clases'!

!classRemoval: #Falsedad stamp: 'NH 5/13/2023 16:14:54'!
ValorDeVerdad subclass: #Falsedad
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Clases'!

!classRemoval: #ValorDeVerdad stamp: 'NH 5/13/2023 16:14:55'!
Object subclass: #ValorDeVerdad
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Clases'!

!classRemoval: #BooleanTest stamp: 'NH 5/13/2023 16:14:55'!
TestCase subclass: #BooleanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Clases'!
!North class methodsFor: '--** private fileout/in **--' stamp: 'NH 5/13/2023 16:15:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'NH 5/13/2023 16:15:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!

----QUIT----(13 May 2023 16:15:18) CuisUniversity-5706.image priorSource: 8990624!