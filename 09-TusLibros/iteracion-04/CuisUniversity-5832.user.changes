

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (3 June 2023 11:09:26) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\MarsRover-WithHeading.st----!

TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogTest category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:14:16'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'no messages' stamp: 'cb 6/3/2023 11:16:05'!
test01MarsRoverChange
         |aMarsRover|
         aMarsRover := MarsRover! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:17:01' prior: 50624867!
test01MarsRoverChange
         |aMarsRover|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth new.
         aMarsRover ! !

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:21:07'!
Object subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:21:02' prior: 50624873!
test01MarsRoverChange
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth new.
         marsRoverLog := MarsRoverPositionLog new.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:21:11'!
ERROR!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:21:30' prior: 50624889!
test01MarsRoverChange
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog new.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:21:31'!
ERROR!
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:21:43'!
show
	self shouldBeImplemented.! !
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:22:22' prior: 50624926!
show
	^1@2! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:22:24'!
FAILURE!

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:22:24'!
FAILURE!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:23:38'!
Object subclass: #MarsRoverPositionLog
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:23:36' prior: 50624931!
show
	^positionLog! !
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:24:08' overrides: 16920235!
initialize
	positionLog := OrderedCollection new! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:24:46' prior: 50624908!
test01MarsRoverChange
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracing: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:24:55'!
ERROR!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:25:27' prior: 50624958!
test01MarsRoverChange
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:25:34'!
ERROR!
!MarsRoverPositionLog class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 11:25:43'!
tracking: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTracking: aMarsRover ! !
!MarsRoverPositionLog class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 11:26:11' prior: 50624996!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover ! !
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:26:49'!
initializeTracking
	positionLog := OrderedCollection new! !

!methodRemoval: MarsRoverPositionLog #initialize stamp: 'cb 6/3/2023 11:26:49'!
initialize
	positionLog := OrderedCollection new!
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:27:07'!
initializeTracking: aMarsRover
	positionLog := OrderedCollection new
	! !

!methodRemoval: MarsRoverPositionLog #initializeTracking stamp: 'cb 6/3/2023 11:27:09'!
initializeTracking
	positionLog := OrderedCollection new!
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:28:01' prior: 50625019!
initializeTracking: aMarsRover
	positionLog := OrderedCollection new.
	aMarsRover beingTrackedBy: self! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:28:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'cb 6/3/2023 11:28:56' prior: 50624557!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self. 
	observers := OrderedCollection new  ! !
!MarsRover methodsFor: 'nil' stamp: 'cb 6/3/2023 11:29:23'!
beingTrackedBy: aTracker
        observers add: aTracker! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 11:30:47' prior: 50624609!
moveBackward
	
	head moveBackward.
	observers do: [:aTracker | aTracker updatesPosition: self]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 11:31:01' prior: 50624617!
moveForward
	
	head moveForward.
	observers do: [:aTracker | aTracker updatesPosition: self]! !
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:31:42'!
updatesPosition: aMarsRover
        positionLog add: aMarsRover position! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:31:45'!
ERROR!

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:31:45'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 11:33:10' prior: 50625055!
moveBackward
	
	head moveBackward.
	observers do: [:aTracker | aTracker updatesPosition: position]! !
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 11:33:28' prior: 50625067!
updatesPosition: aMarsRoverPosition
        positionLog add: aMarsRoverPosition! !

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:33:29'!
FAILURE!

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:33:29'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 11:33:49' prior: 50625061!
moveForward
	
	head moveForward.
	observers do: [:aTracker | aTracker updatesPosition: position]! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 11:33:51'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:33:55'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:34:20'!
test01MarsRoverChangeInPosition
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test01MarsRoverChange stamp: 'cb 6/3/2023 11:34:20'!
test01MarsRoverChange
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:39:53'!
test01MarsRoverTrackingPosition
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test01MarsRoverChangeInPosition stamp: 'cb 6/3/2023 11:39:53'!
test01MarsRoverChangeInPosition
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:42:31'!
test02MarsRoverTrackingPositionWithTwoMovements
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'ff'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 1@3.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithTwoMovements stamp: 'cb 6/3/2023 11:42:55'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPosition stamp: 'cb 6/3/2023 11:42:55'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithTwoMovements stamp: 'cb 6/3/2023 11:42:55'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:43:42'!
test03MarsRoverTrackingDirectionWithOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'ff'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 1@3.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:44:01'!
test01MarsRoverTrackingPositionWithOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test01MarsRoverTrackingPosition stamp: 'cb 6/3/2023 11:44:01'!
test01MarsRoverTrackingPosition
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show !
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:44:15'!
test02MarsRoverTrackingPositionWithMoreThanOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'ff'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 1@3.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test02MarsRoverTrackingPositionWithTwoMovements stamp: 'cb 6/3/2023 11:44:15'!
test02MarsRoverTrackingPositionWithTwoMovements
         |aMarsRover marsRoverLog theMarsRoverLog| 
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'ff'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 1@3.
         self assert: theMarsRoverLog equals: marsRoverLog show !

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:52:24'!
Object subclass: #MarsRoverDirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:52:10' prior: 50625250!
test03MarsRoverTrackingDirectionWithOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverDirectionLog tracking: aMarsRover.
         aMarsRover process: 'r'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 'East'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 11:53:49'!
ERROR!
!MarsRoverDirectionLog class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 11:54:06'!
tracking: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTracking: aMarsRover ! !
!MarsRoverDirectionLog class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 11:54:17' prior: 50625364!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover ! !
!MarsRoverDirectionLog class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 11:54:44' prior: 50625373!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover! !

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 11:56:02'!
Object subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'directionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionLog methodsFor: 'no messages' stamp: 'cb 6/3/2023 11:56:00'!
initializeTracking: aMarsRover
       directionLog := OrderedCollection new.! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:56:29'!
show
     ^directionLog! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 11:58:34' prior: 50624579!
rotateLeft
	
	head rotateLeft.
	observers do: [:aTracker | aTracker updatesDirection: head]! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 11:59:07'!
updatesDirection: aDirection
        directionLog add: aDirection! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 11:59:09'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 11:59:09'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 11:59:09'!
FAILURE!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 11:59:09'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 11:59:56' prior: 50624583!
rotateRight
	
	head rotateRight.
	observers do: [:aTracker | aTracker updatesDirection: head]! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 11:59:57'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:00:04'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:00:04'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:00:04'!
FAILURE!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:00:04'!
FAILURE!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:00:40' prior: 50625392!
initializeTracking: aMarsRover
       directionLog := OrderedCollection new.
        aMarsRover beingTrackedBy: self! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:00:41'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:00:41'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:00:41'!
FAILURE!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:00:41'!
FAILURE!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:02:08' prior: 50625408!
updatesDirection: aDirection
        (aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	        directionLog add: 'East'
	]
! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:02:10'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:02:10'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:02:10'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:03:44'!
test03MarsRoverTrackingDirectionWithMoreThanOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverDirectionLog tracking: aMarsRover.
         aMarsRover process: 'rl'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 'East'.
         theMarsRoverLog add: 'North'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:03:45'!
FAILURE!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:04:56' prior: 50625525!
updatesDirection: aDirection
        (aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	        directionLog add: 'East'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
              directionLog add: 'West'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
              directionLog add: 'South'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
              directionLog add: 'North'
        ].
! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:04:58'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:04:58'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:04:58'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:04:58'!
PASSED!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:05:28'!
test04MarsRoverTrackingDirectionWithMoreThanOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverDirectionLog tracking: aMarsRover.
         aMarsRover process: 'rl'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 'East'.
         theMarsRoverLog add: 'North'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test03MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:05:28'!
test03MarsRoverTrackingDirectionWithMoreThanOneMovement
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverDirectionLog tracking: aMarsRover.
         aMarsRover process: 'rl'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 'East'.
         theMarsRoverLog add: 'North'.
         self assert: theMarsRoverLog equals: marsRoverLog show !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:14:32'!
Object subclass: #MarsRoverLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:14:29'!
test05MarsRoverTrackingPositionAndDirection
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 'East'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:14:57'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'no messages' stamp: 'cb 6/3/2023 12:14:55'!
show
     ^changesLog! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:15:13'!
initializeTracking: aMarsRover
	changesLog := OrderedCollection new.
	aMarsRover beingTrackedBy: self! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:15:36'!
updatesPosition: aMarsRoverPosition
        changesLog add: aMarsRoverPosition! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:16:34'!
updatesDirection: aDirection
        (aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	        changesLog add: 'East'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
              changesLog add: 'West'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
              changesLog add: 'South'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
              changesLog add: 'North'
        ].
! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:16:36'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:36'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:16:36'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:36'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:16:36'!
ERROR!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:16:36'!
ERROR!
!MarsRoverLog class methodsFor: 'no messages' stamp: 'cb 6/3/2023 12:16:52'!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover ! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:16:57'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:57'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:16:57'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:57'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:16:57'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:16:59'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:59'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:16:59'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:16:59'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:16:59'!
PASSED!

MarsRoverLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'directionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:17:34'!
MarsRoverLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'directionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLog subclass: #MarsRoverPositionLog
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:17:49'!
MarsRoverLog subclass: #MarsRoverPositionLog
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionLog methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:18:10' overrides: 50625684!
updatesDirection: aMarsRoverPosition
       ^self! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:18:41' overrides: 50625678!
updatesPosition: aMarsRoverPosition
       ^self
          ! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:18:43' prior: 50625799 overrides: 50625678!
updatesPosition: aMarsRoverPosition
     ^self
          ! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:18:50'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:18:50'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:18:50'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:18:50'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:18:50'!
PASSED!

!methodRemoval: MarsRoverDirectionLog #updatesDirection: stamp: 'cb 6/3/2023 12:20:30'!
updatesDirection: aDirection
        (aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	        directionLog add: 'East'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
              directionLog add: 'West'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
              directionLog add: 'South'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
              directionLog add: 'North'
        ].
!

!methodRemoval: MarsRoverDirectionLog #show stamp: 'cb 6/3/2023 12:20:33'!
show
     ^directionLog!

!methodRemoval: MarsRoverDirectionLog #initializeTracking: stamp: 'cb 6/3/2023 12:20:34'!
initializeTracking: aMarsRover
       directionLog := OrderedCollection new.
        aMarsRover beingTrackedBy: self!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 12:20:38'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:20:38'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 12:20:38'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 12:20:38'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 12:20:38'!
PASSED!

!methodRemoval: MarsRoverDirectionLog class #tracking: stamp: 'cb 6/3/2023 12:20:55'!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover!

!methodRemoval: MarsRoverPositionLog #initializeTracking: stamp: 'cb 6/3/2023 12:21:04'!
initializeTracking: aMarsRover
	positionLog := OrderedCollection new.
	aMarsRover beingTrackedBy: self!

!methodRemoval: MarsRoverPositionLog #show stamp: 'cb 6/3/2023 12:21:05'!
show
	^positionLog!

!methodRemoval: MarsRoverPositionLog #updatesPosition: stamp: 'cb 6/3/2023 12:21:07'!
updatesPosition: aMarsRoverPosition
        positionLog add: aMarsRoverPosition!

TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindowTest category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:27:59'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:37:02'!
Object subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindowTest methodsFor: 'no messages' stamp: 'cb 6/3/2023 12:36:58'!
test01MarsRoverWindowTrackingPositionWithNoMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverPositionWindow tracking: aMarsRover.
  
         self assert: '' equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:37:05'!
ERROR!
!MarsRoverPositionWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:37:13'!
tracking: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTracking: aMarsRover ! !
!MarsRoverPositionWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:37:43' prior: 50625931!
tracking: aMarsRover
	^self new initializeTracking: aMarsRover ! !

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:39:14'!
Object subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'lastPositionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionWindow methodsFor: 'no messages' stamp: 'cb 6/3/2023 12:39:12'!
initializeTracking: aMarsRover
      lastPositionChange := ''.
      aMarsRover beingTrackedBy: self! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:39:28'!
ERROR!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:39:28'!
ERROR!
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:39:34'!
show
	self shouldBeImplemented.! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:39:43' prior: 50625968!
show
	^lastPositionChange ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:39:52'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:40:28'!
test02MarsRoverWindowTrackingPositionWithMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverPositionWindow tracking: aMarsRover.
         aMarsRover process: 'f'.
         self assert: 1@2 equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:40:29'!
ERROR!
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:40:36'!
updatesPosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:41:12' prior: 50625998!
updatesPosition: aPosition 
	lastPositionChange := aPosition ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:41:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:41:29'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:44:21'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:44:21'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:44:21'!
PASSED!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:45:31'!
Object subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:45:29'!
test02MarsRoverWindowTrackingDirectionWithNoMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverDirectionWindow tracking: aMarsRover.
         self assert: '' equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:45:33'!
ERROR!
!MarsRoverDirectionWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:45:40'!
tracking: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTracking: aMarsRover ! !
!MarsRoverDirectionWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:45:50' prior: 50626054!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover ! !
!MarsRoverDirectionWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:45:52' prior: 50626063!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover ! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:47:35'!
test03MarsRoverWindowTrackingDirectionWithNoMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverDirectionWindow tracking: aMarsRover.
         self assert: '' equals: marsRoverWindow show ! !

!methodRemoval: MarsRoverWindowTest #test02MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:47:35'!
test02MarsRoverWindowTrackingDirectionWithNoMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverDirectionWindow tracking: aMarsRover.
         self assert: '' equals: marsRoverWindow show !

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:47:38'!
ERROR!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:47:46'!
Object subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:47:46'!
initializeTracking: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:48:22'!
Object subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'marsRover lastDirectionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:48:20' prior: 50626112!
initializeTracking: aMarsRover 
	lastDirectionChange := ''.
        aMarsRover beingTrackedBy: self.! !

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:48:43'!
ERROR!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:48:43'!
ERROR!
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:48:49'!
show
	self shouldBeImplemented.! !
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:48:59' prior: 50626141!
show
	^lastDirectionChange ! !

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:49:05'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:49:05'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:49:05'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:49:05'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:50:02'!
test04MarsRoverWindowTrackingDirectionWithMovement
         |aMarsRover marsRoverWindow |
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverDirectionWindow tracking: aMarsRover.
         aMarsRover process: 'r'.
         self assert: 'Apuntando al Este' equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 12:50:03'!
ERROR!
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:50:11'!
updatesDirection: aHead 
	self shouldBeImplemented.! !
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 12:51:56' prior: 50626184!
updatesDirection: aDirection
	(aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:51:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:51:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:51:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 12:51:58'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:55:29'!
test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverDirectionWindow tracking: aMarsRover.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: ''.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:55:43'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:55:40' prior: 50626225!
test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverWindow tracking: aMarsRover.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: ''.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:55:52'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:55:52'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:55:52'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 12:55:52'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 12:55:52'!
ERROR!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 12:55:52'!
ERROR!
!MarsRoverWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:55:57'!
tracking: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTracking: aMarsRover ! !
!MarsRoverWindow class methodsFor: 'instance creation' stamp: 'cb 6/3/2023 12:56:02' prior: 50626292!
tracking: aMarsRover
	^self new initializeTracking: aMarsRover ! !
!MarsRoverWindow methodsFor: 'no messages' stamp: 'cb 6/3/2023 12:56:27'!
initializeTracking: aMarsRover
     ! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:57:42'!
show 
      |lastChanges|
      lastChanges := OrderedCollection new.
      lastChanges add: ''.
      lastChanges add: ''.
      ^lastChanges
 
     ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 12:57:43'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 12:57:43'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 12:57:43'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 12:57:43'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 12:57:43'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:58:28'!
test05MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverWindow tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:58:36'!
test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverWindow tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !

!methodRemoval: MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 12:58:36'!
test05MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverWindow tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:59:26'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastChangeInPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:59:23' prior: 50626306!
initializeTracking: aMarsRover
      lastChangeInPosition := ''.
      aMarsRover beingTrackedBy: self.
     ! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:59:45'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastChangeInPosition lastPositionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 12:59:44' prior: 50626405!
initializeTracking: aMarsRover
      lastPositionChange := ''.
      aMarsRover beingTrackedBy: self.
     ! !

Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastPositionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 12:59:54'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastPositionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:00:05' prior: 50626310!
show 
      |lastChanges|
      lastChanges := OrderedCollection new.
      lastChanges add: lastPositionChange.
      lastChanges add: ''.
      ^lastChanges
 
     ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:00:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:00:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:00:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:00:06'!
ERROR!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:00:06'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:00:11'!
updatesPosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:00:18' prior: 50626478!
updatesPosition: aPosition 
	lastPositionChange := aPosition.! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:00:20'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:00:20'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:20'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:00:20'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:20'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:00:20'!
PASSED!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:00:46'!
test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverWindow tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: 'Apuntando al Este'.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:00:47'!
ERROR!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:00:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:00:53'!
ERROR!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:00:53'!
ERROR!
!UndefinedObject methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:00:57'!
postDrawOn: aHybridCanvas 
	self shouldBeImplemented.! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:01:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:01:02'!
ERROR!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:01:02'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:01:11'!
updatesDirection: aHead 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:01:32'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastPositionChange lastDirectionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:01:31' prior: 50626607!
updatesDirection: aDirection
	lastDirectionChange := aDirection.! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:01:48' prior: 50626421!
initializeTracking: aMarsRover
      lastPositionChange := ''.
      lastDirectionChange := ''.
      aMarsRover beingTrackedBy: self.
     ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:01:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:01:49'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:01:49'!
FAILURE!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:02:20' prior: 50626621!
updatesDirection: aDirection
	(aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:02:22'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:02:22'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:02:22'!
FAILURE!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:03:02' prior: 50626441!
show 
      |lastChanges|
      lastChanges := OrderedCollection new.
      lastChanges add: lastPositionChange.
      lastChanges add: lastDirectionChange.
      ^lastChanges
 
     ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:03:04'!
PASSED!

MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'lastPositionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:09:27'!
MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:09:55'!
MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'category-name' stamp: 'cb 6/3/2023 13:12:14' overrides: 50626483!
updatesPosition: aPosition 
	^self! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:12:52' overrides: 50626668!
updatesDirection: aDirection 
	^self! !

!methodRemoval: MarsRoverDirectionWindow #updatesDirection: stamp: 'cb 6/3/2023 13:13:29'!
updatesDirection: aDirection
	(aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
!

!methodRemoval: MarsRoverDirectionWindow #initializeTracking: stamp: 'cb 6/3/2023 13:13:38'!
initializeTracking: aMarsRover 
	lastDirectionChange := ''.
        aMarsRover beingTrackedBy: self.!

!methodRemoval: MarsRoverPositionWindow #initializeTracking: stamp: 'cb 6/3/2023 13:13:45'!
initializeTracking: aMarsRover
      lastPositionChange := ''.
      aMarsRover beingTrackedBy: self!

!methodRemoval: MarsRoverPositionWindow #updatesPosition: stamp: 'cb 6/3/2023 13:13:51'!
updatesPosition: aPosition 
	lastPositionChange := aPosition !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:14:04'!
PASSED!

!methodRemoval: MarsRoverDirectionWindow class #tracking: stamp: 'cb 6/3/2023 13:15:14'!
tracking: aMarsRover 
	^self new initializeTracking: aMarsRover !

!methodRemoval: MarsRoverPositionWindow class #tracking: stamp: 'cb 6/3/2023 13:15:19'!
tracking: aMarsRover
	^self new initializeTracking: aMarsRover !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:15:57'!
PASSED!

MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'lastDirectionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'directionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:16:45'!
MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'directionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'positionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:16:54'!
MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'positionChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'initialization' stamp: 'cb 6/3/2023 13:17:18' overrides: 50626627!
initializeTracking: aMarsRover
      directionChange := ''.
      aMarsRover beingTrackedBy: self.! !
!MarsRoverDirectionWindow methodsFor: 'accesing' stamp: 'cb 6/3/2023 13:17:24' prior: 50626146 overrides: 50626722!
show
	^directionChange ! !
!MarsRoverPositionWindow methodsFor: 'initialization' stamp: 'cb 6/3/2023 13:17:49' overrides: 50626627!
initializeTracking: aMarsRover
      positionChange := ''.
      aMarsRover beingTrackedBy: self.! !
!MarsRoverPositionWindow methodsFor: 'accesing' stamp: 'cb 6/3/2023 13:17:56' prior: 50625973 overrides: 50626722!
show
	^positionChange ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:17:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:17:58'!
FAILURE!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:17:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:17:58'!
FAILURE!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:17:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:17:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:17:58'!
PASSED!

!methodRemoval: MarsRoverDirectionWindow #initializeTracking: stamp: 'cb 6/3/2023 13:18:19'!
initializeTracking: aMarsRover
      directionChange := ''.
      aMarsRover beingTrackedBy: self.!
!MarsRoverDirectionWindow methodsFor: 'accesing' stamp: 'cb 6/3/2023 13:18:25' prior: 50626948 overrides: 50626722!
show
	^lastDirectionChange ! !

!methodRemoval: MarsRoverPositionWindow #initializeTracking: stamp: 'cb 6/3/2023 13:18:33'!
initializeTracking: aMarsRover
      positionChange := ''.
      aMarsRover beingTrackedBy: self.!
!MarsRoverPositionWindow methodsFor: 'accesing' stamp: 'cb 6/3/2023 13:18:39' prior: 50626960 overrides: 50626722!
show
	^lastPositionChange ! !

MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:18:48'!
MarsRoverWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:18:52'!
MarsRoverWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #Observers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Observers category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:21:59'!
Object subclass: #Observers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 13:29:07' prior: 50625402!
rotateLeft
	
	head rotateLeft.
	observers do: [:aTracker | aTracker updatesDirection]! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 13:29:14' prior: 50625428!
rotateRight
	
	head rotateRight.
	observers do: [:aTracker | aTracker updatesDirection]! !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:29:49'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'initialization' stamp: 'cb 6/3/2023 13:29:47' prior: 50625672!
initializeTracking: aMarsRover
	changesLog := OrderedCollection new.
	marsRover := aMarsRover.
	aMarsRover beingTrackedBy: self! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 13:30:30' prior: 50625684!
updatesDirection: aDirection
        (marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	        changesLog add: 'East'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
              changesLog add: 'West'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
              changesLog add: 'South'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
              changesLog add: 'North'
        ].
! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 13:30:49'!
updatesPosition
        changesLog add: (marsRover position)! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 13:30:54'!
updatesDirection
        (marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	        changesLog add: 'East'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
              changesLog add: 'West'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
              changesLog add: 'South'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
              changesLog add: 'North'
        ].
! !

!methodRemoval: MarsRoverLog #updatesDirection: stamp: 'cb 6/3/2023 13:30:56'!
updatesDirection: aDirection
        (marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	        changesLog add: 'East'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
              changesLog add: 'West'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
              changesLog add: 'South'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
              changesLog add: 'North'
        ].
!

!methodRemoval: MarsRoverLog #updatesPosition: stamp: 'cb 6/3/2023 13:30:58'!
updatesPosition: aMarsRoverPosition
        changesLog add: aMarsRoverPosition!
!MarsRoverDirectionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 13:31:07' overrides: 50627098!
updatesPosition
     ^self
          ! !

!methodRemoval: MarsRoverDirectionLog #updatesPosition: stamp: 'cb 6/3/2023 13:31:16'!
updatesPosition: aMarsRoverPosition
     ^self
          !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 13:31:21' overrides: 50627103!
updatesDirection
       ^self! !

!methodRemoval: MarsRoverPositionLog #updatesDirection: stamp: 'cb 6/3/2023 13:31:23'!
updatesDirection: aMarsRoverPosition
       ^self!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 13:31:59'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'lastPositionChange lastDirectionChange marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 13:31:58'!
updatesDirection
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].! !

!methodRemoval: MarsRoverWindow #updatesDirection: stamp: 'cb 6/3/2023 13:32:01'!
updatesDirection: aDirection
	(aDirection isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (aDirection isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (aDirection isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (aDirection isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 13:32:11'!
updatesPosition
	lastPositionChange := marsRover position! !

!methodRemoval: MarsRoverWindow #updatesPosition: stamp: 'cb 6/3/2023 13:32:15'!
updatesPosition: aPosition 
	lastPositionChange := aPosition.!
!MarsRoverWindow methodsFor: 'initialization' stamp: 'cb 6/3/2023 13:32:32' prior: 50626627!
initializeTracking: aMarsRover
      lastPositionChange := ''.
      lastDirectionChange := ''.
      marsRover := aMarsRover.
      aMarsRover beingTrackedBy: self.
     ! !
!MarsRoverDirectionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 13:32:38' overrides: 50627209!
updatesPosition
	^self! !

!methodRemoval: MarsRoverDirectionWindow #updatesPosition: stamp: 'cb 6/3/2023 13:32:40'!
updatesPosition: aPosition 
	^self!
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 13:32:47' overrides: 50627170!
updatesDirection
	^self! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 13:32:50'!
ERROR!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:32:50'!
ERROR!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 13:32:50'!
ERROR!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:32:50'!
ERROR!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 13:32:50'!
ERROR!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:32:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:32:57'!
ERROR!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:32:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:32:57'!
ERROR!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:32:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:32:57'!
ERROR!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:32:57'!
ERROR!

!methodRemoval: MarsRoverPositionWindow #updatesDirection: stamp: 'cb 6/3/2023 13:33:11'!
updatesDirection: aDirection 
	^self!
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 13:33:31' prior: 50625078!
moveBackward
	
	head moveBackward.
	observers do: [:aTracker | aTracker updatesPosition]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 13:33:40' prior: 50625096!
moveForward
	
	head moveForward.
	observers do: [:aTracker | aTracker updatesPosition]! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 13:33:41'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:33:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:33:44'!
ERROR!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:33:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:33:44'!
ERROR!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:33:44'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:33:44'!
ERROR!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:33:44'!
ERROR!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 13:33:59'!
ERROR!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:33:59'!
ERROR!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 13:33:59'!
ERROR!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:33:59'!
ERROR!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 13:33:59'!
ERROR!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 13:34:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:34:20'!
head
    ^head! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 13:34:27'!
position
     ^position! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 13:34:31'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:34:31'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 13:34:31'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 13:34:31'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 13:34:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 13:34:34'!
PASSED!

----SNAPSHOT----(3 June 2023 13:36:35) CuisUniversity-5832.image priorSource: 9366758!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading-Test' stamp: 'cb 6/3/2023 14:36:25'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classDefinition: #MarsRoverWindowTest category: 'MarsRover-WithHeading-Test' stamp: 'cb 6/3/2023 14:36:47'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classDefinition: #MarsRoverLogTest category: 'MarsRover-WithHeading-Test' stamp: 'cb 6/3/2023 14:37:12'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!
!Observers methodsFor: 'no messages' stamp: 'cb 6/3/2023 14:39:26'!
updatesDirection
      ^self subclassResponsibility ! !
!Observers methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 14:39:33'!
updatesPosition
      ^self subclassResponsibility ! !
!Observers methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 14:42:13'!
updates
      ^self subclassResponsibility ! !

!methodRemoval: Observers #updatesDirection stamp: 'cb 6/3/2023 14:42:18'!
updatesDirection
      ^self subclassResponsibility !

!methodRemoval: Observers #updatesPosition stamp: 'cb 6/3/2023 14:42:21'!
updatesPosition
      ^self subclassResponsibility !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:43:53'!
updates
        self updatesDirection.
        self updatesPosition 
	
! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:44:50' prior: 50627170!
updatesDirection
        lastDirectionChange = marsRover head ifFalse: [
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:44:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:44:58'!
PASSED!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:45:45' prior: 50627209!
updatesPosition
        lastPositionChange = marsRover position ifFalse:
            [	lastPositionChange := marsRover position]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:45:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:45:49'!
PASSED!
!MarsRoverDirectionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:46:20' overrides: 50627524!
updates 
     self updatesDirection! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:46:42' overrides: 50627524!
updates
	^self updatesPosition ! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 14:46:56'!
updates
       ^self updatesPosition ! !
!MarsRoverDirectionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 14:47:10'!
updates
     ^self updatesDirection 
          ! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 14:47:35'!
updates
      self updatesDirection.
      self updatesPosition ! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 14:47:50' prior: 50627053!
rotateLeft
	
	head rotateLeft.
	observers do: [:aTracker | aTracker updates]! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 14:47:55' prior: 50627059!
rotateRight
	
	head rotateRight.
	observers do: [:aTracker | aTracker updates]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 14:48:04' prior: 50627291!
moveBackward
	
	head moveBackward.
	observers do: [:aTracker | aTracker updates]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 14:48:09' prior: 50627297!
moveForward
	
	head moveForward.
	observers do: [:aTracker | aTracker updates]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:48:15'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:48:15'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:48:15'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 14:48:27'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 14:48:28'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:48:28'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 14:48:28'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:48:28'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:48:28'!
FAILURE!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:48:28'!
FAILURE!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:49:07' prior: 50627530!
updatesDirection
        (lastDirectionChange = marsRover head) ifFalse: [
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
]! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:49:26' prior: 50627771!
updatesDirection
        (lastDirectionChange = (marsRover head)) ifFalse: [
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
]! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:49:41' prior: 50627581!
updatesPosition
        (lastPositionChange = (marsRover position)) ifFalse:
            [	lastPositionChange := marsRover position]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:49:46'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:49:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:49:46'!
FAILURE!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:51:48' prior: 50627793!
updatesDirection
        (lastDirectionChange = (marsRover head) and: (lastDirectionChange = '') not ) ifFalse: [
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
]! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 14:51:53'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:51:53'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 14:51:53'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:51:53'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:51:53'!
FAILURE!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:51:53'!
FAILURE!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:55:45' prior: 50627815!
updatesPosition
        (lastPositionChange = (marsRover position) and: (lastPositionChange = '') not ) ifFalse:
            [	lastPositionChange := marsRover position]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:55:47'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:55:47'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:55:47'!
FAILURE!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:55:54'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:55:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:55:57'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:55:58'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:55:59'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:56:00'!
FAILURE!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:56:00'!
FAILURE!
!MarsRoverDirectionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 14:56:41' prior: 50627617 overrides: 50627524!
updates 
     ^self updatesDirection! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:57:02'!
FAILURE!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 14:57:02'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 14:57:02'!
FAILURE!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:58:11'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:58:12'!
FAILURE!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 14:58:12'!
FAILURE!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 14:58:18'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:58:19'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 14:58:20'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 14:58:22'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:01:33' prior: 50627639!
rotateLeft
	
	head rotateLeft.
	observers do: [:aTracker | aTracker updatesDirection]! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:01:47' prior: 50627644!
rotateRight
	
	head rotateRight.
	observers do: [:aTracker | aTracker updatesDirection]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 15:01:56' prior: 50627650!
moveBackward
	
	head moveBackward.
	observers do: [:aTracker | aTracker updatesPosition]! !
!MarsRover methodsFor: 'moving' stamp: 'cb 6/3/2023 15:02:05' prior: 50627656!
moveForward
	
	head moveForward.
	observers do: [:aTracker | aTracker updatesPosition]! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:02:10'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 15:02:12'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:02:13'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:02:13'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:02:13'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:02:13'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:02:13'!
PASSED!

!methodRemoval: MarsRoverPositionWindow #updates stamp: 'cb 6/3/2023 15:02:43'!
updates
	^self updatesPosition !

!methodRemoval: MarsRoverDirectionWindow #updates stamp: 'cb 6/3/2023 15:02:49'!
updates 
     ^self updatesDirection!

!methodRemoval: MarsRoverWindow #updates stamp: 'cb 6/3/2023 15:02:51'!
updates
        self updatesDirection.
        self updatesPosition 
	
!

!methodRemoval: MarsRoverDirectionLog #updates stamp: 'cb 6/3/2023 15:02:56'!
updates
     ^self updatesDirection 
          !

!methodRemoval: MarsRoverPositionLog #updates stamp: 'cb 6/3/2023 15:02:58'!
updates
       ^self updatesPosition !

!methodRemoval: MarsRoverLog #updates stamp: 'cb 6/3/2023 15:03:01'!
updates
      self updatesDirection.
      self updatesPosition !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:03:08'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 15:03:10'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:03:11'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:03:11'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:03:11'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:03:11'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:03:11'!
PASSED!

MarsRoverLog subclass: #MarsRoverPositionAndDirectionLog
	instanceVariableNames: 'changesLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLog subclass: #MarsRoverPositionAndDirectionLog
	instanceVariableNames: 'changeLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionAndDirectionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 15:18:15'!
MarsRoverLog subclass: #MarsRoverPositionAndDirectionLog
	instanceVariableNames: 'changeLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 15:22:35'!
MarsRoverLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLog subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 15:22:40'!
MarsRoverLog subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:22:47'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:22:47'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:22:47'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:22:47'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:22:47'!
PASSED!

!classRemoval: #MarsRoverPositionAndDirectionLog stamp: 'cb 6/3/2023 15:25:22'!
MarsRoverLog subclass: #MarsRoverPositionAndDirectionLog
	instanceVariableNames: 'changeLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:25:58' prior: 50628036!
rotateLeft
	
	head rotateLeft.
	! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:26:09' prior: 50624575!
headWest
	
	head := MarsRoverHeadingWest for: self.
	observers do: [:aTracker | aTracker updatesDirectionWest] 
	! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:26:16' prior: 50628042!
rotateRight
	
	head rotateRight.
	! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:26:29' prior: 50624571!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	observers do: [:aTracker | aTracker updatesDirectionSouth] ! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:26:46' prior: 50624567!
headNorth
	
	head := MarsRoverHeadingNorth for: self. 
	observers do: [:aTracker | aTracker updatesDirectionNorth] ! !
!MarsRover methodsFor: 'heading' stamp: 'cb 6/3/2023 15:26:55' prior: 50624563!
headEast
	
	head := MarsRoverHeadingEast for: self.
	observers do: [:aTracker | aTracker updatesDirectionEast] ! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:27:39'!
updatesDirectionEast
        changesLog add: 'East'
	! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:27:53'!
updatesDirectionNorth
        changesLog add: 'North'
	! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:28:03'!
updatesDirectionWest
        changesLog add: 'West'
	! !
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:28:20'!
updatesDirectionSouth
        changesLog add: 'South'
	! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:31:38'!
updatesDirectionEast
	lastDirectionChange := 'Apuntando al Este'
	! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:31:50'!
updatesDirectionWest
	lastDirectionChange := 'Apuntando al Oeste'
	! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:32:00'!
updatesDirectionNorth
	lastDirectionChange := 'Apuntando al North'
	! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:32:14'!
updatesDirectionSouth
	lastDirectionChange := 'Apuntando al Sur'
	! !
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:32:25' prior: 50628420!
updatesDirectionNorth
	lastDirectionChange := 'Apuntando al Norte'
	! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:32:50'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 15:32:51'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:32:53'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:32:53'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:32:53'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:32:53'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:32:53'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:33:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:33:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:33:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:33:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:33:06'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:33:07'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:33:07'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 15:33:09'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:33:10'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:33:10'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:33:10'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:33:10'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:33:10'!
PASSED!

!methodRemoval: MarsRoverPositionWindow #updatesDirection stamp: 'cb 6/3/2023 15:33:17'!
updatesDirection
	^self!

!methodRemoval: MarsRoverWindow #updatesDirection stamp: 'cb 6/3/2023 15:33:28'!
updatesDirection
        (lastDirectionChange = (marsRover head) and: (lastDirectionChange = '') not ) ifFalse: [
	(marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	      lastDirectionChange := 'Apuntando al Este'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
               lastDirectionChange := 'Apuntando al Oeste'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Sur'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
                 lastDirectionChange := 'Apuntando al Norte'
        ].
]!

!methodRemoval: MarsRoverPositionLog #updatesDirection stamp: 'cb 6/3/2023 15:33:55'!
updatesDirection
       ^self!

!methodRemoval: MarsRoverLog #updatesDirection stamp: 'cb 6/3/2023 15:34:05'!
updatesDirection
        (marsRover head isKindOf: MarsRoverHeadingEast) ifTrue: [
	        changesLog add: 'East'
	].
        (marsRover head isKindOf: MarsRoverHeadingWest) ifTrue: [
              changesLog add: 'West'
        ].
        (marsRover head isKindOf: MarsRoverHeadingSouth) ifTrue: [
              changesLog add: 'South'
        ].
        (marsRover head isKindOf: MarsRoverHeadingNorth) ifTrue: [
              changesLog add: 'North'
        ].
!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:34:14'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:34:15'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:34:15'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:34:15'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:34:15'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:34:15'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 15:34:17'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:35:25'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'cb 6/3/2023 15:35:51' prior: 50625643!
test05MarsRoverTrackingPositionAndDirection
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 'East'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:35:53'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:35:53'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:35:53'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:35:53'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:35:53'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:35:53'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'cb 6/3/2023 15:36:05' prior: 50628789!
test05MarsRoverTrackingPositionAndDirection
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 'East'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !
!MarsRoverLogTest methodsFor: 'tests' stamp: 'cb 6/3/2023 15:36:26'!
test05MarsRoverTrackingPositionkjhfjgfhfh
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionkjhfjgfhfh stamp: 'cb 6/3/2023 15:36:28'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:37:13' overrides: 50628397!
updatesDirectionNorth
      ^self! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:41:24' overrides: 50628405!
updatesDirectionSouth
      ^self! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:41:39' overrides: 50628393!
updatesDirectionEast
      ^self! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 15:41:41' overrides: 50628401!
updatesDirectionWest
      ^self! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 15:41:58'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:41:58'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 15:41:58'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 15:41:58'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 15:41:58'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionkjhfjgfhfh stamp: 'cb 6/3/2023 15:41:58'!
PASSED!
!MarsRoverLogTest methodsFor: 'tests' stamp: 'cb 6/3/2023 15:42:27'!
test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!methodRemoval: MarsRoverLogTest #test05MarsRoverTrackingPositionkjhfjgfhfh stamp: 'cb 6/3/2023 15:42:27'!
test05MarsRoverTrackingPositionkjhfjgfhfh
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverPositionLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         self assert: theMarsRoverLog equals: marsRoverLog show !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:42:46'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 15:42:48'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 15:42:48'!
PASSED!
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:43:26' overrides: 50628430!
updatesDirectionNorth
     ^self! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:43:30' overrides: 50628425!
updatesDirectionSouth
     ^self! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:43:34' overrides: 50628410!
updatesDirectionEast
     ^self! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 15:43:37' overrides: 50628415!
updatesDirectionWest
     ^self! !

Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog lastPosition lastDirection marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 15:50:25'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog lastPosition lastDirection marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----SNAPSHOT----(3 June 2023 16:07:46) CuisUniversity-5832.image priorSource: 9465924!

----SNAPSHOT----(3 June 2023 16:07:52) CuisUniversity-5832.image priorSource: 9516219!

----QUIT----(3 June 2023 16:08:15) CuisUniversity-5832.image priorSource: 9516307!

----STARTUP---- (3 June 2023 19:40:46) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'cb 6/3/2023 20:05:40'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'changesLog marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:12:52' prior: 50627098!
updatesPosition
        changesLog add: marsRover position! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 20:12:56'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverLogTest #test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition stamp: 'cb 6/3/2023 20:12:58'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 20:12:59'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 20:12:59'!
PASSED!
!MarsRoverWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:13:48' prior: 50627901!
updatesPosition
       lastPositionChange := marsRover position! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 20:13:50'!
PASSED!

!classRemoval: #Observers stamp: 'cb 6/3/2023 20:27:56'!
Object subclass: #Observers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:30:31' prior: 50627144 overrides: 50629058!
updatesPosition
    
          ! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!testRun: #MarsRoverLogTest #test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition stamp: 'cb 6/3/2023 20:30:57'!
PASSED!

!classRenamed: #MarsRoverLog as: #MarsRoverDirectionAndPositionLog stamp: 'cb 6/3/2023 20:31:11'!
Smalltalk renameClassNamed: #MarsRoverLog as: #MarsRoverDirectionAndPositionLog!
!MarsRoverLogTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 20:31:11' prior: 50628829!
test05MarsRoverTrackingPositionAndDirection
         |aMarsRover marsRoverLog theMarsRoverLog|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverLog := MarsRoverDirectionAndPositionLog tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverLog := OrderedCollection new.
         theMarsRoverLog add: 1@2.
         theMarsRoverLog add: 'East'.
         self assert: theMarsRoverLog equals: marsRoverLog show ! !

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!testRun: #MarsRoverLogTest #test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition stamp: 'cb 6/3/2023 20:31:34'!
PASSED!

!classRenamed: #MarsRoverWindow as: #MarsRoverPositionAndDirectionWindow stamp: 'cb 6/3/2023 20:31:53'!
Smalltalk renameClassNamed: #MarsRoverWindow as: #MarsRoverPositionAndDirectionWindow!
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 20:31:54' prior: 50626251!
test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverPositionAndDirectionWindow tracking: aMarsRover.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: ''.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 20:31:54' prior: 50626357!
test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverPositionAndDirectionWindow tracking: aMarsRover.
         aMarsRover process: 'f'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: ''.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !
!MarsRoverWindowTest methodsFor: 'as yet unclassified' stamp: 'cb 6/3/2023 20:31:54' prior: 50626512!
test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection
         |aMarsRover marsRoverWindow theMarsRoverWindow|
         aMarsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
         marsRoverWindow := MarsRoverPositionAndDirectionWindow tracking: aMarsRover.
         aMarsRover process: 'fr'.
         theMarsRoverWindow := OrderedCollection new.
         theMarsRoverWindow add: 1@2.
         theMarsRoverWindow add: 'Apuntando al Este'.
         self assert: theMarsRoverWindow equals: marsRoverWindow show ! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:06' prior: 50628881 overrides: 50628401!
updatesDirectionWest
      ! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:10' prior: 50628871 overrides: 50628405!
updatesDirectionSouth
      ! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:14' prior: 50628866 overrides: 50628397!
updatesDirectionNorth
      ! !
!MarsRoverPositionLog methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:17' prior: 50628876 overrides: 50628393!
updatesDirectionEast
      ! !
!MarsRoverDirectionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:27' prior: 50627228 overrides: 50629168!
updatesPosition
	! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:32' prior: 50629014 overrides: 50628415!
updatesDirectionWest
  ! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:35' prior: 50629004 overrides: 50628425!
updatesDirectionSouth
    ! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:39' prior: 50628999 overrides: 50628430!
updatesDirectionNorth
     ! !
!MarsRoverPositionWindow methodsFor: 'changes' stamp: 'cb 6/3/2023 20:32:43' prior: 50629009 overrides: 50628410!
updatesDirectionEast
     ! !

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 20:33:03'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 20:33:05'!
PASSED!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

!testRun: #MarsRoverLogTest #test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition stamp: 'cb 6/3/2023 20:33:06'!
PASSED!

----QUIT----(3 June 2023 20:33:28) CuisUniversity-5832.image priorSource: 9516395!

----STARTUP---- (3 June 2023 20:36:38) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


!classRemoval: #MarsRoverWindowTest stamp: 'cb 6/3/2023 20:36:42'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverTest stamp: 'cb 6/3/2023 20:36:42'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverLogTest stamp: 'cb 6/3/2023 20:36:43'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverPositionWindow stamp: 'cb 6/3/2023 20:36:43'!
MarsRoverPositionAndDirectionWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionWindow stamp: 'cb 6/3/2023 20:36:43'!
MarsRoverPositionAndDirectionWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverPositionAndDirectionWindow stamp: 'cb 6/3/2023 20:36:43'!
Object subclass: #MarsRoverPositionAndDirectionWindow
	instanceVariableNames: 'lastPositionChange lastDirectionChange marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'cb 6/3/2023 20:36:43'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'cb 6/3/2023 20:36:44'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'cb 6/3/2023 20:36:44'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'cb 6/3/2023 20:36:44'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'cb 6/3/2023 20:36:44'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverPositionLog stamp: 'cb 6/3/2023 20:36:44'!
MarsRoverDirectionAndPositionLog subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionLog stamp: 'cb 6/3/2023 20:36:44'!
MarsRoverDirectionAndPositionLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionAndPositionLog stamp: 'cb 6/3/2023 20:36:45'!
Object subclass: #MarsRoverDirectionAndPositionLog
	instanceVariableNames: 'changesLog marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'cb 6/3/2023 20:36:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\MarsRoverdasdadsad.st----!

!testRun: #MarsRoverLogTest #test01MarsRoverTrackingPositionWithOneMovement stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverLogTest #test02MarsRoverTrackingPositionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverLogTest #test03MarsRoverTrackingDirectionWithOneMovement stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverLogTest #test04MarsRoverTrackingDirectionWithMoreThanOneMovement stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverLogTest #test05MarsRoverTrackingPositionAndDirection stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverLogTest #test06MarsRoverTrackingPositionWithMovementsInDirectionAndPosition stamp: 'cb 6/3/2023 20:37:48'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'cb 6/3/2023 20:37:49'!
PASSED!

!testRun: #MarsRoverWindowTest #test01MarsRoverWindowTrackingPositionWithNoMovement stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test02MarsRoverWindowTrackingPositionWithMovement stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test03MarsRoverWindowTrackingDirectionWithNoMovement stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test04MarsRoverWindowTrackingDirectionWithMovement stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test05MarsRoverWindowTrackingPositionAndDirectionWithNoMovement stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test06MarsRoverWindowTrackingPositionAndDirectionWithMovementInPosition stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!testRun: #MarsRoverWindowTest #test07MarsRoverWindowTrackingPositionAndDirectionWithMovementInDirection stamp: 'cb 6/3/2023 20:37:50'!
PASSED!

!classRemoval: #MarsRoverWindowTest stamp: 'cb 6/3/2023 20:37:54'!
TestCase subclass: #MarsRoverWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverTest stamp: 'cb 6/3/2023 20:37:54'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverLogTest stamp: 'cb 6/3/2023 20:37:55'!
TestCase subclass: #MarsRoverLogTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading-Test'!

!classRemoval: #MarsRoverPositionWindow stamp: 'cb 6/3/2023 20:37:55'!
MarsRoverPositionAndDirectionWindow subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionWindow stamp: 'cb 6/3/2023 20:37:55'!
MarsRoverPositionAndDirectionWindow subclass: #MarsRoverDirectionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverPositionAndDirectionWindow stamp: 'cb 6/3/2023 20:37:55'!
Object subclass: #MarsRoverPositionAndDirectionWindow
	instanceVariableNames: 'lastPositionChange lastDirectionChange marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'cb 6/3/2023 20:37:55'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'cb 6/3/2023 20:37:56'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'cb 6/3/2023 20:37:56'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'cb 6/3/2023 20:37:56'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'cb 6/3/2023 20:37:56'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverPositionLog stamp: 'cb 6/3/2023 20:37:56'!
MarsRoverDirectionAndPositionLog subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionLog stamp: 'cb 6/3/2023 20:37:56'!
MarsRoverDirectionAndPositionLog subclass: #MarsRoverDirectionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverDirectionAndPositionLog stamp: 'cb 6/3/2023 20:37:57'!
Object subclass: #MarsRoverDirectionAndPositionLog
	instanceVariableNames: 'changesLog marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'cb 6/3/2023 20:37:57'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----QUIT----(3 June 2023 20:38:00) CuisUniversity-5832.image priorSource: 9531108!

----STARTUP---- (8 June 2023 12:23:25) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\TerseGuide.pck.st----!

----STARTUP---- (8 June 2023 19:45:30) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'cb 6/8/2023 19:46:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'cb 6/8/2023 19:49:07'!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart catalogo|
         anEmptyCart := Cart acceptingItemsOf: catalogo! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'cb 6/8/2023 19:53:39'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:53:31' prior: 50633968!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart catalogo|
         anEmptyCart := Cart acceptingItemsOf: catalogo.
         self 
		should: [Cashier checkOut: anEmptyCart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 19:53:48'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 19:54:07'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:54:26' prior: 50633982!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart catalogo|
         anEmptyCart := Cart createCart.
         self 
		should: [Cashier checkOut: anEmptyCart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:55:21'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:55:33'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:55:46'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:55:59'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 19:58:24' prior: 50634001!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [Cashier checkOut: anEmptyCart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 19:58:27'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 19:59:03'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 19:59:11'!
checkOut: anEmptyCart 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 19:59:34' prior: 50634050!
checkOut: aCart 
	^self error: self invalidCartToCheckOut! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:00:02'!
invalidCartToCheckOut
     ^'The cart is empty'! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:00:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:00:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:07:10'!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         self assert: 40 equals: Cashier checkOut: aCart.
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:07:52' prior: 50634071!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: self itemSellByTheStore.
         self assert: 40 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:10:28'!
defaultPriceList
	
	^Dictionary add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:10:47' prior: 50634017!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'cb 6/8/2023 20:10:56'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:11:26' prior: 50634080!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         self assert: 40 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:12:16' prior: 50634107!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         self assert: 345 equals: (Cashier checkOut: aCart with: self defaultPriceList).
	
		
		! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:13:16'!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:16:08' prior: 50634127!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	^aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: aBook value]
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:16:10'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:16:10'!
ERROR!

!methodRemoval: Cashier class #checkOut: stamp: 'cb 6/8/2023 20:16:19'!
checkOut: aCart 
	^self error: self invalidCartToCheckOut!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:17:40' prior: 50634134!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	^aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: [aPriceList valueAt: aBook]]
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:17:42'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:17:42'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:18:27' prior: 50634154!
checkOut: aCart with: aPriceList
       |totalPrice| 
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	^aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: [totalPrice := totalPrice + aPriceList valueAt: aBook]]
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:18:38' prior: 50634170!
checkOut: aCart with: aPriceList
       |totalPrice| 
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: [totalPrice := totalPrice + aPriceList valueAt: aBook]]
	^totalPrice
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:18:48' prior: 50634181!
checkOut: aCart with: aPriceList
       |totalPrice| 
        totalPrice := 0.
	aCart isEmpty ifTrue: [self error: self invalidCartToCheckOut].
	aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: [totalPrice := totalPrice + aPriceList valueAt: aBook]]
	^totalPrice
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:18:50'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:18:50'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:19:01' prior: 50634192!
checkOut: aCart with: aPriceList
       |totalPrice| 
        totalPrice := 0.
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	aPriceList keys do: [:aBook | (aCart includes: aBook) ifTrue: [totalPrice := totalPrice + aPriceList valueAt: aBook]]
	^totalPrice
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:19:02'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:19:02'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:19:27'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:19:27'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:20:09' prior: 50634090!
defaultPriceList
	
	^Dictionary new add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:20:10'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:20:10'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:20:14' prior: 50634236!
defaultPriceList
	
	^Dictionary new; add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:20:15'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:20:15'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:20:20'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:20:20'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:20:53' prior: 50634250!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:20:58'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:20:58'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:21:01'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:21:01'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:21:24' prior: 50634032!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [Cashier checkOut: anEmptyCart with: self defaultPriceList]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:21:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:21:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:21:25'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:21:25'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:23:16' prior: 50634211!
checkOut: aCart with: aPriceList
       |totalPrice| 
        totalPrice := 0.
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	aCart listCart 
	! !
!Cart methodsFor: 'initialization' stamp: 'cb 6/8/2023 20:24:03'!
listCart
      ^items! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:24:51' prior: 50634318!
checkOut: aCart with: aPriceList
       |totalPrice| 
        totalPrice := 0.
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aPriceList keyAt: (aCart listCart) 
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:24:59' prior: 50634330!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aPriceList keyAt: (aCart listCart) 
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:25:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:25:01'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:25:01'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:27:35' prior: 50634339!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aPriceList valueAt: (aCart listCart) 
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:27:36'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:27:36'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:27:36'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:28:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:28:25'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:28:25'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'cb 6/8/2023 20:29:06' prior: 50633795!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:29:10'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:29:10'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/8/2023 20:29:59' prior: 50634357!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aPriceList associationAt: (aCart listCart) 
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/8/2023 20:30:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:30:01'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:30:01'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/8/2023 20:30:26' prior: 50634270!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:30:29'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/8/2023 20:30:29'!
ERROR!

----QUIT----(9 June 2023 09:12:52) CuisUniversity-5832.image priorSource: 9574174!

----STARTUP---- (9 June 2023 17:07:19) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:08:31'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:08:45'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:08:45'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:08:52'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 17:10:09'!
checkOut: aCart 
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aCart totalPriceFor: self
	! !

!methodRemoval: Cart #listCart stamp: 'cb 6/9/2023 17:10:24'!
listCart
      ^items!
!Cart methodsFor: 'error messages' stamp: 'cb 6/9/2023 17:11:24'!
totalPriceFor: aCashier
        ^items inject: 0 into: [].! !
!Cart methodsFor: 'queries' stamp: 'cb 6/9/2023 17:13:43' prior: 50634461!
totalPriceFor: aCashier
        ^items inject: 0 into: [:partialSum :item | catalog associationAt: item] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/9/2023 17:13:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 17:13:46'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/9/2023 17:13:46'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/9/2023 17:13:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/9/2023 17:13:46'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/9/2023 17:13:46'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/9/2023 17:13:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/9/2023 17:13:46'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'cb 6/9/2023 17:14:09' prior: 50634466!
totalPriceFor: aCashier
        ^items inject: 0 into: [:partialSum :item | partialSum + catalog associationAt: item] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/9/2023 17:14:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 17:14:10'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/9/2023 17:14:10'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/9/2023 17:14:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/9/2023 17:14:10'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/9/2023 17:14:10'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/9/2023 17:14:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/9/2023 17:14:10'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:14:17'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:14:17'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:14:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:14:28'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:14:28'!
ERROR!

!methodRemoval: Cashier class #checkOut:with: stamp: 'cb 6/9/2023 17:14:41'!
checkOut: aCart with: aPriceList
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aPriceList associationAt: (aCart listCart) 
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:14:51' prior: 50634117!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         self assert: 345 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:14:59' prior: 50634291!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [Cashier checkOut: anEmptyCart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:15:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:15:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:15:01'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:15:01'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:15:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:15:08'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:15:08'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:22:31'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:22:31'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:22:31'!
FAILURE!

|priceList|
priceList := Dictionary new.
priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself.!

priceList associationAt: 'firstBook'!

priceList at: 'firstBook'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\TerseGuide.pck.st----!

priceList at: #'firstBook'!

priceList at: 'firstBook' ifAbsent: []!

 |priceList|
priceList := Dictionary new.
priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself.
priceList at: 'firstBook' ifAbsent: []!
!Cart methodsFor: 'queries' stamp: 'cb 6/9/2023 17:26:34' prior: 50634497!
totalPriceFor: aCashier
        ^items inject: 0 into: [:partialSum :item | partialSum + catalog at: item] .! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:26:37'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:26:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:27:51'!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self assert: 345 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:27:53' prior: 50637557!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self assert: 345 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:28:08' prior: 50637569!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self assert: 790 equals: (Cashier checkOut: aCart).
	
		
		! !

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:28:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:33:35'!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self assert: 790 equals: (Cashier checkOut: aCart).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:34:27' prior: 50637597!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self 
		should: [ | aCreditCard |Cashier checkOut: aCart charging: aCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'cb 6/9/2023 17:41:48'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:41:43' prior: 50637609!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart aCreditCart  anExpiredDate|
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         aCreditCart := CreditCard createMethodVariableTypeInfoOf: '' in: anExpiredDate are: '1111111111111111'.
         self 
		should: [ | aCreditCard |Cashier checkOut: aCart charging: aCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:42:23'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 17:42:40'!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aCart totalPriceFor: self
	! !

!methodRemoval: Cashier class #checkOut: stamp: 'cb 6/9/2023 17:42:51'!
checkOut: aCart 
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
	^aCart totalPriceFor: self
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:43:27' prior: 50634564!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [ | aCreditCard |Cashier checkOut: anEmptyCart charging: aCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

Object subclass: #ObjectForTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ObjectForTest category: 'TusLibros' stamp: 'cb 6/9/2023 17:44:09'!
Object subclass: #ObjectForTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ObjectForTest methodsFor: 'no messages' stamp: 'cb 6/9/2023 17:44:59'!
aValidCreditCart
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:45:33' prior: 50637675!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest new aValidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:45:49' prior: 50637710!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := self createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest new aValidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:46:06'!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !

!methodRemoval: ObjectForTest #aValidCreditCart stamp: 'cb 6/9/2023 17:46:06'!
aValidCreditCart
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:46:22'!
aExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:46:36'!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: '' in: anExpiredDate are: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:46:50'!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:46:54' prior: 50637778!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:47:01' prior: 50637768!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createMethodVariableTypeInfoOf: '' in: anExpiredDate are: '1111111111111111'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:47:52' prior: 50637633!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
      
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anInvalidNameCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:47:57'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:48:00'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:48:02'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:48:02'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:48:15' prior: 50634554!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest new aValidCreditCard).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:48:21' prior: 50637581!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
         self assert: 790 equals: (Cashier checkOut: aCart charging: ObjectForTest new aValidCreditCard).
	
		
		! !

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:48:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:48:23'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:48:23'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:48:23'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:48:23'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:48:23'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:48:27'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:48:28'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:48:30'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:48:30'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 17:51:17' prior: 50637661!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:51:18'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:51:18'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:51:18'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:51:18'!
ERROR!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:52:29' prior: 50637789!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.! !
!CreditCard class methodsFor: 'no messages' stamp: 'cb 6/9/2023 17:53:40'!
createCardFor: aName expired: anExpiredDate withDigits: creditCardDigits
    ^self new initializeCreateCardFor: aName expired: anExpiredDate withDigits: creditCardDigits! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'cb 6/9/2023 17:54:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'cb 6/9/2023 17:54:42'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expiredDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'cb 6/9/2023 17:54:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expiredDate digits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'no messages' stamp: 'cb 6/9/2023 17:54:40'!
initializeCreateCardFor: aName expired: anExpiredDate withDigits: creditCardDigits
       name := aName.
       expiredDate := anExpiredDate.
       digits := creditCardDigits! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:54:54' overrides: 16903442!
name
       ^name! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:54:59' prior: 50637978 overrides: 16903442!
name
       ^name! !

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:55:06'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:55:06'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:55:10'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:55:10'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 17:55:58'!
invalidCardToCheckOut
      ^'invalid card'
	! !

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:56:04'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:56:04'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:56:45'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:56:45'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 17:57:19' prior: 50637905!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:57:22'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:57:22'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:57:22'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:57:22'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:57:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:57:32'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:57:32'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 17:58:19' prior: 50637983 overrides: 16903442!
name
       ^name copy! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 17:58:26'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:58:26'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 17:58:26'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 17:58:26'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:58:28'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:58:39'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:59:18'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 17:59:24'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:00:39'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:00:39'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:01:00'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:01:46'!
ERROR!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:03:33' prior: 50637738!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:03:50' prior: 50637800!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:03:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:03:52'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:03:52'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:03:52'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:04:32'!
test04CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
      
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anInvalidDigitsCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:05:09'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:05:58' prior: 50638021!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ((aCreditCard digits size) = 16) ifTrue: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:06:22'!
digits 
      ^digits copy! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:06:36'!
test05CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
      
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anInvalidDigitsCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!methodRemoval: CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:06:36'!
test04CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
      
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anInvalidDigitsCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:06:41'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:06:41'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:07:05' prior: 50638162!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ((aCreditCard digits size) = 16) ifFalse: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:07:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:07:41'!
test06CanNotCheckOutACartChargingAnExpiredCard
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
      
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anExpiredCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:07:57'!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !

!methodRemoval: ObjectForTest #aExpiredCreditCard stamp: 'cb 6/9/2023 18:07:57'!
aExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:22:40' prior: 50638223!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ((aCreditCard digits size) = 16) ifFalse: [^self error: self invalidCardToCheckOut].
         self isCreditCardValid: aCreditCard ifF: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:24:17'!
isValidCreditCard: aCreditCard
       ! !

may/2009!

GregorianMonthOfYear current!

(GregorianMonthOfYear current) < (GregorianMonthOfYear aprilOf: 2023) !

(GregorianMonthOfYear current) < (GregorianMonthOfYear aprilOf: 2023) !

GregorianMonthOfYear current < GregorianMonthOfYear novemberOf: 2023!

(GregorianMonthOfYear current) < (GregorianMonthOfYear novemberOf: 2023)!

GregorianMonthOfYear current!

GregorianMonthOfYear novemberOf: 2023!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:33:25'!
expiredDate
      ^expiredDate! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:34:39' prior: 50638278!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ((aCreditCard digits size) = 16) ifFalse: [^self error: self invalidCardToCheckOut].
       (( GregorianMonthOfYear current) < (aCreditCard expiredDate)) ifFalse: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:34:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:34:40'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:34:40'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:34:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:34:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:34:40'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:34:40'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:34:56' prior: 50638315!
checkOut: aCart charging: aCreditCard
	aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (aCreditCard name isEmpty) ifTrue: [^self error: self invalidCardToCheckOut].
        ((aCreditCard digits size) = 16) ifFalse: [^self error: self invalidCardToCheckOut].
       ((GregorianMonthOfYear current) < (aCreditCard expiredDate)) ifFalse: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:34:58'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:34:58'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:34:58'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:34:58'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:34:58'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:34:58'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:34:58'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:35:13'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:35:13'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:36:09'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:36:09'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:36:18'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:36:19'!
PASSED!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:37:44' prior: 50637930!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: 2024.
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:37:52' prior: 50638116!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: 2024.
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:38:00' prior: 50638257!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: 2022.
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:38:09' prior: 50638105!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: 2024.
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:38:23'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:38:23'!
ERROR!

(GregorianMonthOfYear current) < (GregorianMonthOfYear novemberOf: 2023).!

(GregorianMonthOfYear current) < (GregorianMonthOfYear novemberOf: 2023).
!

(GregorianMonthOfYear current) < (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2023)).
!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:40:37' prior: 50638441!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createMethodVariableTypeInfoOf: 'noe' in: anExpiredDate are: '1111111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:40:51' prior: 50638421!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:41:00' prior: 50638431!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:41:06'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:41:06'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:41:23'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:41:23'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:41:32'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:42:42'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:42:42'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:42:51'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:42:51'!
ERROR!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:43:56' prior: 50638476!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'! !

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:44:01'!
PASSED!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:44:57' prior: 50638357!
checkOut: aCart charging: aCreditCard
        self isValidCreditCard:  aCreditCard ifFalse: [^self error: self invalidCartToCheckOut].
	
        ^aCart totalPriceFor: self
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:45:00' prior: 50638554!
checkOut: aCart charging: aCreditCard
        self isValidCreditCard:  aCreditCard ifFalse: [^self error: self invalidCartToCheckOut].
	
        ^aCart totalPriceFor: self
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:46:12'!
isValidName: aCreditCard
       ^aCreditCard name isEmpty ! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:46:59'!
isValidDate: aCreditCard
       ^(GregorianMonthOfYear current) < (aCreditCard expiredDate)! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:47:30'!
isValidDigits: aCreditCard
        ^(aCreditCard digits size) = 16! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:48:32' prior: 50638294!
isValidCreditCard: aCreditCard
       ^(self isValidDigits: aCreditCard) or: (self isValidName: aCreditCard) or: (self isValidDate: aCreditCard) ! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:48:50' prior: 50638563!
checkOut: aCart charging: aCreditCard
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCartToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:48:52'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:48:52'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:48:52'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:48:52'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:48:52'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:48:52'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:49:00'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:49:00'!
ERROR!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:49:23' prior: 50638587!
isValidCreditCard: aCreditCard
       ^((self isValidDigits: aCreditCard) or: (self isValidName: aCreditCard)) or: (self isValidDate: aCreditCard) ! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:49:25'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:49:25'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:49:25'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:49:25'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:49:25'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:49:25'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:50:40'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:50:40'!
ERROR!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:51:18' prior: 50638451!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:51:27'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:51:27'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:51:27'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:51:27'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:51:27'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:51:27'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:51:49' prior: 50638595!
checkOut: aCart charging: aCreditCard
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:52:10' prior: 50638699!
checkOut: aCart charging: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut].
        ^aCart totalPriceFor: self
	! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:52:11'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:52:11'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:52:11'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:52:11'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:52:11'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:52:11'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:52:21'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:52:42' prior: 50638571!
isValidName: aCreditCard
       ^aCreditCard name isEmpty not! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:52:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:52:44'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:52:44'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:52:44'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:52:44'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:52:44'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:52:55'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:52:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:52:58'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:52:59'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:52:59'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:54:17'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:54:17'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:54:32'!
FAILURE!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:54:32'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:54:36'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:54:36'!
FAILURE!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:55:19' prior: 50638631!
isValidCreditCard: aCreditCard
       ^((self isValidDigits: aCreditCard) and: (self isValidName: aCreditCard)) and: (self isValidDate: aCreditCard) ! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:55:21'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:55:21'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:55:21'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:55:21'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:55:21'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:55:21'!
PASSED!
!Cashier class methodsFor: 'category-name' stamp: 'cb 6/9/2023 18:56:56'!
validForCheckOut: aCart with: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut].
        ^self checkOut
	! !

!methodRemoval: Cashier class #validForCheckOut:with: stamp: 'cb 6/9/2023 18:57:11'!
validForCheckOut: aCart with: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut].
        ^self checkOut
	!
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:57:40'!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:58:28'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:58:45' prior: 50637724!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := ObjectForTest new createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest new aValidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 18:58:47'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 18:58:47'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 18:59:27' prior: 50637854!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := ObjectForTest new aCarWithMoreThanOneItem.
         self assert: 790 equals: (Cashier checkOut: aCart charging: ObjectForTest new aValidCreditCard).
	
		
		! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:00:26'!
aCartWithMoreThanOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
       ^aCart! !
!ObjectForTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:00:36'!
aCartWithOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
       ^aCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:00:50' prior: 50638875!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := ObjectForTest createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest new aValidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:01:14'!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself! !

!methodRemoval: ObjectForTest #defaultPriceList stamp: 'cb 6/9/2023 19:01:14'!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:01:24'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:01:24'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:01:24'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:01:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:01:24'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:01:24'!
PASSED!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:02:19'!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.! !

!methodRemoval: ObjectForTest #anInvalidDigitsCreditCard stamp: 'cb 6/9/2023 19:02:19'!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:02:28'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !

!methodRemoval: ObjectForTest #createCart stamp: 'cb 6/9/2023 19:02:28'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:02:45'!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.! !

!methodRemoval: ObjectForTest #anInvalidNameCreditCard stamp: 'cb 6/9/2023 19:02:45'!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:02:51'!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !

!methodRemoval: ObjectForTest #aValidCreditCard stamp: 'cb 6/9/2023 19:02:51'!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:02:57'!
aCartWithMoreThanOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
       ^aCart! !

!methodRemoval: ObjectForTest #aCartWithMoreThanOneItem stamp: 'cb 6/9/2023 19:02:57'!
aCartWithMoreThanOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
         aCart add: 'firstBook'.
         aCart add: 'secondBook'.
       ^aCart!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:03:03'!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'! !

!methodRemoval: ObjectForTest #anExpiredCreditCard stamp: 'cb 6/9/2023 19:03:03'!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2022).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:03:16'!
aCartWithOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
       ^aCart! !

!methodRemoval: ObjectForTest #aCartWithOneItem stamp: 'cb 6/9/2023 19:03:16'!
aCartWithOneItem
       |aCart|
        aCart := self createCart.
        aCart add: 'firstBook'.
       ^aCart!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:03:23'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:03:23'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:03:23'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:03:23'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:03:23'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:03:23'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:03:30' prior: 50638941!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := ObjectForTest createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest aValidCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:03:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:03:32'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:03:32'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:03:32'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:03:32'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:03:32'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:03:32'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:03:38' prior: 50637843!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := self createCart.
         aCart add: 'firstBook'.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:04:06' prior: 50639174!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.

         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:04:09' prior: 50639185!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:04:24' prior: 50638914!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self assert: 790 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:04:53' prior: 50637811!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem. 
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest new anInvalidNameCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:04:57' prior: 50639218!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem. 
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anInvalidNameCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:05:24' prior: 50638179!
test05CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anInvalidDigitsCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'cb 6/9/2023 19:05:49' prior: 50638240!
test06CanNotCheckOutACartChargingAnExpiredCard
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anExpiredCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:05:54'!
PASSED!

!methodRemoval: CashierTest #createCart stamp: 'cb 6/9/2023 19:06:21'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList!

!methodRemoval: CashierTest #defaultPriceList stamp: 'cb 6/9/2023 19:06:24'!
defaultPriceList
        |priceList|
	priceList := Dictionary new.
	^priceList add: 'firstBook' -> 345; add: 'secondBook' -> 100; add: 'thirdBook' -> 32; yourself!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:06:28'!
PASSED!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'cb 6/9/2023 19:06:41'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/9/2023 19:06:45'!
PASSED!

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'cb 6/9/2023 19:06:48'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/9/2023 19:06:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 19:06:58'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/9/2023 19:06:58'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/9/2023 19:06:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/9/2023 19:06:58'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/9/2023 19:06:58'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/9/2023 19:06:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/9/2023 19:06:58'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/9/2023 19:07:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 19:07:50'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 19:07:50'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'cb 6/9/2023 19:08:10' prior: 50634385!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/9/2023 19:08:13'!
PASSED!

----QUIT----(9 June 2023 21:58:45) CuisUniversity-5832.image priorSource: 9689005!

----STARTUP---- (11 June 2023 19:09:04) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!

!CreditCard methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:14:08' prior: 50638311!
expiredDate
      ^expiredDate copy! !

TestCase subclass: #SimuladorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SimuladorMerchantProcessorTest category: 'TusLibros' stamp: 'cb 6/11/2023 19:22:53'!
TestCase subclass: #SimuladorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #SimulatorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SimulatorMerchantProcessorTest category: 'TusLibros' stamp: 'cb 6/11/2023 19:23:21'!
TestCase subclass: #SimulatorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SimuladorMerchantProcessorTest stamp: 'cb 6/11/2023 19:23:25'!
TestCase subclass: #SimuladorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SimulatorMerchantProcessorTest methodsFor: 'no messages' stamp: 'cb 6/11/2023 19:24:08'!
test01CheckOutACartCharging
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).! !
!SimulatorMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:25:09'!
test01CanNotCheckOutACartChargingACardWithNoMoney
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).! !

!methodRemoval: SimulatorMerchantProcessorTest #test01CheckOutACartCharging stamp: 'cb 6/11/2023 19:25:12'!
test01CheckOutACartCharging
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 345 equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).!

!classDefinition: #SimulatorMerchantProcessor category: 'TusLibros' stamp: 'cb 6/11/2023 19:32:03'!
Object subclass: #SimulatorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SimulatorMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:31:58' prior: 50639483!
test01CanNotCheckOutACartChargingACardWithNoMoney
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest aValidCreditCardWithNoMoney ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SimulatorMerchantProcessor cardWithNoMoney.]! !
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:32:44'!
aValidCreditCardWithNoMoney
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1112111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:32:56'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:32:56'!
ERROR!
!Cashier class methodsFor: 'operation' stamp: 'cb 6/11/2023 19:34:59' prior: 50638708!
checkOut: aCart charging: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut]. 
         ^SimulatorMerchantProcessor debit: (aCart totalPriceFor: self) from: aCreditCard
       
	! !
!SimulatorMerchantProcessor class methodsFor: 'no messages' stamp: 'cb 6/11/2023 19:36:29'!
debit: aTotalAmountOfACart from: aCreditCard
     ^self card! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:36:46' prior: 50639558!
debit: aTotalAmountOfACart from: aCreditCard
     ^self cardWithNoMoney! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:37:06'!
cardWithNoMoney
     ^'no money in account'! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:37:09'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:37:09'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:37:16'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:37:16'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 19:37:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:37:25'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:37:29'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:38:07'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:38:07'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 19:38:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:38:28'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 19:38:28'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 19:38:28'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 19:38:28'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 19:38:28'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 19:38:40'!
ERROR!

aCart := ObjectForTest aCartWithMoreThanOneItem!

ObjectForTest aCartWithMoreThanOneItem!

ObjectForTest aCartWithMoreThanOneItem !
!Cart methodsFor: 'assertions' stamp: 'cb 6/11/2023 19:41:52' prior: 50639398!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 19:42:00'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:42:00'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 19:42:00'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 19:42:00'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 19:42:00'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 19:42:00'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:42:02'!
FAILURE!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:42:10'!
FAILURE!
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:43:09' prior: 50639564!
debit: aTotalAmountOfACart from: aCreditCard
     ^(aCreditCard =  ObjectForTest aValidCreditCardWithNoMoney) ifTrue: [^self cardWithNoMoney].! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:43:11'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:43:11'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:43:18'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:43:18'!
FAILURE!
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:44:01' prior: 50639694!
debit: aTotalAmountOfACart from: aCreditCard
     ^(aCreditCard =  ObjectForTest aValidCreditCardWithNoMoney) ifTrue: [^self error:  self cardWithNoMoney].! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:44:03'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:44:03'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 19:44:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:44:06'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 19:44:06'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 19:44:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 19:44:06'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 19:44:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 19:44:08'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 19:44:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 19:44:19'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 19:44:19'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 19:44:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 19:44:19'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 19:44:19'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 19:44:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 19:44:19'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 19:44:22'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:44:36'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:44:36'!
FAILURE!

 Cashier checkOut: aCart charging: ObjectForTest aValidCreditCardWithNoMoney !

|aCart| 
aCart := ObjectForTest aCartWithOneItem.
 Cashier checkOut: aCart charging: ObjectForTest aValidCreditCardWithNoMoney !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:47:45' prior: 50639720!
debit: aTotalAmountOfACart from: aCreditCard
     ^(aCreditCard =  (ObjectForTest aValidCreditCardWithNoMoney)) ifTrue: [^self error: self cardWithNoMoney].! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:47:47'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:47:47'!
FAILURE!

ObjectForTest aValidCreditCardWithNoMoney = ObjectForTest aValidCreditCardWithNoMoney!

ObjectForTest aValidCreditCardWithNoMoney = ObjectForTest aValidCreditCardWithNoMoney !

ObjectForTest aValidCreditCardWithNoMoney!

ObjectForTest aValidCreditCardWithNoMoney !
!CreditCard methodsFor: 'accesing' stamp: 'cb 6/11/2023 19:55:35' overrides: 16901772!
= anOtherCreditCard
    ^((name = anOtherCreditCard name) and: (digits = anOtherCreditCard digits)) and: (expiredDate = anOtherCreditCard expiredDate)
! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:55:39'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:55:42'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:56:47'!
PASSED!
!SimulatorMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:57:49'!
test02CanNotCheckOutACartChargingAStolenCard
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest aValidStolenCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SimulatorMerchantProcessor cardWithNoMoney.]! !

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 19:57:53'!
ERROR!
!ObjectForTest class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 19:58:15'!
aValidStolenCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear createYear: 2024).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1113111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 19:58:38'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 19:58:38'!
FAILURE!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 19:58:38'!
FAILURE!
!SimulatorMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:00:09' prior: 50639853!
test02CanNotCheckOutACartChargingAStolenCard
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest aValidStolenCreditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SimulatorMerchantProcessor stolenCardErrorDescription.]! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:00:35'!
stolenCardErrorDescription
     ^'the card is stolen'! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:01:43' prior: 50639807!
debit: aTotalAmountOfACart from: aCreditCard
     (aCreditCard =  (ObjectForTest aValidCreditCardWithNoMoney)) ifTrue: [^self error: self cardWithNoMoney].
       (aCreditCard =  (ObjectForTest aValidStolenCreditCard )) ifTrue: [^self error: self stolenCardErrorDescription].! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:01:44'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:01:44'!
PASSED!
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:02:49' prior: 50639917!
debit: aTotalAmountOfACart from: aCreditCard
     (aCreditCard =  (ObjectForTest aValidCreditCardWithNoMoney)) ifTrue: [^self error: self cardWithNoMoney].
      (aCreditCard =  (ObjectForTest aValidStolenCreditCard)) ifTrue: [^self error: self stolenCardErrorDescription].! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:11:57'!
debit: aTotalAmountOfACart from: aCreditCard cameFrom: aCart
     (aCreditCard =  (ObjectForTest aValidCreditCardWithNoMoney)) ifTrue: [^self error: self cardWithNoMoney].
      (aCreditCard =  (ObjectForTest aValidStolenCreditCard)) ifTrue: [^self error: self stolenCardErrorDescription].
       ^aCart chargeHasBeenDoneCorrectly.! !

!methodRemoval: SimulatorMerchantProcessor class #debit:from: stamp: 'cb 6/11/2023 20:12:01'!
debit: aTotalAmountOfACart from: aCreditCard
     (aCreditCard =  (ObjectForTest aValidCreditCardWithNoMoney)) ifTrue: [^self error: self cardWithNoMoney].
      (aCreditCard =  (ObjectForTest aValidStolenCreditCard)) ifTrue: [^self error: self stolenCardErrorDescription].!
!Cashier class methodsFor: 'operation' stamp: 'cb 6/11/2023 20:12:14' prior: 50639545!
checkOut: aCart charging: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut]. 
         ^SimulatorMerchantProcessor debit: (aCart totalPriceFor: self) from: aCreditCard cameFrom: self
       
	! !
!Cashier class methodsFor: 'operation' stamp: 'cb 6/11/2023 20:13:08'!
chargeHasBeenDoneCorrectly
     ^'debit has been done'
       
	! !
!SimulatorMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:14:41'!
test03CheckOutACartChargingAValidCreditCard
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
		! !

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:14:42'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:14:42'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:14:42'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:14:42'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:16:06'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:16:06'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:16:06'!
PASSED!
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:17:42'!
assertCardIsNotStolen: aCreditCard
      (aCreditCard = ObjectForTest aValidStolenCreditCard) ifTrue:
                                                  [self error: self stolenCardErrorDescription].
      ! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:18:13'!
assertCardHasCredit: aCreditCard
      (aCreditCard = ObjectForTest aValidCreditCardWithNoMoney ) ifTrue:
                                                  [self error: self cardWithNoMoney].
      ! !
!SimulatorMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'cb 6/11/2023 20:18:47' prior: 50639950!
debit: aTotalAmountOfACart from: aCreditCard cameFrom: aCart
        self assertCardHasCredit: aCreditCard.
        self assertCardIsNotStolen: aCreditCard.
       ^aCart chargeHasBeenDoneCorrectly.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:18:49'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:18:49'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:18:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:21:17'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:21:17'!
FAILURE!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:21:17'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:21:17'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:21:17'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:21:17'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:21:52' prior: 50639196!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:22:02'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:22:02'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:22:02'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:22:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:22:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:22:02'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:22:02'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:22:21' prior: 50639207!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard).
	
		
		! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:22:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:22:24'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:22:24'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:22:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:22:24'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:22:24'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:22:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:22:24'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:22:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:22:52'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:22:52'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:22:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:22:52'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:22:52'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:22:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:22:52'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:22:55'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:24:16' prior: 50633901!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := ObjectForTest createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:24:17'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:24:34' prior: 50640198!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := ObjectForTest createCart.
	
	cart add: 'firstBook'.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:24:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:24:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:24:35'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:24:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:24:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:24:35'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:24:35'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:24:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:24:35'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:24:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:24:55'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:24:55'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:25:31' prior: 50633896!
test01NewCartsAreCreatedEmpty

	self assert: ObjectForTest emptyCart isEmpty! !
!ObjectForTest class methodsFor: 'cart' stamp: 'cb 6/11/2023 20:25:45'!
emptyCart
	
	^self createCart! !
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:26:26' prior: 50633874!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	self 
		should: [ cart add: 'otherBook' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:26:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:26:32'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:26:43' prior: 50640209!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	cart add: 'firstBook'.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:26:45'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:27:14' prior: 50633861!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	self 
		should: [cart add: 0 of: 'firstBook' ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:27:16'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:27:16'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:27:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:27:16'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:27:20'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:27:41' prior: 50633916!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	self 
		should: [cart add: 2 of: 'otherBook'  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:27:43'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:28:11' prior: 50633929!
test06CartRemembersAddedItems

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	cart add: 'firstBook'.
	self assert: (cart includes: 'firstBook')! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:28:14'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:28:53' prior: 50633909!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	self deny: (cart includes: 'firstBook')! !

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:28:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:28:54'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:28:54'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:28:59'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:29:27' prior: 50633887!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := ObjectForTest emptyCart.
	
	cart add: 2 of: 'firstBook'.
	self assert: (cart occurrencesOf: 'firstBook') = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:29:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:29:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:29:34'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:29:37'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:29:37'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:29:37'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'cb 6/11/2023 20:29:44'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'cb 6/11/2023 20:29:45'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'cb 6/11/2023 20:29:47'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'cb 6/11/2023 20:29:48'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:29:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:31:25'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:31:29'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:31:29'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:31:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:31:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:31:31'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'cb 6/11/2023 20:37:25' prior: 50637544!
totalPriceFor: aCashier
        ^items sum: [:anItem | catalog at: anItem] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:37:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:37:28'!
PASSED!
!Cashier class methodsFor: 'validation' stamp: 'cb 6/11/2023 20:47:15'!
isValidDate: aCreditCard comparing: aDate
       ^aDate < (aCreditCard expiredDate)! !

!methodRemoval: Cashier class #isValidDate: stamp: 'cb 6/11/2023 20:48:04'!
isValidDate: aCreditCard
       ^(GregorianMonthOfYear current) < (aCreditCard expiredDate)!
!Cashier class methodsFor: 'operation' stamp: 'cb 6/11/2023 20:49:02'!
checkOut: aCart charging: aCreditCard on: aDate
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard comparing: aDate) ifFalse: [^self error: self invalidCardToCheckOut]. 
         ^SimulatorMerchantProcessor debit: (aCart totalPriceFor: self) from: aCreditCard cameFrom: self
       
	! !

!methodRemoval: Cashier class #checkOut:charging: stamp: 'cb 6/11/2023 20:49:37'!
checkOut: aCart charging: aCreditCard
        aCart isEmpty ifTrue: [^self error: self invalidCartToCheckOut].
        (self isValidCreditCard: aCreditCard) ifFalse: [^self error: self invalidCardToCheckOut]. 
         ^SimulatorMerchantProcessor debit: (aCart totalPriceFor: self) from: aCreditCard cameFrom: self
       
	!
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:49:58' prior: 50639135!
test01CanNotCheckOutAnEmptyCart
        |anEmptyCart |
         anEmptyCart := ObjectForTest createCart.
         self 
		should: [ Cashier checkOut: anEmptyCart charging: ObjectForTest aValidCreditCard on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartToCheckOut.]! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:11' prior: 50640096!
test02CheckOutACartWithOneItemShouldReturnItemsPrice
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard  on: GregorianMonthOfYear current).
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:16' prior: 50640133!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard  on: GregorianMonthOfYear current).
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:18' prior: 50640672!
test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard on: GregorianMonthOfYear current).
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:26' prior: 50639234!
test04CanNotCheckOutACartChargingACardWithAnInvalidName
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem. 
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anInvalidNameCreditCard on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:32' prior: 50639249!
test05CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anInvalidDigitsCreditCard  on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:33' prior: 50640712!
test05CanNotCheckOutACartChargingACardWithAnInvalidDigits
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anInvalidDigitsCreditCard on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!CashierTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:39' prior: 50639265!
test06CanNotCheckOutACartChargingAnExpiredCard
        |aCart |
         aCart := ObjectForTest aCartWithMoreThanOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest anExpiredCreditCard on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardToCheckOut.]
	
		
		! !
!SimulatorMerchantProcessorTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:44' prior: 50639511!
test01CanNotCheckOutACartChargingACardWithNoMoney
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest aValidCreditCardWithNoMoney on: GregorianMonthOfYear current ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SimulatorMerchantProcessor cardWithNoMoney.]! !
!SimulatorMerchantProcessorTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:50' prior: 50639896!
test02CanNotCheckOutACartChargingAStolenCard
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self 
		should: [ Cashier checkOut: aCart charging: ObjectForTest aValidStolenCreditCard on: GregorianMonthOfYear current]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SimulatorMerchantProcessor stolenCardErrorDescription.]! !
!SimulatorMerchantProcessorTest methodsFor: 'tests' stamp: 'cb 6/11/2023 20:50:54' prior: 50639994!
test03CheckOutACartChargingAValidCreditCard
        |aCart |
         aCart := ObjectForTest aCartWithOneItem.
         self assert: 'debit has been done' equals: (Cashier checkOut: aCart charging: ObjectForTest aValidCreditCard on: GregorianMonthOfYear current).
		! !
!Cashier class methodsFor: 'validation' stamp: 'cb 6/11/2023 20:51:19'!
isValidCreditCard: aCreditCard comparing: aDate
       ^((self isValidDigits: aCreditCard) and: (self isValidName: aCreditCard)) and: (self isValidDate: aCreditCard comparing: aDate) ! !

!methodRemoval: Cashier class #isValidCreditCard: stamp: 'cb 6/11/2023 20:51:23'!
isValidCreditCard: aCreditCard
       ^((self isValidDigits: aCreditCard) and: (self isValidName: aCreditCard)) and: (self isValidDate: aCreditCard) !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:51:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:51:38'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:51:40'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:51:40'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:51:40'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:51:45'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:51:45'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:51:45'!
PASSED!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:52:32' prior: 50639043!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current + 1).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:52:43' prior: 50639526!
aValidCreditCardWithNoMoney
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current + 1).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1112111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:52:44'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:52:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:52:44'!
PASSED!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:52:50' prior: 50640901!
aValidCreditCardWithNoMoney
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current year + 1).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1112111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:52:52'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:52:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:52:52'!
PASSED!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:53:02' prior: 50640891!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current year + 1).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:53:03'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:53:03'!
PASSED!

Date!

Date today!

Date today year!

GregorianYear current year + 1!

GregorianYear current + 1!

GregorianYear current + 1!

GregorianYear current !

GregorianYear current nextLeapYear!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:56:00' prior: 50641041!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !

GregorianYear current next: 1!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:56:47' prior: 50641117!
aValidCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'.! !
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:56:56' prior: 50640971!
aValidCreditCardWithNoMoney
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1112111111111111'.! !
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:57:05' prior: 50639872!
aValidStolenCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1113111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:57:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:57:06'!
PASSED!
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:57:56' prior: 50639081!
anExpiredCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current previousLeapYear ).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111111'! !
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:58:13' prior: 50638993!
anInvalidDigitsCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
         ^CreditCard createCardFor: 'noe' expired: anExpiredDate withDigits: '1111111111111'.! !
!ObjectForTest class methodsFor: 'credit card' stamp: 'cb 6/11/2023 20:58:20' prior: 50639023!
anInvalidNameCreditCard
         |anExpiredDate|
         anExpiredDate := GregorianMonthOfYear mayOf: (GregorianYear current nextLeapYear).
       ^CreditCard createCardFor: '' expired: anExpiredDate withDigits: '1111111111111111'.! !

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:58:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/11/2023 20:58:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckOutAnEmptyCart stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutACartWithOneItemShouldReturnItemsPrice stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #CashierTest #test03CheckOutACartWithMoreThanOneItemShouldReturnTotalPrice stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckOutACartChargingACardWithAnInvalidName stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckOutACartChargingACardWithAnInvalidDigits stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckOutACartChargingAnExpiredCard stamp: 'cb 6/11/2023 20:58:28'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test01CanNotCheckOutACartChargingACardWithNoMoney stamp: 'cb 6/11/2023 20:58:31'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test02CanNotCheckOutACartChargingAStolenCard stamp: 'cb 6/11/2023 20:58:31'!
PASSED!

!testRun: #SimulatorMerchantProcessorTest #test03CheckOutACartChargingAValidCreditCard stamp: 'cb 6/11/2023 20:58:31'!
PASSED!

!classRemoval: #SimulatorMerchantProcessor stamp: 'cb 6/11/2023 21:01:58'!
Object subclass: #SimulatorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ObjectForTest stamp: 'cb 6/11/2023 21:01:58'!
Object subclass: #ObjectForTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'cb 6/11/2023 21:01:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expiredDate digits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'cb 6/11/2023 21:01:58'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'cb 6/11/2023 21:01:58'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SimulatorMerchantProcessorTest stamp: 'cb 6/11/2023 21:01:59'!
TestCase subclass: #SimulatorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'cb 6/11/2023 21:01:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'cb 6/11/2023 21:01:59'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\TusLibros.st----!

----QUIT----(11 June 2023 21:02:28) CuisUniversity-5832.image priorSource: 9848914!

----STARTUP---- (15 June 2023 11:34:13) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


Duration zero!

minute := Duration zero.!

minute seconds!

----STARTUP---- (21 June 2023 16:03:41) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!


!classRemoval: #SimulatorMerchantProcessor stamp: 'cb 6/21/2023 16:05:53'!
Object subclass: #SimulatorMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ObjectForTest stamp: 'cb 6/21/2023 16:05:53'!
Object subclass: #ObjectForTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'cb 6/21/2023 16:05:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'name expiredDate digits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'cb 6/21/2023 16:05:53'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'cb 6/21/2023 16:05:53'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SimulatorMerchantProcessorTest stamp: 'cb 6/21/2023 16:05:54'!
TestCase subclass: #SimulatorMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'cb 6/21/2023 16:05:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'cb 6/21/2023 16:05:54'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\TusLibros-Tests Ejercicio it4.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\TusLibros-Model Ejercicio it4.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\TusLibrosREST Ejercicio it4.st----!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:14:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:14:42'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:14:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:14:49'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:14:51'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'cb 6/21/2023 16:14:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 16:16:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 16:16:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 16:16:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 16:16:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 16:16:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 16:16:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 16:16:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 16:16:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 16:16:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 16:16:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 16:16:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:16:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:16:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 16:16:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 16:16:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 16:16:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 16:16:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:16:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:16:41'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:16:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:16:47'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/21/2023 16:16:49'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/21/2023 16:44:08' prior: 50644079!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	readySemaphore.
        readySemaphore wait.  
	totalSales := self totalSalesOf: anItem.
	readySemaphore signal.
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:45:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 16:45:04'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/21/2023 17:00:06' prior: 50645214!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	readySemaphore.
        readySemaphore wait.  
	[totalSales := self totalSalesOf: anItem.
	readySemaphore signal]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore signal]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:00:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:00:08'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/21/2023 17:02:02' prior: 50645308!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	readySemaphore.
        readySemaphore wait.  
	[totalSales := self totalSalesOf: anItem.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore signal]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/21/2023 17:02:05'!
PASSED!

----SNAPSHOT----(21 June 2023 17:02:32) CuisUniversity-5832.image priorSource: 9932205!

----SNAPSHOT----(21 June 2023 18:02:33) CuisUniversity-5832.image priorSource: 10043071!

----QUIT----(21 June 2023 18:02:37) CuisUniversity-5832.image priorSource: 10043160!

----STARTUP---- (22 June 2023 11:22:23) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5832.image!

!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:23:45' prior: 50645403!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	readySemaphore.
        readySemaphore wait.  
	[totalSales := self totalSalesOf: anItem.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore signal]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:23:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:24:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:24:05'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:30:49' prior: 50645509!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
         readySemaphore wait.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:30:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:30:50'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:30:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:31:00'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:34:48' prior: 50645675!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
         readySemaphore wait.
         readySemaphore signal.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:34:49'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:34:49'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:34:51'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:34:56'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:36:34' prior: 50645780!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
	 readySemaphore signal.	
         readySemaphore wait.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:36:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:36:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:36:37'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:36:38'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:37:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:37:27'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:37:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:37:34'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:37:38'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:39:20' prior: 50645886!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
         readySemaphore wait.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	readySemaphore signal.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:39:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:39:22'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:39:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:39:25'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:40:47' prior: 50646079!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
         readySemaphore wait.
         readySemaphore signal.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore signal.]
	fork.
	readySemaphore signal.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:40:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:40:48'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:40:50'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:40:51'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:44:28' prior: 50646185!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
         readySemaphore signal.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:44:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:44:30'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:44:32'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:44:33'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:44:39'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:47:19' prior: 50646292!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore|

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
	 bookPerformance at: 'quantity' put: totalSales.	
         readySemaphore signal.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.]
	fork.
	
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:47:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:47:21'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:47:23'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:47:24'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:48:55' prior: 50646401!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
	 semaphore wait.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:53:25' prior: 50646506!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	forkAt: 35.
	[totalMoney := self totalMoneyRaisedBy: anItem.]
	forkAt: 33.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:53:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:53:26'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:53:28'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:53:30'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:53:36'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:55:10' prior: 50646527!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem.	
         semaphore signal.]
	forkAt: 35.
	totalMoney :=  [self totalMoneyRaisedBy: anItem.]
	forkAt: 33.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:14'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:18'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:55:43' prior: 50646635!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem.	
         semaphore signal.]
	forkAt: 35.
	totalMoney :=  [self totalMoneyRaisedBy: anItem.]
	forkAt: 33.
	
	bookPerformance at: 'quantity' put: totalSales value.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 11:55:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:46'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:48'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 11:55:50'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 11:56:43' prior: 50646740!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	totalMoney :=  [self totalMoneyRaisedBy: anItem.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:03:19' prior: 50646845!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [totalMoney := self totalMoneyRaisedBy: anItem.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:03:54' prior: 50646866!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	  totalMoney := self totalMoneyRaisedBy: anItem.]
	fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:03:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:03:55'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:03:57'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:03:59'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:04:58' prior: 50646887!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.]
	  fork.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:05:12' prior: 50646992!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
	 bookPerformance at: 'quantity' put: totalSales.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.]
	  fork.
	
	
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:05:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:05:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:05:15'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:05:18'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:06:00' prior: 50647014!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
	 bookPerformance at: 'quantity' put: totalSales.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.
	 bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.]
	  fork.
	
	
	
	
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:06:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:06:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:06:04'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:06:05'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:07:04' prior: 50647119!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
	 bookPerformance at: 'quantity' put: totalSales.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.
	 bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.]
	  fork.
	
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:07:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:07:04'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:07:06'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:07:08'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:07:57' prior: 50647224!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.]
	 fork.
	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
        bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:08:57' prior: 50647329!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore p3|

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 p3 := [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.]
	 fork.
	 bookPerformance at: 'quantity' put: p3 value.	
	 bookPerformance at: 'total' put: totalMoney.
        bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:08:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:08:58'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:09:00'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:09:02'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:09:19' prior: 50647351!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.	
         semaphore signal.]
	fork.
	 [semaphore wait.
	 totalMoney := self totalMoneyRaisedBy: anItem.]
	 fork.
	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
        bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance
	

! !

| bookPeMoney totalSales semaphore |
semaphore := Semaphore new.
[totalSales := 4+4.	
 semaphore signal.]
fork.
[semaphore wait.
totalMoney := 6+8.]
fork.!

totalSales!

 nil !

 nil !

| semaphore |
semaphore := Semaphore new.
[ |totalSales | 
   totalSales := 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork. nil 
totalSales!

| semaphore totalSales|
semaphore := Semaphore new.
totalSales := [ 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork. nil 
totalSales nil  nil  nil !

| semaphore totalSales|
semaphore := Semaphore new.
totalSales := [ 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork. nil 
totalSales nil  nil  nil !

| semaphore totalSales|
semaphore := Semaphore new.
totalSales := [ 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork.
totalSales !

| semaphore |
semaphore := Semaphore new.
[ |totalSales | 
   totalSales := 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork.
totalSales!

| semaphore |
semaphore := Semaphore new.
[ |totalSales | 
   totalSales := 4+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork.
totalSales!

| semaphore |
semaphore := Semaphore new.
totalSales := [ 6+4.	
 semaphore signal.]
fork.
[|totalMoney | 
 semaphore wait.
 totalMoney := 6+8.]
fork.
totalSales !

| semaphore totalSales totalMoney|
semaphore := Semaphore new.
totalSales := [ 6+4.	
 semaphore signal.]
fork.
totalMoney := [
 semaphore wait.
  6+8.]
fork.
totalSales !

| semaphore totalSales totalMoney|
semaphore := Semaphore new.
totalSales := [ totalSales := 6+4.	
 semaphore signal.]
fork.
totalMoney := [
 semaphore wait.
  6+8.]
fork.
totalSales !

| semaphore totalSales totalMoney|
semaphore := Semaphore new.
totalSales := [ totalSales := 6+4.	
 semaphore signal.]
fork.
totalMoney := [
 semaphore wait.
  6+8.]
fork.
totalSales value !

| semaphore totalSales totalMoney|
semaphore := Semaphore new.
totalSales := [ 6+4.	
 semaphore signal.]
fork.
totalMoney := [
 semaphore wait.
  6+8.]
fork.
totalSales value !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:22:27' prior: 50647456!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.
          semaphore signal] fork.
         totalMoney := self totalMoneyRaisedBy: anItem.
         semaphore wait.
	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
        bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:22:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:22:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:22:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:22:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:22:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:22:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:22:32'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:22:34'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:24:11' prior: 50647546!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaisedBy: anItem.
         semaphore wait.

	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
         bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:24:26'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:24:28'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:25:52' prior: 50644120!
storePerformance

	| totalMoney totalSales performance semaphore  |
	
	performance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSales.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaised.
         semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:25:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:25:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:25:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:26:00'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:26:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:26:02'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:33:07'!
putOnHold: message1 and: message2 

	|information totalMoney totalSales semaphore  |
	
	information := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := message1.
         semaphore signal] fork.
         totalMoney :=  message2.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney. 
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:34:24'!
gatheredUpInformationOf: totalSales and: totalMoney
        |information|
        information := Dictionary new.
	information at: 'quantity' put: totalSales.
	information at: 'total' put: totalMoney.
	information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^information
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:34:42' prior: 50647874!
gatheredUpInformationOf: totalSales and: totalMoney
       
       |information|
        information := Dictionary new.

        information at: 'quantity' put: totalSales.
        information at: 'total' put: totalMoney.
	information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^information
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:35:12' prior: 50647860!
putOnHold: message1 and: message2 

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := message1.
         semaphore signal] fork.
         totalMoney :=  message2.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney. 
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:36:57' prior: 50647681!
storePerformance
        ^self putOnHold: [self totalSales] and: [self totalMoneyRaised]
	"| totalMoney totalSales performance semaphore  |
	
	performance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSales.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaised.
         semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance"
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:37:08' prior: 50647905!
putOnHold: message1 and: message2 

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := message1 value.
         semaphore signal] fork.
         totalMoney :=  message2 value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney. 
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:37:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:37:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:37:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:37:12'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:39:29' prior: 50647651!
bookPerformance: anItem
        ^self putOnHold: [self totalSalesOf: anItem] and: [self totalMoneyRaisedBy: anItem]
	"| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaisedBy: anItem.
         semaphore wait.

	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
         bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance"
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:39:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:39:31'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:39:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:39:33'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:45:52'!
gatheredUpInformationOf: totalSales and: totalMoney for: anItem
       
       |information|
        information := Dictionary new.

        information at: 'quantity' put: totalSales.
        information at: 'total' put: totalMoney.
	anItem = 'The Store' ifTrue: [
		information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.].
	anItem = 'The Store' ifFalse: [information at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.].
	^information
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:45:59' prior: 50648142!
gatheredUpInformationOf: totalSales and: totalMoney for: anItem
       
       |information|
        information := Dictionary new.

        information at: 'quantity' put: totalSales.
        information at: 'total' put: totalMoney.
	anItem = 'The Store' ifTrue: [
		information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.].
	anItem = 'The Store' ifFalse: [
		information at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.].
	^information
	

	

! !

!methodRemoval: TusLibrosSystemFacade #gatheredUpInformationOf:and: stamp: 'cb 6/22/2023 12:46:02'!
gatheredUpInformationOf: totalSales and: totalMoney
       
       |information|
        information := Dictionary new.

        information at: 'quantity' put: totalSales.
        information at: 'total' put: totalMoney.
	information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^information
	

	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:46:19'!
putOnHold: message1 and: message2 for: anItem

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := message1 value.
         semaphore signal] fork.
         totalMoney :=  message2 value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney for: anItem. 
	

! !

!methodRemoval: TusLibrosSystemFacade #putOnHold:and: stamp: 'cb 6/22/2023 12:46:22'!
putOnHold: message1 and: message2 

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := message1 value.
         semaphore signal] fork.
         totalMoney :=  message2 value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney. 
	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:46:47' prior: 50648165!
gatheredUpInformationOf: totalSales and: totalMoney for: anItem
       
       |information|
        information := Dictionary new.

        information at: 'quantity' put: totalSales.
        information at: 'total' put: totalMoney.
	
	anItem = 'The Store' ifTrue: [
		information at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.].
	
	anItem = 'The Store' ifFalse: [
		information at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.].
	
	^information
	

	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:47:12' prior: 50647918!
storePerformance
        ^self putOnHold: [self totalSales] and: [self totalMoneyRaised] for: 'The Store'
	"| totalMoney totalSales performance semaphore  |
	
	performance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSales.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaised.
         semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance"
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:47:23' prior: 50648034!
bookPerformance: anItem
        ^self putOnHold: [self totalSalesOf: anItem] and: [self totalMoneyRaisedBy: anItem] for: anItem.
	"| bookPerformance totalMoney totalSales semaphore |

	bookPerformance := Dictionary new.
	semaphore := Semaphore new.
	
	 [totalSales := self totalSalesOf: anItem.
         semaphore signal] fork.
         totalMoney := self totalMoneyRaisedBy: anItem.
         semaphore wait.

	 bookPerformance at: 'quantity' put: totalSales.	
	 bookPerformance at: 'total' put: totalMoney.
         bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	^bookPerformance"
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:47:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:47:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:47:28'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:47:36' prior: 50648277!
bookPerformance: anItem
        
       ^self putOnHold: [self totalSalesOf: anItem] and: [self totalMoneyRaisedBy: anItem] for: anItem.
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:47:58' prior: 50648254!
storePerformance
        
        ^self putOnHold: [self totalSales] and: [self totalMoneyRaised] for: 'The Store'
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:48:46' prior: 50648204!
putOnHold: anAction and: anOtherAction for: anItem

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := anAction value.
         semaphore signal] fork.
         totalMoney :=  anOtherAction value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney for: anItem. 
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:49:42'!
doAtTheSameTime: anAction and: anOtherAction for: anItem

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := anAction value.
         semaphore signal] fork.
         totalMoney :=  anOtherAction value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney for: anItem. 
	

! !

!methodRemoval: TusLibrosSystemFacade #putOnHold:and:for: stamp: 'cb 6/22/2023 12:49:47'!
putOnHold: anAction and: anOtherAction for: anItem

	|totalMoney totalSales semaphore|
	semaphore := Semaphore new.
	
	 [totalSales := anAction value.
         semaphore signal] fork.
         totalMoney :=  anOtherAction value.
         semaphore wait.
	
         ^self gatheredUpInformationOf: totalSales and: totalMoney for: anItem. 
	

!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:49:57' prior: 50648382!
bookPerformance: anItem
        
       ^self doAtTheSameTime: [self totalSalesOf: anItem] and: [self totalMoneyRaisedBy: anItem] for: anItem.
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'cb 6/22/2023 12:50:15' prior: 50648390!
storePerformance
        
        ^self doAtTheSameTime: [self totalSales] and: [self totalMoneyRaised] for: 'The Store'
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:50:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'cb 6/22/2023 12:50:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:50:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'cb 6/22/2023 12:50:25'!
PASSED!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\WebClient.pck.st----!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open !

----QUIT----(22 June 2023 13:01:54) CuisUniversity-5832.image priorSource: 10043250!