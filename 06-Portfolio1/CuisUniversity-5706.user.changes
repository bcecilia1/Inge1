

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (29 March 2023 14:20:56) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\cecibola\OneDrive - Anheuser-Busch InBev\Documents\facultad\nats.st----!

----End fileIn of C:\Users\cecibola\OneDrive - Anheuser-Busch InBev\Documents\facultad\nats.st----!

----End fileIn of C:\Users\cecibola\OneDrive - Anheuser-Busch InBev\Documents\facultad\nats.st----!

II + I!

II + I!

II + I!

II + I!
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:40:24'!
* numerito
	^(numerito) + ((self prev) * numerito).! !
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:41:23' prior: 50605287!
* numerito
	^(numerito) + (self prev * numerito).! !

!classRemoval: #III stamp: 'CB 3/29/2023 14:41:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIII stamp: 'CB 3/29/2023 14:41:34'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIIII stamp: 'CB 3/29/2023 14:41:36'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIIIII stamp: 'CB 3/29/2023 14:41:38'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIIIIII stamp: 'CB 3/29/2023 14:41:40'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!
!I class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:41:57'!
* numerito
	^numerito.! !

II * I!

II * I!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #III category: 'nats' stamp: 'CB 3/29/2023 14:45:11'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

III class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'III class' category: 'nats' stamp: 'CB 3/29/2023 14:45:11'!
III class
	instanceVariableNames: 'pred next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
* numerito
	^(numerito) + (self prev * numerito).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
+ numerito
	^(self prev) + (numerito next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
- numerito
	^numerito restarDe: self.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
prev
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
prev: number
	prev := number.
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:11'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

II * III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIII category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIII class' category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
IIII class
	instanceVariableNames: 'pred next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
+ numerito
	^(self prev) + (numerito next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
- numerito
	^numerito restarDe: self.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev: number
	prev := number.
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIIII category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIIII class' category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
IIIII class
	instanceVariableNames: 'pred next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
+ numerito
	^(self prev) + (numerito next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
- numerito
	^numerito restarDe: self.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev: number
	prev := number.
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIIIII category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIIIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIIIII class' category: 'nats' stamp: 'CB 3/29/2023 14:45:19'!
IIIIII class
	instanceVariableNames: 'pred next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
+ numerito
	^(self prev) + (numerito next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
- numerito
	^numerito restarDe: self.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
prev: number
	prev := number.
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:45:19'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 14:52:44'!
dividiDe: numerito
    ! !

III - IIII!

!methodRemoval: II class #dividiDe: stamp: 'CB 3/29/2023 15:06:58'!
dividiDe: numerito
    !
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:08:14'!
/ numerito
  ^I + (self - numerito) / numerito.! !

!classRemoval: #III stamp: 'CB 3/29/2023 15:08:56'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIII stamp: 'CB 3/29/2023 15:08:58'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIIII stamp: 'CB 3/29/2023 15:09:00'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIIIII stamp: 'CB 3/29/2023 15:09:04'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

II next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #III category: 'nats' stamp: 'CB 3/29/2023 15:14:27'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

III class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'III class' category: 'nats' stamp: 'CB 3/29/2023 15:14:27'!
III class
	instanceVariableNames: 'pred next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
* numerito
	^(numerito) + (self prev * numerito).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
+ numerito
	^(self prev) + (numerito next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
- numerito
	^numerito restarDe: self.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
/ numerito
  ^I + (self - numerito) / numerito.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
prev
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
prev: number
	prev := number.
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 15:14:27'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

II - III!

----SNAPSHOT----(29 March 2023 22:19:35) CuisUniversity-5706.image priorSource: 8713034!

III + I!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIII category: 'nats' stamp: 'CB 3/29/2023 22:20:14'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIII class' category: 'nats' stamp: 'CB 3/29/2023 22:20:14'!
IIII class
	instanceVariableNames: 'pred next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
+ numerito
	^(self prev) + (numerito next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
- numerito
	^numerito restarDe: self.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
/ numerito
  ^I + (self - numerito) / numerito.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
prev
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
prev: number
	prev := number.
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:20:14'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

IIII / II!
!I class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:28:34'!
/ numerito
  numerito = I ifTrue: [^I].
! !
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:29:08' prior: 50605524!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + (self - numerito) / numerito.! !

!classRemoval: #III stamp: 'CB 3/29/2023 22:29:20'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #IIII stamp: 'CB 3/29/2023 22:29:26'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #III category: 'nats' stamp: 'CB 3/29/2023 22:30:53'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

III class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'III class' category: 'nats' stamp: 'CB 3/29/2023 22:30:53'!
III class
	instanceVariableNames: 'pred next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
* numerito
	^(numerito) + (self prev * numerito).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
+ numerito
	^(self prev) + (numerito next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
- numerito
	^numerito restarDe: self.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + (self - numerito) / numerito.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
prev
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
prev: number
	prev := number.
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:30:53'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIII category: 'nats' stamp: 'CB 3/29/2023 22:31:01'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIII class' category: 'nats' stamp: 'CB 3/29/2023 22:31:01'!
IIII class
	instanceVariableNames: 'pred next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
+ numerito
	^(self prev) + (numerito next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
- numerito
	^numerito restarDe: self.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + (self - numerito) / numerito.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
prev
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:01'!
prev: number
	prev := number.
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:31:02'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

----End fileIn of C:\Users\cecibola\Downloads\Natural Numbers Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:31:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:31:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:04'!
ERROR!
!NaturalNumbersTester class methodsFor: 'tests' stamp: 'CB 3/29/2023 22:32:17' prior: 50605817!
test03ANumberMinusOneEqualsThePreviousOfTheNumber

	Assert that: II - I isEqualTo: II prev.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:32:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:33:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:33:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:33:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:33:19'!
ERROR!
!II class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:34:05' prior: 50605662!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + ((self - numerito) / numerito).! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:34:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:34:21'!
ERROR!
!III class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:34:51' prior: 50605708!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + ((self - numerito) / numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 3/29/2023 22:35:02' prior: 50605760!
/ numerito
  numerito = self ifTrue: [^I].
  ^I + ((self - numerito) / numerito).! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:35:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:35:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:35:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:35:34'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'CB 3/29/2023 22:35:34'!
ERROR!
!I class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:26' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:26' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:26' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:26' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:26'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.!
!I class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:39' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:39' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:39' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:37:39' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:37:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.!
!I class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:39:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:39:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:39:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'CB 3/29/2023 22:39:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:39:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := II.
	prev := #I.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:39:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := III.
	prev := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:39:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := IIII.
	prev := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'CB 3/29/2023 22:39:01'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	pred := nil.
	next := nil.
	prev := III.!

----STARTUP---- (2 April 2023 12:55:57) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIII category: 'nats' stamp: 'CB 4/2/2023 12:56:34'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIII class' category: 'nats' stamp: 'CB 4/2/2023 12:56:34'!
IIII class
	instanceVariableNames: 'pred next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
+ numerito
	^(self prev) + (numerito next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
- numerito
	^numerito restarDe: self.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
/ numerito
  ^I + (self - numerito) / numerito.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
prev
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
prev: number
	prev := number.
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 12:56:34'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

IIII / II!

!classRemoval: #IIII stamp: 'CB 4/2/2023 12:57:15'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #III stamp: 'CB 4/2/2023 12:57:17'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

II next!

II next  !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #III category: 'nats' stamp: 'CB 4/2/2023 13:05:02'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

III class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'III class' category: 'nats' stamp: 'CB 4/2/2023 13:05:02'!
III class
	instanceVariableNames: 'pred next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
* numerito
	^(numerito) + (self prev * numerito).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
+ numerito
	^(self prev) + (numerito next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
- numerito
	^numerito restarDe: self.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
/ numerito
  ^I + (self - numerito) / numerito.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
prev
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
prev: number
	prev := number.
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:02'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classDefinition: #IIII category: 'nats' stamp: 'CB 4/2/2023 13:05:11'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

IIII class
	instanceVariableNames: 'pred next prev'!

!classDefinition: 'IIII class' category: 'nats' stamp: 'CB 4/2/2023 13:05:11'!
IIII class
	instanceVariableNames: 'pred next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
* numerito
	^(numerito) + (self prev * numerito).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
+ numerito
	^(self prev) + (numerito next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
- numerito
	^numerito restarDe: self.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
/ numerito
  ^I + (self - numerito) / numerito.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
next
	next ifNil: [ next := self cloneNamed: self name, 'I'.
		         next prev: self].
	^next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
prev
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
prev: number
	prev := number.
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'CB 4/2/2023 13:05:11'!
restarDe: numerito
	^self prev restarDe: numerito prev.! !

IIII / II!

IIII/II!

IIII/I!

----STARTUP---- (10 April 2023 17:06:36) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/10/2023 17:06:48'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/10/2023 17:06:48'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/10/2023 17:06:48'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----STARTUP---- (11 April 2023 21:07:36) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/11/2023 21:08:01'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/11/2023 21:08:02'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/11/2023 21:08:02'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:15:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:15:28'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:15:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:15:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:15:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:15:28'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:15:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:15:28'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:16:01' prior: 50606615!
removeCustomerNamed: aName 
 	
	self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName.

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:16:05'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:16:05'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:16:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:16:14'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:17:23' prior: 50606715!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:17:26'!
PASSED!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\TerseGuide.pck.st----!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:19:53' prior: 50606766!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				"^ aName" 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				"^ aName" 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:20:04'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:04'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:20:04'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:20:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:20:18'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:20:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:18'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:20:18'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:20:34' prior: 50609733!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."

	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:20:37'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:23:16' prior: 50606632!
removeFrom: aCustomerCollection thisCustomer: aName
	1 to: aCustomerCollection size do: 
	[ :index |
		aName = (aCustomerCollection at: index)
			ifTrue: [
				aCustomerCollection removeAt: index.
				^ aName 
			] 
	].! !
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:24:02' prior: 50609809!
removeCustomerNamed: aName 
 	
	active removeFrom: active thisCustomer: aName. 
	suspended removeFrom: suspended thisCustomer: aName.

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:24:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:24:13'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:24:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:24:13'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:24:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:24:13'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:24:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:24:13'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:24:58' prior: 50609866!
removeCustomerNamed: aName 
 	
	self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName.

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:27:30' prior: 50609913!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active := active remove: aName ifAbsent: [].
	suspended := suspended remove: aName ifAbsent: [].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:27:32'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:27:32'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:27:32'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:32'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:32'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:32'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:32'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:27:32'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:27:39'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:27:39'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:27:39'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:39'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:39'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:39'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:39'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:27:39'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:27:48' prior: 50609930!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active remove: aName ifAbsent: [].
	suspended remove: aName ifAbsent: [].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:27:52'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:27:52'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:27:52'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:28:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:28:23'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:28:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:28:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:28:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:28:23'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:28:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:28:23'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:30:24' prior: 50610010!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active reject: [:a | a = aName].
	suspended reject: [:a | a = aName].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:30:25'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:30:25'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:30:25'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:25'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:25'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:25'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:25'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:30:25'!
PASSED!
!Behavior method!
addCustomerNamed: aName
	#_coverageTracker1380171_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker1380171_
		cover: (27 to: 31)
		declaredAt: (19 to: 23)
		by: aName.
	#_coverageTracker1380171_
		coverAll:
			{33 to: 39}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker1380171_
		coverAll:
			{41 to: 47}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker1380171_
					coverAll:
						{51 to: 54}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker1380171_
					coverAll:
						{56 to: 86}
					evaluating: [ receiver2 signalCustomerNameCannotBeEmpty ]
					thatSends: #signalCustomerNameCannotBeEmpty
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver6 |
	receiver6 _ [ | receiver4 |
	receiver4 _ #_coverageTracker1380171_
		cover: (94 to: 99)
		declaredAt: (94 to: 99)
		by: active.
	#_coverageTracker1380171_
		coverAll:
			{101 to: 109}
		evaluating: [
			receiver4 includes:
				(#_coverageTracker1380171_
					cover: (111 to: 115)
					declaredAt: (19 to: 23)
					by: aName) ]
		thatSends: #includes:
		to: receiver4 ] value.
	#_coverageTracker1380171_
		coverAll:
			{118 to: 120}
		evaluating: [
			receiver6 or: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker1380171_
					cover: (123 to: 131)
					declaredAt: (123 to: 131)
					by: suspended.
				#_coverageTracker1380171_
					coverAll:
						{133 to: 141}
					evaluating: [
						receiver5 includes:
							(#_coverageTracker1380171_
								cover: (143 to: 147)
								declaredAt: (19 to: 23)
								by: aName) ]
					thatSends: #includes:
					to: receiver5 ] value ]]
		thatSends: #or:
		to: receiver6 ] value.
	#_coverageTracker1380171_
		coverAll:
			{151 to: 157}
		evaluating: [
			receiver8 ifTrue: [
				[ | receiver7 |
				receiver7 _ #_coverageTracker1380171_
					coverAll:
						{161 to: 164}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker1380171_
					coverAll:
						{166 to: 192}
					evaluating: [ receiver7 signalCustomerAlreadyExists ]
					thatSends: #signalCustomerAlreadyExists
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker1380171_
		cover: (200 to: 205)
		declaredAt: (94 to: 99)
		by: active.
	#_coverageTracker1380171_
		coverAll:
			{207 to: 210}
		evaluating: [
			receiver9 add:
				(#_coverageTracker1380171_
					cover: (212 to: 216)
					declaredAt: (19 to: 23)
					by: aName) ]
		thatSends: #add:
		to: receiver9 ] value.! !
!Behavior method!
includesCustomerNamed: aName
	#_coverageTracker1380207_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker1380207_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker1380207_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker1380207_
					cover: (51 to: 55)
					declaredAt: (24 to: 28)
					by: aName) ]
		thatSends: #includes:
		to: receiver1 ] value.
	#_coverageTracker1380207_
		coverAll:
			{58 to: 60}
		evaluating: [
			receiver3 or: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker1380207_
					cover: (64 to: 72)
					declaredAt: (64 to: 72)
					by: suspended.
				#_coverageTracker1380207_
					coverAll:
						{74 to: 82}
					evaluating: [
						receiver2 includes:
							(#_coverageTracker1380207_
								cover: (84 to: 88)
								declaredAt: (24 to: 28)
								by: aName) ]
					thatSends: #includes:
					to: receiver2 ] value ]]
		thatSends: #or:
		to: receiver3 ] value.! !
!Behavior method!
isEmpty
	#_coverageTracker1380213_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker1380213_
		cover: (13 to: 18)
		declaredAt: (13 to: 18)
		by: active.
	#_coverageTracker1380213_
		coverAll:
			{20 to: 26}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker1380213_
		coverAll:
			{28 to: 31}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker1380213_
					cover: (35 to: 43)
					declaredAt: (35 to: 43)
					by: suspended.
				#_coverageTracker1380213_
					coverAll:
						{45 to: 51}
					evaluating: [ receiver2 isEmpty ]
					thatSends: #isEmpty
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !
!Behavior method!
removeFrom: aCustomerCollection thisCustomer: aName
	#_coverageTracker1380232_ markAsExecuted.
	[ | receiver6 |
	receiver6 _ #_coverageTracker1380232_
		coverAll:
			{54 to: 54}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker1380232_
		coverAll:
			{56 to: 58. 85 to: 87}
		evaluating: [
			receiver6
				to:
					[ | receiver1 |
					receiver1 _ #_coverageTracker1380232_
						cover: (60 to: 78)
						declaredAt: (13 to: 31)
						by: aCustomerCollection.
					#_coverageTracker1380232_
						coverAll:
							{80 to: 83}
						evaluating: [ receiver1 size ]
						thatSends: #size
						to: receiver1 ] value
				do: [ :index |
					[ | receiver5 |
					receiver5 _ [ | receiver3 |
					receiver3 _ #_coverageTracker1380232_
						cover: (104 to: 108)
						declaredAt: (47 to: 51)
						by: aName.
					#_coverageTracker1380232_
						coverAll:
							{110 to: 110}
						evaluating: [
							receiver3 =
								[ | receiver2 |
								receiver2 _ #_coverageTracker1380232_
									cover: (113 to: 131)
									declaredAt: (13 to: 31)
									by: aCustomerCollection.
								#_coverageTracker1380232_
									coverAll:
										{133 to: 135}
									evaluating: [
										receiver2 at:
											(#_coverageTracker1380232_
												cover: (137 to: 141)
												declaredAt: (94 to: 98)
												by: index) ]
									thatSends: #at:
									to: receiver2 ] value ]
						thatSends: #=
						to: receiver3 ] value.
					#_coverageTracker1380232_
						coverAll:
							{147 to: 153}
						evaluating: [
							receiver5 ifTrue: [
								[ | receiver4 |
								receiver4 _ #_coverageTracker1380232_
									cover: (161 to: 179)
									declaredAt: (13 to: 31)
									by: aCustomerCollection.
								#_coverageTracker1380232_
									coverAll:
										{181 to: 189}
									evaluating: [
										receiver4 removeAt:
											(#_coverageTracker1380232_
												cover: (191 to: 195)
												declaredAt: (94 to: 98)
												by: index) ]
									thatSends: #removeAt:
									to: receiver4 ] value.
								^ #_coverageTracker1380232_
									cover: (204 to: 208)
									declaredAt: (47 to: 51)
									by: aName ]]
						thatSends: #ifTrue:
						to: receiver5 ] value ]]
		thatSends: #to:do:
		to: receiver6 ] value.! !
!Behavior method!
removeCustomerNamed: aName
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
	#_coverageTracker1380261_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker1380261_
		cover: (138 to: 143)
		declaredAt: (138 to: 143)
		by: active.
	#_coverageTracker1380261_
		coverAll:
			{145 to: 151}
		evaluating: [
			receiver2 reject: [ :a |
				[ | receiver1 |
				receiver1 _ #_coverageTracker1380261_
					cover: (159 to: 159)
					declaredAt: (155 to: 155)
					by: a.
				#_coverageTracker1380261_
					coverAll:
						{161 to: 161}
					evaluating: [
						receiver1 =
							(#_coverageTracker1380261_
								cover: (163 to: 167)
								declaredAt: (22 to: 26)
								by: aName) ]
					thatSends: #=
					to: receiver1 ] value ]]
		thatSends: #reject:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker1380261_
		cover: (172 to: 180)
		declaredAt: (172 to: 180)
		by: suspended.
	#_coverageTracker1380261_
		coverAll:
			{182 to: 188}
		evaluating: [
			receiver4 reject: [ :a |
				[ | receiver3 |
				receiver3 _ #_coverageTracker1380261_
					cover: (196 to: 196)
					declaredAt: (192 to: 192)
					by: a.
				#_coverageTracker1380261_
					coverAll:
						{198 to: 198}
					evaluating: [
						receiver3 =
							(#_coverageTracker1380261_
								cover: (200 to: 204)
								declaredAt: (22 to: 26)
								by: aName) ]
					thatSends: #=
					to: receiver3 ] value ]
			"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]." ]
		thatSends: #reject:
		to: receiver4 ] value.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker1380261_
		coverAll:
			{484 to: 491}
		by: NotFound.
	#_coverageTracker1380261_
		coverAll:
			{493 to: 498}
		evaluating: [ receiver5 signal ]
		thatSends: #signal
		to: receiver5 ] value.! !
!Behavior method!
signalCustomerAlreadyExists
	#_coverageTracker1380289_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker1380289_
		coverAll:
			{32 to: 35}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker1380289_
		coverAll:
			{37 to: 42}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker1380289_
					coverAll:
						{44 to: 47}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker1380289_
					coverAll:
						{49 to: 53}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker1380289_
					coverAll:
						{55 to: 87}
					evaluating: [ receiver2 customerAlreadyExistsErrorMessage ]
					thatSends: #customerAlreadyExistsErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
numberOfSuspendedCustomers
	#_coverageTracker1380293_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker1380293_
		cover: (32 to: 40)
		declaredAt: (32 to: 40)
		by: suspended.
	#_coverageTracker1380293_
		coverAll:
			{42 to: 45}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
numberOfActiveCustomers
	#_coverageTracker1380296_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker1380296_
		cover: (29 to: 34)
		declaredAt: (29 to: 34)
		by: active.
	#_coverageTracker1380296_
		coverAll:
			{36 to: 39}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker1380303_ markAsExecuted.
	#_coverageTracker1380303_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by:
			(active _ [ | receiver1 |
			receiver1 _ #_coverageTracker1380303_
				coverAll:
					{24 to: 40}
				by: OrderedCollection.
			#_coverageTracker1380303_
				coverAll:
					{42 to: 44}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker1380303_
		cover: (48 to: 56)
		declaredAt: (48 to: 56)
		by:
			(suspended _ [ | receiver2 |
			receiver2 _ #_coverageTracker1380303_
				coverAll:
					{60 to: 76}
				by: OrderedCollection.
			#_coverageTracker1380303_
				coverAll:
					{78 to: 80}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
customerAlreadyExistsErrorMessage
	#_coverageTracker1380319_ markAsExecuted.
	^ #_coverageTracker1380319_
		coverAll:
			{38 to: 65}
		byLiteralOrPseudoVariable: 'Customer already exists!!!!!!'.! !
!Behavior method!
numberOfCustomers
	#_coverageTracker1380322_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker1380322_
		cover: (23 to: 28)
		declaredAt: (23 to: 28)
		by: active.
	#_coverageTracker1380322_
		coverAll:
			{30 to: 33}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.
	#_coverageTracker1380322_
		coverAll:
			{35 to: 35}
		evaluating: [
			receiver3 +
				[ | receiver2 |
				receiver2 _ #_coverageTracker1380322_
					cover: (37 to: 45)
					declaredAt: (37 to: 45)
					by: suspended.
				#_coverageTracker1380322_
					coverAll:
						{47 to: 50}
					evaluating: [ receiver2 size ]
					thatSends: #size
					to: receiver2 ] value ]
		thatSends: #+
		to: receiver3 ] value.! !
!Behavior method!
suspendCustomerNamed: aName
	#_coverageTracker1380328_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker1380328_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker1380328_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker1380328_
					cover: (51 to: 55)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #includes:
		to: receiver1 ] value.
	#_coverageTracker1380328_
		coverAll:
			{58 to: 65}
		evaluating: [ receiver3 ifFalse: [ ^ [ | receiver2 |
				receiver2 _ #_coverageTracker1380328_
					coverAll:
						{69 to: 79}
					by: CantSuspend.
				#_coverageTracker1380328_
					coverAll:
						{81 to: 86}
					evaluating: [ receiver2 signal ]
					thatSends: #signal
					to: receiver2 ] value ]]
		thatSends: #ifFalse:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker1380328_
		cover: (93 to: 98)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker1380328_
		coverAll:
			{100 to: 106}
		evaluating: [
			receiver4 remove:
				(#_coverageTracker1380328_
					cover: (108 to: 112)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #remove:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker1380328_
		cover: (118 to: 126)
		declaredAt: (118 to: 126)
		by: suspended.
	#_coverageTracker1380328_
		coverAll:
			{128 to: 131}
		evaluating: [
			receiver5 add:
				(#_coverageTracker1380328_
					cover: (133 to: 137)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
signalCustomerNameCannotBeEmpty
	#_coverageTracker1380353_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker1380353_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker1380353_
		coverAll:
			{41 to: 46}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker1380353_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker1380353_
					coverAll:
						{53 to: 57}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker1380353_
					coverAll:
						{59 to: 91}
					evaluating: [ receiver2 customerCanNotBeEmptyErrorMessage ]
					thatSends: #customerCanNotBeEmptyErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
customerCanNotBeEmptyErrorMessage
	#_coverageTracker1380356_ markAsExecuted.
	^ #_coverageTracker1380356_
		coverAll:
			{38 to: 71}
		byLiteralOrPseudoVariable: 'Customer name cannot be empty!!!!!!'.! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:30:36'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:36'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:30:36'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:30:42'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:30:42'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:30:42'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:42'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:42'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:30:42'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:30:42'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:30:42'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:31:01' prior: 50610089!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active := active reject: [:a | a = aName].
	suspended := suspended reject: [:a | a = aName].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:31:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:31:02'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:31:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:31:03'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:31:03'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:31:03'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:31:03'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:31:03'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:31:11'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:31:11'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:31:11'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:31:11'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:31:11'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:31:11'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:31:11'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:31:11'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:31:43' prior: 50610669!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active reject: [:a | a = aName].
	suspended reject: [:a | a = aName].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

y := x remove: 5 ifAbsent: [].					"remove element from collection"
!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:38:21' prior: 50610748!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active remove: aName ifAbsent: [].
	suspended remove: aName ifAbsent: [].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:38:25'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:38:25'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:38:25'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:38:25'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:38:25'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:38:25'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:38:25'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:38:25'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:42:48' prior: 50606592!
addCustomerNamed: aName

        aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	
	"aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ]."
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:42:51'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:42:51'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:42:51'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:42:51'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:42:51'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:42:51'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:42:51'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:42:51'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:44:18' prior: 50606606!
numberOfCustomers
	
	^self numberOfSuspendedCustomers + self numberOfActiveCustomers 
	"^active size + suspended size"! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:44:23'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:44:23'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:44:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/11/2023 21:51:19'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:51:19'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/11/2023 21:51:19'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/11/2023 21:51:48'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/11/2023 21:54:57' prior: 50610769!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        "active remove: aName ifAbsent: [].
	suspended remove: aName ifAbsent: []."
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

----STARTUP---- (12 April 2023 14:46:19) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/12/2023 14:46:29'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/12/2023 14:46:29'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/12/2023 14:46:30'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\CodigoRepetido-Ejercicio.st----!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 14:57:00' prior: 50611231!
removeCustomerNamed: aName 
 	
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName."
        active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^ NotFound signal]].
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 14:57:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 14:57:01'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:00:19'!
removeFrom: aCustomerCollection thisCustomer: aName ifNotThereRemoveFrom: anOtherCustomerCollection  
         aCustomerCollection! !

!methodRemoval: CustomerBook #removeFrom:thisCustomer: stamp: 'CB 4/12/2023 15:00:23'!
removeFrom: aCustomerCollection thisCustomer: aName
	1 to: aCustomerCollection size do: 
	[ :index |
		aName = (aCustomerCollection at: index)
			ifTrue: [
				aCustomerCollection removeAt: index.
				^ aName 
			] 
	].!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:01:25' prior: 50611351!
removeFrom: aCustomerCollection thisCustomer: aName ifNotThereRemoveFrom: anOtherCustomerCollection  
       aCustomerCollection remove: aName ifAbsent: [anOtherCustomerCollection remove: aName ifAbsent: [^ NotFound signal]].! !
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:02:33' prior: 50611302!
removeCustomerNamed: aName 
 	self removeFrom: active thisCustomer: aName ifNotThereRemoveFrom: suspended  
	"self removeFrom: active thisCustomer: aName. 
	self removeFrom: suspended thisCustomer: aName.
        active remove: aName ifAbsent: [suspended remove: aName ifAbsent: [^ NotFound signal]].
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 15:02:35'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 15:02:35'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:04:30' prior: 50611368!
removeFrom: aCustomerCollection thisCustomer: aName ifNotThereRemoveFrom: anOtherCustomerCollection  
      
     aCustomerCollection remove: aName ifAbsent: [anOtherCustomerCollection remove: aName ifAbsent: [^ NotFound signal]].! !
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:05:42' prior: 50611379!
removeCustomerNamed: aName 
 	self removeFrom: active thisCustomer: aName ifNotThereRemoveFrom: suspended  
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 15:05:45'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 15:05:45'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 15:11:41' prior: 50611200!
addCustomerNamed: aName

        aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 15:28:29' prior: 50611059!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook removeCustomerNamed: 'Paul McCartney'] willRaise: NotFound ifChecks: [customerBook numberOfCustomers = 1.] and: [customerBook includesCustomerNamed: johnLennon]

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 15:28:47' prior: 50611074!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self verifyThat: customerBook HasThisNumberOfActiveCustomers: 0 
	ThisNumberOfSuspendedCustomers: 1 ThisNumberOfCustomer: 1.
	
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 15:35:30'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 15:35:30'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:02:35'!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: [firstCondition value] ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:04:05' prior: 50611489!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook removeCustomerNamed: 'Paul McCartney'] willRaise: NotFound ifChecks: [
		:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:05:35' prior: 50611564!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook removeCustomerNamed: 'Paul McCartney']
	      willRaise: NotFound 
	       ifChecks: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:06:41' prior: 50611046!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.
	
        self tryingToDo: [ customerBook addCustomerNamed: ''.]
	      willRaise: Error 
	       ifChecks: [:anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]

       "[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ] "! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:06:42'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:07:13' prior: 50611555!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: firstCondition value! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:07:15'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:07:15'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:07:15'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:07:15'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:07:15'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:07:15'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:07:15'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:07:15'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:07:31' prior: 50611621!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: [firstCondition value]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:08:50' prior: 50611110!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook suspendCustomerNamed: 'George Harrison']
	      willRaise: CantSuspend 
	       ifChecks: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]

	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:09:39' prior: 50611125!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook suspendCustomerNamed: johnLennon]
	      willRaise: CantSuspend 
	       ifChecks: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]
	
	
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:09:41'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:10:06' prior: 50611686!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self tryingToDo: [ customerBook suspendCustomerNamed: johnLennon] willRaise: CantSuspend ifChecks: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]
	
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:11:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:11:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:11:28'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:11:28'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:11:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:11:28'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:11:28'!
ERROR!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:11:28'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:11:51' prior: 50611660!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: firstCondition value! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:11:54'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:11:54'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:11:54'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:11:54'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:11:54'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:11:54'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:11:54'!
ERROR!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:11:54'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:12:03' prior: 50611756!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: (firstCondition value)! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:12:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:12:05'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:12:05'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:12:05'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:12:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:12:05'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:12:05'!
ERROR!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:12:05'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:12:16' prior: 50611795!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: firstCondition ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:12:18'!
PASSED!

!methodRemoval: CustomerBookTest #tryingToDo:willRaise:ifChecks:and: stamp: 'CB 4/12/2023 16:13:51'!
tryingToDo: anInvalidClosure willRaise: typeOfProhibitiveAction ifChecks: firstCondition and: secondCondition 

       [anInvalidClosure value.
	self fail ]
		on: typeOfProhibitiveAction 
		do: [ :anError | 
			self assert: (firstCondition value).
			self assert: secondCondition value] !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:21:20'!
xxxx
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:23:56'!
createACustomerBookWith: personToAdd
	
	| customerBook aName |
			
	customerBook := CustomerBook new.
	aName := personToAdd.
	customerBook addCustomerNamed: aName.
	^customerBook
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:25:33' prior: 50611034!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	customerBook := self createACustomerBookWith: 'Paul McCartney'.
	
	"customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney."
	
	self doTask:[customerBook removeCustomerNamed:paulMcCartney] shouldTakeLessThan: 100.
	  
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:25:40'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:28:32'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:29:40' prior: 50611893!
createACustomerBookWith: personToAdd
	
	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: personToAdd.
	^customerBook
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:29:42'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:29:42'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:29:42'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:30:00' prior: 50611925!
createACustomerBookWith: personToAdd
	
	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: personToAdd.
	^customerBook.
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:30:02'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:30:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:30:02'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:30:42'!
ERROR!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:32:04'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:32:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:32:04'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:38:28' prior: 50611902!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self doTask:[customerBook removeCustomerNamed:paulMcCartney] shouldTakeLessThan: 100.
	  
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:38:31' prior: 50612047!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |

	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self doTask:[customerBook removeCustomerNamed:paulMcCartney] shouldTakeLessThan: 100.
	  
! !

!methodRemoval: CustomerBookTest #createACustomerBookWith: stamp: 'CB 4/12/2023 16:38:43'!
createACustomerBookWith: personToAdd
	
	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: personToAdd.
	^customerBook.
	
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:38:48'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:38:57'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:39:08'!
PASSED!

!methodRemoval: CustomerBookTest #xxxx stamp: 'CB 4/12/2023 16:39:18'!
xxxx
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
!
!CustomerBook methodsFor: 'customer management' stamp: 'CB 4/12/2023 16:40:10' prior: 50611219!
numberOfCustomers
	
	^self numberOfSuspendedCustomers + self numberOfActiveCustomers 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'CB 4/12/2023 16:40:43' prior: 50611597!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.
	
        self tryingToDo: [ customerBook addCustomerNamed: ''.]
	      willRaise: Error 
	       ifChecks: [:anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]

      ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'CB 4/12/2023 16:41:09'!
PASSED!

----STARTUP---- (17 April 2023 13:42:04) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/17/2023 13:42:14'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/17/2023 13:42:14'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/17/2023 13:42:14'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----End fileIn of C:\Users\cecibola\OneDrive - Anheuser-Busch InBev\Desktop\Ejercicio Numeros\Pre-Numeros-Ejercicio Solu.st----!

----STARTUP---- (20 April 2023 11:19:16) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/20/2023 11:19:26'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/20/2023 11:19:26'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/20/2023 11:19:26'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'CB 4/20/2023 11:20:14'!
PASSED!

----STARTUP---- (22 April 2023 19:04:14) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #III stamp: 'CB 4/22/2023 19:04:22'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #II stamp: 'CB 4/22/2023 19:04:22'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

!classRemoval: #I stamp: 'CB 4/22/2023 19:04:22'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'nats'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

----SNAPSHOT----(22 April 2023 19:04:41) CuisUniversity-5706.image priorSource: 8766437!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:00'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:00'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:00'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 19:09:08'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:09'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:09'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:09'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:14'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:14'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:14'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:47'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:09:47'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:09:47'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:13:44' prior: 50613753!
pop
	estaVacio ifTrue: [self error: self class stackEmptyErrorDescription].
	self size = 1 ifTrue: [estaVacio := true].
	^ values removeLast ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 19:13:48'!
PASSED!

Object subclass: #Estado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Estado category: 'Stack-Exercise' stamp: 'CB 4/22/2023 19:14:45'!
Object subclass: #Estado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Estado subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NoVacio category: 'Stack-Exercise' stamp: 'CB 4/22/2023 19:15:03'!
Estado subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Estado subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Vacio category: 'Stack-Exercise' stamp: 'CB 4/22/2023 19:15:09'!
Estado subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\DevTools\ClassCommentBrowser.pck.st----!
!Estado methodsFor: 'no messages' stamp: 'CB 4/22/2023 19:25:51'!
m: stack
     self subclassResponsibility.! !
!NoVacio methodsFor: 'no messages' stamp: 'CB 4/22/2023 19:26:21' overrides: 50614817!
m: stack 
    ^true.! !
!Vacio methodsFor: 'no messages' stamp: 'CB 4/22/2023 19:26:40' overrides: 50614817!
m: stack 

   ^false.! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:28:28' prior: 50614826 overrides: 50614817!
m: stack 

    ^OOStack noPodesPorqueestasvacio.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:29:33' prior: 50613958!
pop
        ^Estado m: self.

	"estaVacio ifTrue: [self error: self class stackEmptyErrorDescription].
	self size = 1 ifTrue: [estaVacio := true].
	^ values removeLast 
	"! !

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1-Resolucion.st----!

!classRenamed: #Estado as: #OOStackStatus stamp: 'CB 4/22/2023 19:43:12'!
Smalltalk renameClassNamed: #Estado as: #OOStackStatus!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:43:12' prior: 50614836!
pop
        ^OOStackStatus m: self.

	"estaVacio ifTrue: [self error: self class stackEmptyErrorDescription].
	self size = 1 ifTrue: [estaVacio := true].
	^ values removeLast 
	"! !

Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'CB 4/22/2023 19:46:10'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:46:47' prior: 50613744 overrides: 16920235!
initialize
	values := OrderedCollection new.
	stackStatus := NoVacio new. ! !

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Packages\TerseGuide.pck.st----!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:52:23' prior: 50616045 overrides: 16920235!
initialize
	values := OrderedCollection new.
	stackStatus := Vacio new. ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:54:00' prior: 50613759!
push: aPhraseToAdd
	stackStatus  := NoVacio new.
	values add: aPhraseToAdd 
	! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:56:59' prior: 50614822 overrides: 50614817!
m: stack 
    ^stack popStackNotEmpty.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 19:57:57'!
popStackNotEmpty
          self size = 1 ifTrue: [stackStatus := Vacio new].
        ^values removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:00:41' prior: 50616023!
pop
        ^OOStackStatus checkingMyStackStatus: self.

	"estaVacio ifTrue: [self error: self class stackEmptyErrorDescription].
	self size = 1 ifTrue: [estaVacio := true].
	^ values removeLast 
	"! !
!OOStackStatus methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:00:59'!
checkingMyStackStatus: aStackToCheck
     self subclassResponsibility.! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:01:47' overrides: 50619003!
checkingMyStackStatus: aStackToCheck
    ^aStackToCheck popStackNotEmpty.! !

!methodRemoval: NoVacio #m: stamp: 'CB 4/22/2023 20:01:52'!
m: stack 
    ^stack popStackNotEmpty.!
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:03:47' prior: 50619009 overrides: 50619003!
checkingMyStackStatus: aStackToCheck
    ^aStackToCheck popNotEmptyStack.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:04:00'!
popStackEmptyStack
          self size = 1 ifTrue: [stackStatus := Vacio new].
        ^values removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:04:05'!
popNotEmptyStack
          self size = 1 ifTrue: [stackStatus := Vacio new].
        ^values removeLast.! !

!methodRemoval: OOStack #popStackEmptyStack stamp: 'CB 4/22/2023 20:04:11'!
popStackEmptyStack
          self size = 1 ifTrue: [stackStatus := Vacio new].
        ^values removeLast.!

!methodRemoval: OOStack #popStackNotEmpty stamp: 'CB 4/22/2023 20:04:15'!
popStackNotEmpty
          self size = 1 ifTrue: [stackStatus := Vacio new].
        ^values removeLast.!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:05:17'!
popEmptyStack
        ^self error: self size.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:05:41' prior: 50619048!
popEmptyStack
        ^self error: self class stackEmptyErrorDescription.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:05:52' prior: 50618994!
pop
        ^OOStackStatus checkingMyStackStatus: self.
	! !

!methodRemoval: OOStackStatus #m: stamp: 'CB 4/22/2023 20:05:59'!
m: stack
     self subclassResponsibility.!
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:06:32' overrides: 50619003!
checkingMyStackStatus: aStackToCheck
    ^aStackToCheck popEmptyStack! !

!methodRemoval: Vacio #m: stamp: 'CB 4/22/2023 20:06:38'!
m: stack 

    ^OOStack noPodesPorqueestasvacio.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:06:44'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:06:44'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:06:44'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:06:44'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:06:44'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:06:44'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:06:44'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:06:44'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:06:44'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:06:44'!
PASSED!

----SNAPSHOT----(22 April 2023 20:06:51) CuisUniversity-5706.image priorSource: 9029016!
!Vacio class methodsFor: 'no messages' stamp: 'CB 4/22/2023 20:07:25' overrides: 16785646!
new
	^self basicNew initialize ! !
!Vacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:09:37' prior: 50619112 overrides: 16785646!
new
	^self new initialize.! !

self new initialize.!

!methodRemoval: Vacio class #new stamp: 'CB 4/22/2023 20:14:21'!
new
	^self new initialize.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:15:33'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:15:33'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:15:33'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:15:33'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:15:33'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:15:33'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:15:33'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:15:33'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:15:33'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:15:33'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:15:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:15:51'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:15:51'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:15:51'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:15:51'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:15:51'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:15:51'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:15:51'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:15:51'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:15:51'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:15:53'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:16:50' prior: 50619059!
pop
        ^stackStatus checkingMyStackStatus: self.
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:16:53'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:16:53'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:18:24' prior: 50613749!
isEmpty
	^stackStatus isEmpty! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:19:17'!
isEmpty
    ^false.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:19:54' prior: 50619231!
isEmpty
	^stackStatus isEmpty.! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:20:19'!
isEmpty
    ^true! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:20:21'!
isEmptys
    ^true! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:20:22' prior: 50619243!
isEmpty
    ^true! !

!methodRemoval: Vacio #isEmptys stamp: 'CB 4/22/2023 20:20:27'!
isEmptys
    ^true!
!OOStackStatus methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:20:46'!
isEmpty
     self subclassResponsibility.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:20:50'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:20:50'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:22:39' prior: 50613765 overrides: 16901663!
size
	^values size! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:23:26'!
topNotEmptyStack
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription].
	^ values at: (values size) ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:24:03' prior: 50619298!
topNotEmptyStack
	^values at: values size! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:24:25'!
topEmptyStack
	^self error: self class stackEmptyErrorDescription.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:27:20' prior: 50613769!
top
	^stackStatus checkingMyStackStatusTryingToTop: self. ! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:27:51'!
checkingMyStackStatusTryingToTop:  aStackToCheck
    ^aStackToCheck topEmptyStack! !
!Vacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:28:04'!
checkingMyStackStatusTryingToPop:  aStackToCheck
    ^aStackToCheck popEmptyStack! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:28:26' prior: 50619193!
pop
        ^stackStatus checkingMyStackStatusToPop: self.
	! !

!methodRemoval: Vacio #checkingMyStackStatus: stamp: 'CB 4/22/2023 20:28:37'!
checkingMyStackStatus: aStackToCheck
    ^aStackToCheck popEmptyStack!
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:28:55'!
checkingMyStackStatusToPop: aStackToCheck
    ^aStackToCheck popNotEmptyStack.! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:29:01'!
checkingMyStackStatusToTop: aStackToCheck
    ^aStackToCheck topNotEmptyStack.! !

!methodRemoval: NoVacio #checkingMyStackStatus: stamp: 'CB 4/22/2023 20:29:09'!
checkingMyStackStatus: aStackToCheck
    ^aStackToCheck popNotEmptyStack.!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:29:26' prior: 50619331!
pop
        ^stackStatus checkingMyStackStatusTryingToPop: self.
	! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:29:54'!
checkingMyStackStatusTryingToPop: aStackToCheck
    ^aStackToCheck popNotEmptyStack.! !
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:29:57'!
checkingMyStackStatusTryingToTop: aStackToCheck
    ^aStackToCheck popNotEmptyStack.! !

!methodRemoval: NoVacio #checkingMyStackStatusToTop: stamp: 'CB 4/22/2023 20:30:00'!
checkingMyStackStatusToTop: aStackToCheck
    ^aStackToCheck topNotEmptyStack.!

!methodRemoval: NoVacio #checkingMyStackStatusToPop: stamp: 'CB 4/22/2023 20:30:01'!
checkingMyStackStatusToPop: aStackToCheck
    ^aStackToCheck popNotEmptyStack.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:30:06'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:30:06'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:30:06'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:30:55' prior: 50619305!
topNotEmptyStack
	^values at: (values size)! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:30:57'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:30:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:30:57'!
FAILURE!
!NoVacio methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:31:32' prior: 50619368!
checkingMyStackStatusTryingToTop: aStackToCheck
    ^aStackToCheck topNotEmptyStack.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:31:36'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:31:36'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:32:19' prior: 50619420!
topNotEmptyStack
	^values at: values size! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:32:20'!
PASSED!

----SNAPSHOT----(22 April 2023 20:32:24) CuisUniversity-5706.image priorSource: 9198660!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Solucion\Numero-Solution-3.st----!

----SNAPSHOT----(22 April 2023 20:40:12) CuisUniversity-5706.image priorSource: 9212352!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Solucion\Numero-Solution-3.6.st----!
!OOStackStatus class methodsFor: 'no messages' stamp: 'CB 4/22/2023 20:44:07'!
canHandle: size
        self subclassResponsibility ! !
!NoVacio class methodsFor: 'no messages' stamp: 'CB 4/22/2023 20:44:52' overrides: 50621527!
canHandle: aValue.
       ^aValue > 1! !
!Vacio class methodsFor: 'no messages' stamp: 'CB 4/22/2023 20:45:38' overrides: 50621527!
canHandle: aValue
       ^aValue = 1 or: aValue = 0.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:47:01' prior: 50619030!
popNotEmptyStack
          stackStatus := OOStackStatus canHandle: self size.
        ^values removeLast.! !
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:51:01'!
with: aValue
       self allSubclasses detect:[:aClass | aClass canHandle: aValue] for: aValue! !
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:51:52'!
for: aValue
       self subclassResponsibility .! !
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:51:53' prior: 50621555!
for: aValue
       self subclassResponsibility! !
!NoVacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:52:32' overrides: 50621560!
for: aValue.
     self new! !
!Vacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:52:54' overrides: 50621560!
for: aValue
      ^self new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:54:06' prior: 50618977!
push: aPhraseToAdd
	stackStatus := OOStackStatus with: self size.
	values add: aPhraseToAdd 
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:54:27' prior: 50621542!
popNotEmptyStack
          stackStatus := OOStackStatus with: self size.
        ^values removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 20:54:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:54:28'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 20:54:28'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 20:54:28'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:54:44' prior: 50621580!
popNotEmptyStack
         stackStatus := OOStackStatus with: self size.
        ^values removeLast.! !
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 20:56:20' prior: 50621549!
with: aValue
       ^(self allSubclasses detect:[:aClass | aClass canHandle: aValue]) for: aValue! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:00:00' prior: 50621619!
popNotEmptyStack
         |tamañoProximoStack|
         tamañoProximoStack := self size - 1.
         stackStatus := OOStackStatus with:tamañoProximoStack.
        ^values removeLast.! !
!NoVacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:00:23' prior: 50621532 overrides: 50621527!
canHandle: aValue.
       ^aValue >= 1! !
!Vacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:01:07' prior: 50621537 overrides: 50621527!
canHandle: aValue
       ^aValue = 0.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 21:01:14'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 21:01:14'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:01:14'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 21:01:14'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:01:14'!
PASSED!
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:01:59' prior: 50621626!
with: aValue
       ^(OOStackStatus allSubclasses detect:[:aClass | aClass canHandle: aValue]) for: aValue! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 21:02:06'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 21:02:06'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:02:06'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 21:02:06'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:02:06'!
PASSED!
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:04:09' prior: 50621684!
with: aValue
       ^(OOStackStatus allSubclasses detect:[:aClass | aClass canHandle: aValue]) new! !
!OOStackStatus class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:04:53' prior: 50621724!
with: aValue
       ^(OOStackStatus allSubclasses detect:[:aClass | aClass canHandle: aValue]) new.! !

!methodRemoval: OOStackStatus class #for: stamp: 'CB 4/22/2023 21:04:58'!
for: aValue
       self subclassResponsibility!

!methodRemoval: NoVacio class #for: stamp: 'CB 4/22/2023 21:05:01'!
for: aValue.
     self new!

!methodRemoval: Vacio class #for: stamp: 'CB 4/22/2023 21:05:04'!
for: aValue
      ^self new.!
!Vacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:05:37' overrides: 16785646!
new
    ^self new.! !
!NoVacio class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:06:15' overrides: 16785646!
new
     ^self new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:07:24' prior: 50618971 overrides: 16920235!
initialize
	values := OrderedCollection new.
	stackStatus := OOStackStatus with: values size. ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:08:08' prior: 50621574!
push: aPhraseToAdd
	stackStatus := OOStackStatus with: (self size + 1).
	values add: aPhraseToAdd 
	! !

!methodRemoval: Vacio class #new stamp: 'CB 4/22/2023 21:09:02'!
new
    ^self new.!

!methodRemoval: NoVacio class #new stamp: 'CB 4/22/2023 21:09:11'!
new
     ^self new.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/22/2023 21:09:18'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/22/2023 21:09:18'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'CB 4/22/2023 21:34:11'!
findSentencesByPrefix: aPrefix
             ! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'CB 4/22/2023 21:37:22'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:37:17'!
initializeWith: sentenceStack
        sentences := sentenceStack. ! !
!SentenceFinderByPrefix class methodsFor: 'no messages' stamp: 'CB 4/22/2023 21:39:14'!
with: sentenceStack
       self new initializeWith: sentenceStack.! !

----SNAPSHOT----(22 April 2023 21:39:19) CuisUniversity-5706.image priorSource: 9241641!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'CB 4/22/2023 21:45:53'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:45:51' prior: 50621807!
findSentencesByPrefix: aPrefix
          
           |lastSentence |  
           lastSentence := sentences top.
           sentences pop. 
           (aPrefix match: lastSentence) ifTrue: [encontradas push: lastSentence].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:46:19' prior: 50621820!
initializeWith: sentenceStack
        sentences := sentenceStack. 
        encontradas := OOStack new.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:47:58'!
findNextSentenceByPrefix: aPrefix
          
           |lastSentence |  
           lastSentence := sentences top.
           sentences pop. 
           (aPrefix match: lastSentence) ifTrue: [encontradas push: lastSentence].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:52:06'!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence |  
           lastSentence := sentences top.
           sentences pop. 
           (aPrefix match: lastSentence) ifTrue: [encontradas push: lastSentence].
            self findNextSentenceByPrefix: aPrefix inNext: sentences pop.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:55:08' prior: 50621870!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences pop. 
           (aPrefix match: lastSentence) ifTrue: [encontradas push: lastSentence].
            
           self findNextSentenceByPrefix: aPrefix inNext: sentences.! !

!methodRemoval: SentenceFinderByPrefix #findNextSentenceByPrefix: stamp: 'CB 4/22/2023 21:55:17'!
findNextSentenceByPrefix: aPrefix
          
           |lastSentence |  
           lastSentence := sentences top.
           sentences pop. 
           (aPrefix match: lastSentence) ifTrue: [encontradas push: lastSentence].!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 21:56:38' prior: 50621842!
findSentencesByPrefix: aPrefix
          
           self findNextSentenceByPrefix: aPrefix inNext: sentences! !

----SNAPSHOT----(22 April 2023 21:56:49) CuisUniversity-5706.image priorSource: 9285733!

'Wint' match: 'winter is coming'!

'Wint' match: 'winter is coming'!

'Wint' match: 'Winter is coming' false !

'Wint' match: 'Winter is coming'!

'Wint' match: ' Winter is coming' false !

'Winter is coming' indexOf: 'Wint' ifAbsent: [0]!

'Wint' is: ' Winter is coming'!

'Winter is coming' includesSubString: 'Wint'!

'Winter is coming' includesSubString: 'wint'!

'probando Wint' includesSubString: 'Wint'!

'aaa wint' includesSubString: 'Wint'!

'aa w i n t' includesSubString: 'wint'!

'aaa try' includesSubString: 'aaaa'!

'aaawind' includesSubString: 'wind'!

'Winter aa' beginsWith: 'Wint'!

'Winter aa' beginsWith: 'wint' true !

'Winter aa' beginsWith: 'wint' !

'aaaWint' 	beginsWith: 'Wint'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:11:26' prior: 50621884!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences pop. 
           (aPrefix beginsWith: lastSentence) ifTrue: [encontradas push: lastSentence].
            
           self findNextSentenceByPrefix: aPrefix inNext: sentences.! !
!SentenceFinderByPrefixTest methodsFor: 'no messages' stamp: 'CB 4/22/2023 22:14:21'!
test01FindUniqueSentence

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:14:34'!
test01FindUniqueSentenceWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:14:45'!
test01FindOnlyOneSentenceWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:14:55'!
test01FindMoreThanOneSentenceWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !

!methodRemoval: SentenceFinderByPrefixTest #test01FindUniqueSentence stamp: 'CB 4/22/2023 22:15:00'!
test01FindUniqueSentence

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."!

!methodRemoval: SentenceFinderByPrefixTest #test01FindUniqueSentenceWithPrefix stamp: 'CB 4/22/2023 22:15:03'!
test01FindUniqueSentenceWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:15:07'!
test01FindMoreThanOneSentencesWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !

!methodRemoval: SentenceFinderByPrefixTest #test01FindMoreThanOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:15:16'!
test01FindMoreThanOneSentenceWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:15:29'!
test02FindMoreThanOneSentencesWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !

!methodRemoval: SentenceFinderByPrefixTest #test01FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:15:29'!
test01FindMoreThanOneSentencesWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:16:13'!
test03NoSentencesWithPrefix

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:17:29'!
test04SentenceWithLowerCaseAndPrefixWithUpperCase

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:17:43'!
test05SentenceWithUpperCaseAndPrefixWithLowerCase

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:18:35'!
test05FindSentencesWithPrefixInCorrectOrder

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:19:05'!
test06FindSentencesWithPrefixInCorrectOrder

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."! !

!methodRemoval: SentenceFinderByPrefixTest #test05FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:19:05'!
test05FindSentencesWithPrefixInCorrectOrder

"	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject."!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:19:40' prior: 50622089!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject |
	
	stack := SentenceFinderByPrefix .
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:25:48' prior: 50622109!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	self assert: stack1 equals: sentencesToFind ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:26:23' prior: 50622119!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	self assert: stack1 equals: (sentencesToFind findSentencesByPrefix: 'the')! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:26:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:26:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:26:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:26:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:26:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:26:28'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:26:28'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:26:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:26:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:26:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:26:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:26:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:26:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:26:59'!
ERROR!

sentencesToFind !

sentences!

stack!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:29:48' prior: 50621825!
with: sentenceStack
       ^self new initializeWith: sentenceStack.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:29:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:29:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:29:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:29:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:29:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:29:54'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:29:54'!
FAILURE!

 stack1!

sentencesToFind findSentencesByPrefix: 'the'!

encontradas!

encontradas top!

sentences top!

sentences top!

an OOStack!

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:32:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:32:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:32:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:32:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:32:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:32:33'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:32:33'!
FAILURE!

sentencesToFind!

SentenceFinderByPrefix with: stack!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:37:12' prior: 50622216!
with: sentenceStack
       self new initializeWith: sentenceStack.! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:37:43' prior: 50622282!
with: sentenceStack
       ^self new initializeWith: sentenceStack.! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:38:24' prior: 50622288!
with: sentenceStack
       ^self basicNew initializeWith: sentenceStack.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:38:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:38:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:38:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:38:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:38:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:38:29'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:38:29'!
FAILURE!

SentenceFinderByPrefix with: stack!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:39:04' prior: 50622294!
with: sentenceStack
       ^self new initializeWith: sentenceStack.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:41:06' prior: 50621853!
initializeWith: sentenceStack
        sentences := OOStack new.
        sentences := sentenceStack. 
        encontradas := OOStack new.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:41:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:41:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:41:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:41:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:41:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:41:10'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:41:10'!
FAILURE!

SentenceFinderByPrefix with: stack!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:41:49' prior: 50622334!
initializeWith: sentenceStack
        sentences := sentenceStack. 
        encontradas := OOStack new.! !

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:42:24'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:42:24'!
FAILURE!

stack1!

stack!

stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:43:51' prior: 50622140!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	
	
	self assert: stack1 equals: (sentencesToFind findSentencesByPrefix: 'the')! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:44:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:44:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:44:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:44:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:44:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:44:10'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:44:10'!
FAILURE!

stack1!

stack!

stack!

stack!

stack push: pushedObject0.!

stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.!

stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:46:38' prior: 50621910!
findSentencesByPrefix: aPrefix
          
           ^self findNextSentenceByPrefix: aPrefix inNext: sentences! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:46:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:46:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:46:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:46:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:46:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:46:41'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:46:41'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:47:29' prior: 50621942!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences pop. 
           (aPrefix beginsWith: lastSentence) ifTrue: [encontradas push: lastSentence].
            
           ^self findNextSentenceByPrefix: aPrefix inNext: sentences.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:47:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:47:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:47:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:47:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:47:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:47:33'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:47:33'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:48:04' prior: 50622478!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences:=sentences pop. 
           (aPrefix beginsWith: lastSentence) ifTrue: [encontradas push: lastSentence].
            
           ^self findNextSentenceByPrefix: aPrefix inNext: sentences.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:48:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:48:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:48:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:48:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:48:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:48:05'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:48:05'!
ERROR!

sentences !

sentences top!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:49:23' prior: 50622520!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences pop. 
           (aPrefix beginsWith: lastSentence) ifTrue: [encontradas push: lastSentence].
            
           ^self findNextSentenceByPrefix: aPrefix inNext: sentences.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:49:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:49:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:49:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:49:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:49:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:49:30'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:49:30'!
FAILURE!

(sentencesToFind findSentencesByPrefix: 'the')!

(sentencesToFind findSentencesByPrefix: 'the')!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:51:06' prior: 50622386!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	
	
	self assert: OOStack new equals: (sentencesToFind findSentencesByPrefix: 'the')! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:51:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:51:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:51:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:51:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:51:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:51:12'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:51:12'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:51:21' prior: 50622610!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	
	
	self assert: stack1 equals: (sentencesToFind findSentencesByPrefix: 'the')! !

self assert: stack1 equals: stack1!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:52:22' prior: 50622659!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	
	(sentencesToFind findSentencesByPrefix: 'the').
	self assert: stack1 equals: stack1.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:52:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:52:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:52:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:52:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:52:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:52:26'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:52:46' prior: 50622682!
test06FindSentencesWithPrefixInCorrectOrder

	| stack pushedObject0 pushedObject1 pushedObject2 stack1 sentencesToFind| 
	
	stack := OOStack new.
	pushedObject0 := 'the winter is coming'.
	pushedObject1 := 'the summer is coming'.
	pushedObject2 := 'never give up'.
	stack push: pushedObject0.
	stack push: pushedObject1.
	stack push: pushedObject2.
	
	sentencesToFind := SentenceFinderByPrefix with: stack.
	
	stack1 := OOStack new.
	stack1 push: pushedObject0.
	stack1 push: pushedObject1.
	
	
	
	self assert: stack1 equals: (sentencesToFind findSentencesByPrefix: 'the').! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'CB 4/22/2023 22:53:45' prior: 50622564!
findNextSentenceByPrefix: aPrefix inNext: aSentenceStack
           |lastSentence|  
           sentences isEmpty ifTrue:[^encontradas].

           lastSentence := sentences top.
           sentences pop. 
           (lastSentence beginsWith: aPrefix) ifTrue: [encontradas push: lastSentence].
            
           ^self findNextSentenceByPrefix: aPrefix inNext: sentences.! !

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/22/2023 22:53:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindMoreThanOneSentencesWithPrefix stamp: 'CB 4/22/2023 22:53:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/22/2023 22:53:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/22/2023 22:53:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/22/2023 22:53:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:53:51'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/22/2023 22:53:51'!
FAILURE!

(sentencesToFind findSentencesByPrefix: 'the')!

----SNAPSHOT----(22 April 2023 22:56:43) CuisUniversity-5706.image priorSource: 9288496!

----SNAPSHOT----(22 April 2023 22:56:47) CuisUniversity-5706.image priorSource: 9316516!

----SNAPSHOT----(22 April 2023 23:35:38) CuisUniversity-5706.image priorSource: 9316606!

----SNAPSHOT----(23 April 2023 09:50:39) CuisUniversity-5706.image priorSource: 9316696!

----STARTUP---- (24 April 2023 13:59:02) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 4/24/2023 13:59:10'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 4/24/2023 13:59:11'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 4/24/2023 13:59:11'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 4/24/2023 13:59:11'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 4/24/2023 13:59:11'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 4/24/2023 13:59:11'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 4/24/2023 13:59:11'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #TurboDeactivated stamp: 'CB 4/24/2023 13:59:21'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 4/24/2023 13:59:21'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 4/24/2023 13:59:21'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 4/24/2023 13:59:21'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 4/24/2023 13:59:21'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 4/24/2023 13:59:21'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 4/24/2023 13:59:22'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 4/24/2023 13:59:22'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 4/24/2023 13:59:22'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 4/24/2023 13:59:22'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Fraccion stamp: 'CB 4/24/2023 13:59:26'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'CB 4/24/2023 13:59:26'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'CB 4/24/2023 13:59:26'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'CB 4/24/2023 13:59:27'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'CB 4/24/2023 13:59:27'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'CB 4/24/2023 13:59:27'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'CB 4/24/2023 13:59:27'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'CB 4/24/2023 13:59:27'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'CB 4/24/2023 13:59:27'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'CB 4/24/2023 13:59:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindOnlyOneSentenceWithPrefix stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindSentencesWithPrefixInCorrectOrder stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NoSentencesWithPrefix stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04SentenceWithLowerCaseAndPrefixWithUpperCase stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05SentenceWithUpperCaseAndPrefixWithLowerCase stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06SentenceStackDoesNotChangeAfterSentenceFinderOperation stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07PrefixShouldNotContainWhitespace stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08PrefixShouldNotBeEmpty stamp: 'CB 4/24/2023 13:59:48'!
PASSED!

----STARTUP---- (24 April 2023 16:21:44) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 4/24/2023 16:22:06'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 4/24/2023 16:22:07'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 4/24/2023 16:22:07'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 4/24/2023 16:22:07'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 4/24/2023 16:22:07'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 4/24/2023 16:22:07'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 4/24/2023 16:22:07'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

----STARTUP---- (24 April 2023 20:17:17) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 4/24/2023 20:18:19'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 4/24/2023 20:18:19'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 4/24/2023 20:18:19'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 4/24/2023 20:18:19'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 4/24/2023 20:18:19'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 4/24/2023 20:18:20'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 4/24/2023 20:18:20'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

----STARTUP---- (24 April 2023 21:46:59) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 4/24/2023 21:47:05'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 4/24/2023 21:47:05'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 4/24/2023 21:47:06'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 4/24/2023 21:47:06'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 4/24/2023 21:47:06'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 4/24/2023 21:47:06'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 4/24/2023 21:47:06'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

----STARTUP---- (27 April 2023 18:32:35) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


${ asciiValue!

$z asciiValue !

$a asciiValue !

$´ asciiValue !

 nil !

$" asciiValue  !

$A asciiValue !

$A asciiValue !

$M asciiValue!

$N asciiValue!

$a asciiValue!

$Z asciiValue!

$ asciiValue!

'' asciiValue!

----STARTUP---- (4 May 2023 17:13:46) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 5/4/2023 17:15:01'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 5/4/2023 17:15:01'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 5/4/2023 17:15:01'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 5/4/2023 17:15:01'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 5/4/2023 17:15:01'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 5/4/2023 17:15:01'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 5/4/2023 17:15:02'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #TurboDeactivated stamp: 'CB 5/4/2023 17:15:05'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/4/2023 17:15:05'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/4/2023 17:15:05'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/4/2023 17:15:05'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/4/2023 17:15:05'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/4/2023 17:15:05'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/4/2023 17:15:06'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/4/2023 17:15:06'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/4/2023 17:15:06'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/4/2023 17:15:06'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Fraccion stamp: 'CB 5/4/2023 17:15:09'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'CB 5/4/2023 17:15:09'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'CB 5/4/2023 17:15:09'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'CB 5/4/2023 17:15:09'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'CB 5/4/2023 17:15:09'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'CB 5/4/2023 17:15:09'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'CB 5/4/2023 17:15:10'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'CB 5/4/2023 17:15:10'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'CB 5/4/2023 17:15:10'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #CommentGuideWrapper stamp: 'CB 5/4/2023 17:20:59'!
ObjectExplorerWrapper subclass: #CommentGuideWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

!classRemoval: #NoCommentsWindow stamp: 'CB 5/4/2023 17:20:59'!
SystemWindow subclass: #NoCommentsWindow
	instanceVariableNames: 'aList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

!classRemoval: #CommentGuideWindow stamp: 'CB 5/4/2023 17:20:59'!
SystemWindow subclass: #CommentGuideWindow
	instanceVariableNames: 'listMorph textMorph nwin hwin'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

!classRemoval: #CommentGuideListMorph stamp: 'CB 5/4/2023 17:20:59'!
HierarchicalListMorph subclass: #CommentGuideListMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

!classRemoval: #NotCommented stamp: 'CB 5/4/2023 17:20:59'!
ActiveModel subclass: #NotCommented
	instanceVariableNames: 'classList bumList bumListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

!classRemoval: #CommentGuide stamp: 'CB 5/4/2023 17:20:59'!
AbstractHierarchicalList subclass: #CommentGuide
	instanceVariableNames: 'window rootNames root browser subList index key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ClassCommentBrowser'!

TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #TDDDoorsOpen category: '' stamp: 'CB 5/4/2023 17:26:33'!
TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #TDDDoorsOpen category: '' stamp: 'CB 5/4/2023 17:27:19'!
TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TDDDoorsOpen category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:27:39'!
TestCase subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

Object subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TDDDoorsOpen category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:28:17'!
Object subclass: #TDDDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

Object subclass: #TestDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TestDoorsOpen category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:28:27'!
Object subclass: #TestDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

Object subclass: #TestDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TestDoorsOpen category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:29:11'!
Object subclass: #TestDoorsOpen
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

Object subclass: #TestDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Door-Exercise'!

!classDefinition: #TestDoors category: 'Door-Exercise' stamp: 'CB 5/4/2023 17:29:55'!
Object subclass: #TestDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Door-Exercise'!

TestCase subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TestDoor category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:30:44'!
TestCase subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

----STARTUP---- (4 May 2023 17:31:12) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


Object subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TestDoor category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:31:33'!
Object subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

TestCase subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #TestDoor category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:31:46'!
TestCase subclass: #TestDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!

!classDefinition: #DoorsToggler category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:50:48'!
Object subclass: #DoorsToggler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!
!TestDoor methodsFor: 'no messages' stamp: 'CB 5/4/2023 17:49:27'!
test01AllDoorsAreInitiallyClosed
   | toggler |
toggler := DoorsToggler new.
   self deny: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 17:50:58'!
ERROR!
!DoorsToggler methodsFor: 'dad' stamp: 'CB 5/4/2023 17:51:15'!
isDoorOpen: aRenameMe1 
	self shouldBeImplemented.! !
!DoorsToggler methodsFor: 'dad' stamp: 'CB 5/4/2023 17:51:36' prior: 50626264!
isDoorOpen: aDoorNumber 
	^false! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 17:51:39'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 17:51:39'!
PASSED!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 17:53:01'!
test02TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 17:53:06'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 17:53:18'!
toggleDoors
	self shouldBeImplemented.! !

!classDefinition: #DoorsToggler category: 'Doors-Exercise' stamp: 'CB 5/4/2023 17:54:01'!
Object subclass: #DoorsToggler
	instanceVariableNames: 'opened'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 17:53:59' prior: 50626290!
toggleDoors
	opened := true! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 17:54:04' prior: 50626302!
toggleDoors
	opened := true.! !
!DoorsToggler methodsFor: 'dad' stamp: 'CB 5/4/2023 17:54:28' prior: 50626269!
isDoorOpen: aDoorNumber 
	^opened.! !
!DoorsToggler methodsFor: 'dad' stamp: 'CB 5/4/2023 17:54:50' overrides: 16920235!
initialize
    opened := false! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 17:55:19'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 17:55:19'!
PASSED!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 17:58:56' prior: 50626255!
test01AllDoorsAreInitiallyClosed
   | toggler |
   toggler := DoorsToggler new.
   self deny: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:05:09'!
test03TogglingADoorFromOpenedShouldCloseIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:05:37'!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !

!methodRemoval: TestDoor #test03TogglingADoorFromOpenedShouldCloseIt stamp: 'CB 5/4/2023 18:05:37'!
test03TogglingADoorFromOpenedShouldCloseIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:05:41'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:05:41'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:05:41'!
PASSED!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:05:49' prior: 50626341!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    toggler toggleDoors.
    self deny: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:05:52'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:05:52'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:05:52'!
FAILURE!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:05:52'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:06:46' prior: 50626306!
toggleDoors
	opened := true.
	^opened not.! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:06:50'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:06:50'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:06:50'!
FAILURE!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:06:50'!
FAILURE!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:09:29'!
test04TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:09:51' prior: 50626392!
toggleDoors
	opened := true.
	opened := opened not.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:09:56' prior: 50626418!
toggleDoors
	opened := opened not.! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:09:58'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:09:58'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:09:58'!
PASSED!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:09:58'!
PASSED!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:12:36'!
test04TogglingTwoDoorsFromClosedShouldOpenThem
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).! !

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:37'!
PASSED!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:54'!
PASSED!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:56'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:12:56'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:56'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:12:56'!
PASSED!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:12:56'!
PASSED!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:12:56'!
PASSED!
!DoorsToggler methodsFor: 'accesing' stamp: 'CB 5/4/2023 18:14:09' prior: 50626310!
isDoorOpen: aDoorNumber 
	^opened at: aDoorNumber.! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:15:09' prior: 50626314 overrides: 16920235!
initialize
    opened := OrderedCollection new.! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:16:06' prior: 50626514 overrides: 16920235!
initialize
    opened := OrderedCollection new.
    opened add: false.
    opened add: false. ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:16:12'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:12'!
ERROR!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:16:12'!
ERROR!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:12'!
ERROR!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:16:12'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:16:17'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:19'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:19'!
ERROR!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:22'!
ERROR!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:22'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:32'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:16:32'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:17:15'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:17:15'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:18:15' prior: 50626423!
toggleDoors
	opened := opened do: [:aDoor | aDoor not].! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:18:23'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:23'!
FAILURE!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:18:23'!
PASSED!

!testRun: #TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:24'!
FAILURE!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:18:24'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:26'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:26'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:32'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:18:32'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:19:03'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:19:03'!
FAILURE!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:19:18'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:19:20'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:19:24'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:19:24'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:20:10' prior: 50626570!
toggleDoors
	opened := opened do: [:aDoor | (opened at: aDoor) not].! !

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:14'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:14'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:20:27' prior: 50626624!
toggleDoors
	opened := opened do: [:aDoor |  aDoor not].! !

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:30'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:30'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:57'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:20:57'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:23:38'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:23:38'!
FAILURE!

toggler toggleDoors.!

toggler!

toggler toggleDoors.!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:25:03' prior: 50626636!
toggleDoors
	opened do: [:aDoor |  aDoor not].! !

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:25:08'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:25:08'!
FAILURE!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:25:23' prior: 50626662!
toggleDoors
	opened := opened do: [:aDoor |  aDoor not].! !

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:25:41'!
FAILURE!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:25:41'!
FAILURE!

DoorsToggler new!

!methodRemoval: TestDoor #test04TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:26:25'!
test04TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:28:49' prior: 50626673!
toggleDoors
	opened := opened  not.! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:28:58' prior: 50626519 overrides: 16920235!
initialize
    opened := false.
    ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:29:04'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:29:04'!
ERROR!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:29:04'!
ERROR!

!testRun: #TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:29:04'!
ERROR!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:31:42'!
test04TogglingForTheSecondTimeShouldOpenThem
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self deny: (toggler isDoorOpen: 2).! !

!methodRemoval: TestDoor #test04TogglingTwoDoorsFromClosedShouldOpenThem stamp: 'CB 5/4/2023 18:31:49'!
test04TogglingTwoDoorsFromClosedShouldOpenThem
   | toggler |
    toggler := DoorsToggler new.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:32:03'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:32:03'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:32:07'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:32:07'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:32:11'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:32:11'!
ERROR!
!DoorsToggler methodsFor: 'accesing' stamp: 'CB 5/4/2023 18:32:25' prior: 50626509!
isDoorOpen: aDoorNumber 
	^opened.! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:32:29'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:32:31'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:32:32'!
PASSED!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:32:34'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:32:34'!
ERROR!
!DoorsToggler class methodsFor: 'instance creation' stamp: 'CB 5/4/2023 18:32:52'!
with: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aSmallInteger ! !
!DoorsToggler class methodsFor: 'error handling' stamp: 'CB 5/4/2023 18:33:13' overrides: 16902196!
shouldBeImplemented
	self shouldBeImplemented.! !
!DoorsToggler class methodsFor: 'instance creation' stamp: 'CB 5/4/2023 18:34:04' prior: 50626775!
with: aDoorQuantity 
	^self new initializeWith: aDoorQuantity. ! !

!methodRemoval: DoorsToggler class #shouldBeImplemented stamp: 'CB 5/4/2023 18:34:10'!
shouldBeImplemented
	self shouldBeImplemented.!
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:34:58'!
initializeWith: aDoorQuantity
    opened := OrderedCollection new.! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:36:12' prior: 50626798!
initializeWith: aDoorQuantity
    opened := OrderedCollection initializeOfSize: aDoorQuantity.! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:40:15' prior: 50626803!
initializeWith: aDoorQuantity
    | numberOfDoors |
opened := OrderedCollection new.
    numberOfDoors := 0.
    (numberOfDoors <= aDoorQuantity) whileTrue:  [opened add: false.]
   ! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:40:22' prior: 50626809!
initializeWith: aDoorQuantity
    | numberOfDoors |
    opened := OrderedCollection new.
    numberOfDoors := 0.
    (numberOfDoors <= aDoorQuantity) whileTrue:  [opened add: false.]
   ! !

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:40:28'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:40:28'!
ERROR!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:40:33'!
PASSED!
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:41:06' prior: 50626818!
initializeWith: aDoorQuantity
    | numberOfDoors |
    opened := OrderedCollection new.
    numberOfDoors := 0.
    (numberOfDoors <= aDoorQuantity) whileTrue:  [opened add: false.
	                                                                           numberOfDoors := numberOfDoors +1. ]
   ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:41:07'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:41:07'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:41:07'!
PASSED!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:41:07'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:41:07'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:41:13'!
ERROR!
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:43:30' prior: 50626837!
initializeWith: aDoorQuantity
    
    opened := OrderedCollection initializeOfSize: aDoorQuantity.
    opened := opened do: [:aNumberDoor | opened at: aNumberDoor put: false]. 

   ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:43:36'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:43:36'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:43:36'!
PASSED!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:43:36'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:43:36'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:44:07'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:44:07'!
ERROR!

OrderedCollection initializeOfSize: aDoorQuantity.!
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 18:45:31' prior: 50626869!
initializeWith: aDoorQuantity
    
    opened := OrderedCollection new: aDoorQuantity.
    opened := opened do: [:aNumberDoor | opened at: aNumberDoor put: false]. 

   ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:45:32'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:45:32'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:45:32'!
PASSED!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:45:32'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:45:32'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:45:39'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:45:39'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:46:36'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:46:37'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 18:46:38'!
PASSED!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:46:39'!
ERROR!

!testRun: #TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:46:39'!
ERROR!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:49:15'!
test04TogglingForTheSecondTimeShouldCloseDoorOne
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self deny: (toggler isDoorOpen: 2).! !

!methodRemoval: TestDoor #test04TogglingForTheSecondTimeShouldOpenThem stamp: 'CB 5/4/2023 18:49:19'!
test04TogglingForTheSecondTimeShouldOpenThem
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self deny: (toggler isDoorOpen: 2).!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:49:52'!
toggleDoors: aNumberOfTimes
	opened := opened  not.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:51:44' prior: 50626693!
toggleDoors
	opened := opened do: [:aNumberDoor | opened at: aNumberDoor put: ( opened at: aNumberDoor) not]. ! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:51:49'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:51:50'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:51:50'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:54:10'!
toggleDoor: aNumberOfDoorToToggle
	opened := opened  not.! !

!methodRemoval: DoorsToggler #toggleDoors: stamp: 'CB 5/4/2023 18:54:14'!
toggleDoors: aNumberOfTimes
	opened := opened  not.!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 18:55:03' prior: 50626991!
toggleDoor: aNumberOfDoorToToggle
	opened at: aNumberOfDoorToToggle put: ((opened at: aNumberOfDoorToToggle) not).! !
!DoorsToggler methodsFor: 'accesing' stamp: 'CB 5/4/2023 18:55:17' prior: 50626754!
isDoorOpen: aDoorNumber 
	^opened at: aDoorNumber.! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:55:26'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:55:26'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:55:55'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:55:55'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:56:05'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 18:56:05'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:56:11'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:56:11'!
ERROR!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:56:30' prior: 50626325!
test01AllDoorsAreInitiallyClosed
   | toggler |
   toggler := DoorsToggler new: 1.
   self deny: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:56:36' prior: 50626279!
test02TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler new: 1.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:56:45' prior: 50626369!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
   | toggler |
    toggler := DoorsToggler new: 1.
    toggler toggleDoors.
    toggler toggleDoors.
    self deny: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:56:48'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:56:48'!
ERROR!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:57:08' prior: 50627036!
test01AllDoorsAreInitiallyClosed
   | toggler |
   toggler := DoorsToggler with: 1.
   self deny: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:57:20' prior: 50627043!
test02TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler with: 1.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 18:57:25' prior: 50627051!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
   | toggler |
    toggler := DoorsToggler with: 1.
    toggler toggleDoors.
    toggler toggleDoors.
    self deny: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:57:35'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:57:35'!
ERROR!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 18:58:14'!
ERROR!

opened !

opened !

  | toggler |
   toggler := DoorsToggler with: 1!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:00:39'!
test04CanToggleMoreThanOneDoor
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).! !

!methodRemoval: TestDoor #test04TogglingForTheSecondTimeShouldCloseDoorOne stamp: 'CB 5/4/2023 19:00:49'!
test04TogglingForTheSecondTimeShouldCloseDoorOne
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoors.
    toggler toggleDoors.
    self assert: (toggler isDoorOpen: 1).
    self deny: (toggler isDoorOpen: 2).!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:05:06' prior: 50627101!
test04CanToggleMoreThanOneDoor
   | toggler |
    toggler := DoorsToggler with: 2.
    toggler toggleDoorsEvery: 2.
    self deny: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).! !

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:05:10'!
ERROR!

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:06:50'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:06:57'!
toggleDoorsEvery: aRenameMe1 
	self shouldBeImplemented.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:10:45' prior: 50627136!
toggleDoorsEvery: aRenameMe1 
        
	opened do: [:aNumberDoor | aNumberDoor // 2 = 0 ifTrue: [opened at: aNumberDoor put: (opened at: aNumberDoor) not]]! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:11:33' prior: 50627141!
toggleDoorsEvery: numberOfDoors
        
	opened do: [:aNumberDoor | aNumberDoor // numberOfDoors = 0 ifTrue: [opened at: aNumberDoor put: (opened at: aNumberDoor) not]]! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:12:31' prior: 50627149!
toggleDoorsEvery: aStepNumber

	opened do: [:aNumberDoor | aNumberDoor // aStepNumber = 0 ifTrue: [opened at: aNumberDoor put: (opened at: aNumberDoor) not]]! !

!classDefinition: #DoorsToggler category: 'Doors-Exercise' stamp: 'CB 5/4/2023 19:13:22'!
Object subclass: #DoorsToggler
	instanceVariableNames: 'opened numberOfDoors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Doors-Exercise'!
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 19:13:20' prior: 50626903!
initializeWith: aDoorQuantity
    numberOfDoors := aDoorQuantity.
    numberOfDoors timesRepeat: [opened add: false].
   

   ! !
!DoorsToggler methodsFor: 'initialize' stamp: 'CB 5/4/2023 19:13:51' prior: 50627174!
initializeWith: aDoorQuantity
    numberOfDoors := aDoorQuantity.
    opened := OrderedCollection new.
    numberOfDoors timesRepeat: [opened add: false].
   

   ! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:15:56'!
test05CanToggleDoorsWithStep
   | toggler |
    toggler := DoorsToggler with: 5.
    toggler toggleDoorsEvery: 2.
    self deny: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).
    self deny: (toggler isDoorOpen: 3).
    self assert: (toggler isDoorOpen: 4).
    self deny: (toggler isDoorOpen: 5).
! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:16:58' prior: 50627158!
toggleDoorsEvery: aStepNumber
     aStepNumber to: numberOfDoors by: aStepNumber do:
       [
	 :aDoorNumber | self toggleDoor: aDoorNumber
        ] 
! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:17:20' prior: 50627000!
toggleDoor: aNumberOfDoorToToggle
	opened at: aNumberOfDoorToToggle put: (opened at: aNumberOfDoorToToggle) not.! !

!methodRemoval: DoorsToggler #toggleDoors stamp: 'CB 5/4/2023 19:17:29'!
toggleDoors
	opened := opened do: [:aNumberDoor | opened at: aNumberDoor put: ( opened at: aNumberDoor) not]. !

!testRun: #TestDoor #test05CanToggleDoorsWithStep stamp: 'CB 5/4/2023 19:17:55'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 19:17:55'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:17:55'!
ERROR!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 19:17:55'!
ERROR!

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:17:55'!
PASSED!

!testRun: #TestDoor #test05CanToggleDoorsWithStep stamp: 'CB 5/4/2023 19:17:55'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 19:17:57'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:18:00'!
ERROR!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:18:00'!
ERROR!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:18:15' prior: 50627073!
test02TogglingADoorFromClosedShouldOpenIt
   | toggler |
    toggler := DoorsToggler with: 1.
    toggler toggleDoor: 1.
    self assert: (toggler isDoorOpen: 1).! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:18:27' prior: 50627081!
test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt
   | toggler |
    toggler := DoorsToggler with: 1.
    toggler toggleDoor: 1.
    toggler toggleDoor: 1.
    self deny: (toggler isDoorOpen: 1).! !

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 19:18:32'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:18:32'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 19:18:32'!
PASSED!

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:18:32'!
PASSED!

!testRun: #TestDoor #test05CanToggleDoorsWithStep stamp: 'CB 5/4/2023 19:18:32'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 19:18:44'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 19:18:48'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:18:48'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 19:18:48'!
PASSED!

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:18:48'!
PASSED!

!testRun: #TestDoor #test05CanToggleDoorsWithStep stamp: 'CB 5/4/2023 19:18:48'!
PASSED!
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:20:56'!
test06CanToggleDoorsForAllSteps
   | toggler |
    toggler := DoorsToggler with: 5.
    toggler toggleDoorsEvery: 2.
    self deny: (toggler isDoorOpen: 1).
    self assert: (toggler isDoorOpen: 2).
    self deny: (toggler isDoorOpen: 3).
    self assert: (toggler isDoorOpen: 4).
    self deny: (toggler isDoorOpen: 5).
! !
!TestDoor methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 19:22:12' prior: 50627303!
test06CanToggleDoorsForAllSteps
   | toggler |
    toggler := DoorsToggler with: 10.
    toggler toggleDoorsForAllSteps.
    self assert: (toggler isDoorOpen: 1).
    self deny: (toggler isDoorOpen: 2).
    self deny: (toggler isDoorOpen: 3).
    self assert: (toggler isDoorOpen: 4).
    self deny: (toggler isDoorOpen: 5).
    self deny: (toggler isDoorOpen: 6).
    self deny: (toggler isDoorOpen: 7).
    self deny: (toggler isDoorOpen: 8).
    self assert: (toggler isDoorOpen: 9).
    self deny: (toggler isDoorOpen: 10).! !

!testRun: #TestDoor #test06CanToggleDoorsForAllSteps stamp: 'CB 5/4/2023 19:22:16'!
ERROR!
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:22:20'!
toggleDoorsForAllSteps
	self shouldBeImplemented.! !
!DoorsToggler methodsFor: 'toggling' stamp: 'CB 5/4/2023 19:22:57' prior: 50627338!
toggleDoorsForAllSteps
	1 to: numberOfDoors do: [:aStepSize | self toggleDoorsEvery: aStepSize]! !

!testRun: #TestDoor #test06CanToggleDoorsForAllSteps stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test01AllDoorsAreInitiallyClosed stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test02TogglingADoorFromClosedShouldOpenIt stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test03TogglingADoorFromClosedAndTogglingAgainShouldCloseIt stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test04CanToggleMoreThanOneDoor stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test05CanToggleDoorsWithStep stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

!testRun: #TestDoor #test06CanToggleDoorsForAllSteps stamp: 'CB 5/4/2023 19:23:00'!
PASSED!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1.st----!

!classRemoval: #TurboDeactivated stamp: 'CB 5/4/2023 19:52:49'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/4/2023 19:52:49'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/4/2023 19:52:50'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/4/2023 19:52:50'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/4/2023 19:52:50'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/4/2023 19:52:50'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/4/2023 19:52:51'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/4/2023 19:52:51'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/4/2023 19:52:51'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/4/2023 19:52:52'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1.st----!
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628972!
runningInGrandPrix: aGrandPrix
	
	grandPrix _ aGrandPrix! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629003!
traveledDistance: aDistance

	traveledDistance _ aDistance! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628982!
atSector: aSector

	currentSector _ aSector.! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629008!
activateTurbo

	turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ].
	
	currentSector activateTurboTo: self.
! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629027!
isTurboActivated
	
	^turboActivated! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629015!
deactivateTurbo
	
	turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated _ false! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629031!
turboAlreadyActivatedErrorDescription
	
	^'Turbo already activated'! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629022!
turboAlreadydeActivatedErrorDescription
	
	^'Turbo is already deactivated'! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628986!
speed

	turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629036!
activateTurboInSectorWithTurbo
	
	turboActivated _ true.
	turboActivations _ turboActivations + 1 ! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628977!
advance: aDistance

	traveledDistance _ traveledDistance + aDistance! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628964!
initializeDrivenBy: aDriver 

	driver _ aDriver.
	turboActivated _ false.
	turboActivations _ 0.
	speed _ 0*kilometer/hour.
	traveledDistance _ 0.
	! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628999!
traveledDistance

	^ traveledDistance! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628995!
speed: newSpeed

	speed _ newSpeed! !
!FormulaOneCar class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50629051!
drivenBy: aDriver 

	^self new initializeDrivenBy: aDriver ! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628752!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628582!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	track _ Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628692!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (Sector withTurboOf: 10 * kilometer)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628772!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628677!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628479!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector _ Sector withTurboOf: 10 * kilometer.
	outside _ sector length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628659!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628712!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (Sector withTurboOf: 10 * kilometer)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628926!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628575!
test07TrackMustHaveSectors

	self
		should: [ Track withSectors: #() ]
		raise: Error
		withMessageText: Track mustHaveSectorsErrorDescription! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628594!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628638!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track _ Track withSectors: sectors.
	car1 _ FormulaOneCar drivenBy: #Schumacher.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628730!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628905!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628842!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628795!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	sectorA _ Sector withTurboOf: 10 * kilometer.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:12' prior: 50628550!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628614!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628862!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628496!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector _ Sector withoutTurboOf: 10*kilometer.
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628532!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628471!
test01SectorLengthMustBePositive

	self 
		should: [ Sector withTurboOf: 0 * kilometer.]
		raise: Error
		withMessageText: Sector lengthMustBePositiveErrorDescription! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628822!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628511!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 20 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50628883!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629093!
length

	^ track length * numberOfLaps! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629077!
locationOf: aCar

	^ aCar traveledDistance.	! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629106!
relocate: aCar after: aTimeLapse 

	| distanceMoved distanceInTrack |
	
	distanceMoved _ aCar speed * aTimeLapse.
	aCar advance: distanceMoved.
	
	distanceInTrack _ aCar traveledDistance \\ track length.
	track put: aCar at: distanceInTrack.! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629089!
sectorOf: aCar 

	^ track sectorOf: aCar.! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629081!
put: aCar at: aDistance

	| distanceInTrack |
	
	aCar traveledDistance: aDistance.
	
	distanceInTrack _ aDistance \\ track length.
	track put: aCar at: distanceInTrack.
	! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629097!
advance: aTimeLapse
	
	| ix cars |
	
	cars _ track cars asOrderedCollection.
	ix _ 1.
	[ix <= cars size] whileTrue: [ | car |
		car _ cars at: ix.
		self relocate: car after: aTimeLapse.
		ix _ ix + 1.
	]
! !
!GrandPrix methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629068!
initializeWithTrack: aTrack andNumberOfLaps: aNumberOfLaps andCars: aCollectionOfCars

	track _ aTrack.
	numberOfLaps _ aNumberOfLaps.
	aCollectionOfCars do: [ :car | car runningInGrandPrix: self ].
! !
!GrandPrix class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629145!
turboNotAllowedWithRainTiresErrorMessage

	^ 'Turbo not allowed with rain tires'! !
!GrandPrix class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629131!
on: aTrack running: aNumberOfLaps with: aCollectionOfCars

	^self new initializeWithTrack: aTrack andNumberOfLaps: aNumberOfLaps andCars: aCollectionOfCars! !
!GrandPrix class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629125!
on: aTrack running: aNumberOfLaps 

	^self on: aTrack running: aNumberOfLaps with: #()! !
!GrandPrix class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629139!
distanceOutSideRaceTrackLengthErrorMessage

	^'Distance outside Race Track length'! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629172!
assertValidPosition: aPosition

	length < aPosition ifTrue: [ self error: self class cannotPlacedCarErrorDescription ]! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629178!
atStartPut: aCar
 
	self put: aCar at: 0*kilometer! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629199!
length

	^length! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629237!
carAtPosition: positionOfDriver

	^cars keyAtValue: positionOfDriver! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629182!
positionOf: aCar
 
	^ cars at: aCar.
! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629163!
initializeOf: aLength 

	cars _ Dictionary new.
	length _ aLength.! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629196!
cars
	
	^ cars keys! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629242!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure ! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629168!
withTurbo: aBoolean
 
	withTurbo _ aBoolean.
! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629186!
put: aCar at: aPosition
 
	self assertValidPosition: aPosition.
	
	cars at: aCar put: aPosition.
	aCar atSector: self.! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629202!
includes: aCar

	^ cars includesKey: aCar! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629223!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead

	| carAhead |
	
	carAhead _ self carAtPosition: positionOfCarAhead.
	
	((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)
		ifFalse: [self error: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ].! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629192!
remove: aCar
 
	cars removeKey: aCar ifAbsent: [].
! !
!Sector methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629206!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629290!
cannotActivateTurboWhenNoCarAheadErrorDescription
	
	^ 'Cannot activate Turbo without opponent ahead'! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629306!
turboNotAllowedErrorDescription
	
	^ 'Turbo not allowed in this Sector'! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629265!
withTurboOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ self new initializeOf: aLength; withTurbo: true; yourself ! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629296!
cannotPlacedCarErrorDescription

	^ 'Driver can not be placed outside section'! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629301!
lengthMustBePositiveErrorDescription

	^ 'Length must be positive'! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629274!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ self new initializeOf: aLength; withTurbo: false; yourself ! !
!Sector class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629283!
cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription
	
	^ 'Cannot activate Turbo when opponent is more than 1 second ahead'! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629325!
initializeWithSectors: aSectors

	sectors _ aSectors copy.! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629391!
length

	| acc ix |

	acc _ 0 * kilometer.
	ix _ 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector _ sectors at: ix.
		acc _ acc + sector length.
		ix _ ix + 1.		
	].

	^ acc.
! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629333!
positionOf: aCar
	| accumulatedLength ix sector |
	
	ix _ 1.
	sector _ (sectors at: ix).
	accumulatedLength _ 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength _ accumulatedLength + sector length.
		ix _ ix + 1.
		sector _ (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar).! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629383!
cars
	| allCars ix |
	
	allCars _ Set new.
	ix _ 1.
	[ix <= sectors size] whileTrue: [ | s |
		s _ sectors at: ix.
		allCars addAll: s cars.
		ix _ ix + 1.
	].

	^ allCars
	! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629329!
carNotFoundErrorDescription

	^ 'Car not found'! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629374!
sectorOf: aCar ifNone: aBlock

	 | ix |
	
	ix _ 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector _	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix _ ix + 1.
	].

	^ aBlock value.! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629368!
sectorOf: aCar
	
	^self sectorOf: aCar ifNone: [ self error: self carNotFoundErrorDescription ]! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629346!
put: aCar at: aPosition

	| ix sector acc |
	
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].

	self remove: aCar.

	ix _ 1.
	sector _ sectors at: ix. 
	acc _ 0 * kilometer.

	[aPosition > (acc +  sector length)] whileTrue: [
		acc _ acc + sector length.
		ix _ ix + 1.
		sector _ sectors at: ix.
	].

	sector put: aCar at: aPosition - acc.! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629399!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	| inc ix sector |
	inc _ false.
	ix _ 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector _ sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc _ true]
		ifFalse: [
			ix _ ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s _ sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix _ ix + 1
			]	
		]. 
	^ inc
	! !
!Track methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629361!
remove: aCar
	
	| currentSector |
	
	currentSector _ self sectorOf: aCar ifNone: [ ^ self ].
	currentSector remove: aCar.
	! !
!Track class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629422!
withSectors: sectors

	sectors isEmpty ifTrue: [ self error: self mustHaveSectorsErrorDescription ].
	
	^ self new initializeWithSectors: sectors! !
!Track class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629434!
mustHaveSectorsErrorDescription

	^'Track must have sectors'! !
!Track class methodsFor: 'as yet unclassified' stamp: 'CB 5/4/2023 20:08:13' prior: 50629429!
cannotPlacedCarErrorDescription

	^ 'Car cannot be placed in track'! !

----STARTUP---- (5 May 2023 20:32:36) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #TurboDeactivated stamp: 'CB 5/5/2023 20:32:45'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/5/2023 20:32:45'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/5/2023 20:32:45'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/5/2023 20:32:45'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/5/2023 20:32:45'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/5/2023 20:32:45'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/5/2023 20:32:46'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/5/2023 20:32:46'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/5/2023 20:32:46'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/5/2023 20:32:46'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Fraccion stamp: 'CB 5/5/2023 20:32:52'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'CB 5/5/2023 20:32:52'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'CB 5/5/2023 20:32:52'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'CB 5/5/2023 20:32:52'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'CB 5/5/2023 20:32:53'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'CB 5/5/2023 20:32:53'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'CB 5/5/2023 20:32:53'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'CB 5/5/2023 20:32:53'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'CB 5/5/2023 20:32:53'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #SentenceFinderByPrefix stamp: 'CB 5/5/2023 20:33:34'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 5/5/2023 20:33:34'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 5/5/2023 20:33:34'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 5/5/2023 20:33:35'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 5/5/2023 20:33:35'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 5/5/2023 20:33:35'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 5/5/2023 20:33:35'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2021-2C-1erParcial.st----!

----STARTUP---- (8 May 2023 12:46:19) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'CB 5/8/2023 12:46:30'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'CB 5/8/2023 12:46:30'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'CB 5/8/2023 12:46:30'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'CB 5/8/2023 12:46:30'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'CB 5/8/2023 12:46:30'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'CB 5/8/2023 12:46:31'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'CB 5/8/2023 12:46:31'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'CB 5/8/2023 12:46:31'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'CB 5/8/2023 12:46:31'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #TurboDeactivated stamp: 'CB 5/8/2023 12:46:41'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/8/2023 12:46:41'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/8/2023 12:46:41'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/8/2023 12:46:42'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/8/2023 12:46:42'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/8/2023 12:46:42'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/8/2023 12:46:42'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/8/2023 12:46:42'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/8/2023 12:46:42'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/8/2023 12:46:43'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #SentenceFinderByPrefix stamp: 'CB 5/8/2023 12:46:48'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 5/8/2023 12:46:48'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 5/8/2023 12:46:48'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 5/8/2023 12:46:48'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 5/8/2023 12:46:49'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 5/8/2023 12:46:49'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 5/8/2023 12:46:49'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1-CodigoDelVideo.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial-Solucion.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\enunciado cuatri 1.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial-Solucion.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Exercise.st----!

!classRemoval: #Tree stamp: 'CB 5/8/2023 14:13:53'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Empty stamp: 'CB 5/8/2023 14:13:53'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Diggable stamp: 'CB 5/8/2023 14:13:53'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Terrain stamp: 'CB 5/8/2023 14:13:54'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #SimplePirate stamp: 'CB 5/8/2023 14:13:54'!
PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Captain stamp: 'CB 5/8/2023 14:13:54'!
PirateRank subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #PirateRank stamp: 'CB 5/8/2023 14:13:54'!
Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Filibustero stamp: 'CB 5/8/2023 14:13:54'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Corsario stamp: 'CB 5/8/2023 14:13:54'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Bucanero stamp: 'CB 5/8/2023 14:13:55'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Pirate stamp: 'CB 5/8/2023 14:13:55'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Map stamp: 'CB 5/8/2023 14:13:55'!
Object subclass: #Map
	instanceVariableNames: 'island startPosition steps treasureMarkPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Island stamp: 'CB 5/8/2023 14:13:55'!
Object subclass: #Island
	instanceVariableNames: 'boardSize treesAt digsAt crewAt treasureAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Crew stamp: 'CB 5/8/2023 14:13:56'!
Object subclass: #Crew
	instanceVariableNames: 'island pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #CrewTest stamp: 'CB 5/8/2023 14:13:56'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crewPosition1 treePosition1 island1 map1 crew1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #TurboDeactivated stamp: 'CB 5/8/2023 14:13:56'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/8/2023 14:13:56'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/8/2023 14:13:57'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/8/2023 14:13:57'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/8/2023 14:13:57'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/8/2023 14:13:57'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/8/2023 14:13:58'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/8/2023 14:13:58'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/8/2023 14:13:58'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/8/2023 14:13:58'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial-Solucion.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-1C-Parcial-1-CodigoDelVideo.st----!

----SNAPSHOT----(8 May 2023 14:16:53) CuisUniversity-5706.image priorSource: 9316786!

----SNAPSHOT----(8 May 2023 16:26:42) CuisUniversity-5706.image priorSource: 9883908!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:30:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:30:49'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:31:43' prior: 50641058!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	capasDeSueloDebajo do: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.

	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:31:48'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:31:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:31:48'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'FRT 5/5/2023 16:47:46' prior: 50641202!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:37:40' prior: 50641291!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	capasDeSueloDebajo do: [:capa | | altura | (capa altura = nil) ifTrue: [ altura := 0 ].
		acc := acc + altura]
	"""[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2022-2C-1erParcial-Solucion.st----!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:41:09' prior: 50641303!
calcularProfundidadDelSuelo
	
	| acc ix |

	acc := 0.
	ix := 1.
	capasDeSueloDebajo do: [:capa | | altura | (capa altura = nil) ifTrue: [ altura := 0 ].
		acc := acc + altura].
	
	"""capasDeSueloDebajo inject: acc into: [ :acc :capa | canMove & (pirate canMoveTo: aPosition in: terrain at: island )	].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:43:56' prior: 50642064!
calcularProfundidadDelSuelo
	
	| acc|

	acc := 0.
	capasDeSueloDebajo inject: acc into: [ :acc1 :capa | capa altura + acc1	].
	"""capasDeSueloDebajo inject: acc into: [ :acc :capa | canMove & (pirate canMoveTo: aPosition in: terrain at: island )	].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:44:47' prior: 50642084!
calcularProfundidadDelSuelo
	
	| acc|

	acc := 0.
	capasDeSueloDebajo inject: 0 into: [ :acc1 :capa | capa altura + acc1	].
	"""capasDeSueloDebajo inject: acc into: [ :acc :capa | canMove & (pirate canMoveTo: aPosition in: terrain at: island )	].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:44:48'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:44:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:44:48'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:44:59' prior: 50642102!
calcularProfundidadDelSuelo
	
	| acc|

	acc := 0.
	capasDeSueloDebajo inject: 0 into: [ :acc1 :capa | (capa altura) + acc1	].
	"""capasDeSueloDebajo inject: acc into: [ :acc :capa | canMove & (pirate canMoveTo: aPosition in: terrain at: island )	].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:45:01'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:45:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:45:01'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:45:37' prior: 50642198!
calcularProfundidadDelSuelo
	
	| acc|

	acc := 0.
	capasDeSueloDebajo inject: 0 into: [ :acc1 :capa | acc1 + (capa altura)	].
	"""capasDeSueloDebajo inject: acc into: [ :acc :capa | canMove & (pirate canMoveTo: aPosition in: terrain at: island )	].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]"""

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:45:38'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:45:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:45:38'!
ERROR!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'CB 5/8/2023 17:48:17' prior: 50640841!
initializeArenoso
	
	tipo := #Arenoso.
	altura := 0.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'CB 5/8/2023 17:48:23' prior: 50640846!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := 0.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'CB 5/8/2023 17:48:26' prior: 50640853!
initializeTierra
	
	tipo := #Tierra.
	altura := 0.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:48:36'!
FAILURE!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:48:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:48:36'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:49:52' prior: 50642294!
calcularProfundidadDelSuelo
	capasDeSueloDebajo inject: 0 into: [ :acc1 :capa | acc1 + (capa altura)	].
	
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:49:56' prior: 50642485!
calcularProfundidadDelSuelo
	^capasDeSueloDebajo inject: 0 into: [ :acc1 :capa | acc1 + (capa altura)	].
	
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:49:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:49:58'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:50:26' prior: 50642492!
calcularProfundidadDelSuelo
	^capasDeSueloDebajo inject: 0 into: [ :alturaDeCapas :capa | alturaDeCapas+ (capa altura)	].
	
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:55:48' prior: 50641070!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	capasDeSueloDebajo do: [
	 | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 17:56:31' prior: 50642580!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.

	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 17:56:34'!
PASSED!

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Arenos
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Arenos
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:00:23'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:00:29'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:00:54'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:02:11'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:02:15'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:02:20'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:02:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:02:25'!
PASSED!
!Arenoso methodsFor: 'scan' stamp: 'CB 5/8/2023 18:02:41' overrides: 50640899!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !
!Concreto methodsFor: 'scan' stamp: 'CB 5/8/2023 18:02:41' overrides: 50640899!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !
!Tierra methodsFor: 'scan' stamp: 'CB 5/8/2023 18:02:41' overrides: 50640899!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !

!methodRemoval: CapaDeSuelo #scan stamp: 'CB 5/8/2023 18:02:41'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. !
!CapaDeSuelo methodsFor: 'scan' stamp: 'CB 5/8/2023 18:03:12'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. ! !

!methodRemoval: Arenoso #scan stamp: 'CB 5/8/2023 18:03:12'!
scan

	self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. !
!CapaDeSuelo methodsFor: 'scan' stamp: 'CB 5/8/2023 18:03:57' prior: 50642887!
scan
        
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !
!Arenoso methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:16' overrides: 50642897!
scan
        
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !
!Concreto methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:16' prior: 50642871 overrides: 50642897!
scan
        
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !
!Tierra methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:16' prior: 50642877 overrides: 50642897!
scan
        
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !

!methodRemoval: CapaDeSuelo #scan stamp: 'CB 5/8/2023 18:04:16'!
scan
        
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """!
!Arenoso methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:27' prior: 50642903!
scan
         ^valor! !
!Concreto methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:38' prior: 50642910!
scan
        ^valor.
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !
!Tierra methodsFor: 'scan' stamp: 'CB 5/8/2023 18:04:44' prior: 50642916!
scan
        ^valor.
	"""self esArenoso ifTrue: [ ^ 7 ].
	self esTierra ifTrue: [ ^ 10 ].
	^ 50. """! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 18:05:19' prior: 50640917!
arenoso

	^Arenoso new initialize! !
!Arenoso methodsFor: 'scan' stamp: 'CB 5/8/2023 18:05:51' overrides: 50642390!
initializeArenoso
	altura := 0.
	valor := 7.! !
!Arenoso methodsFor: 'scan' stamp: 'CB 5/8/2023 18:06:13' overrides: 16920235!
initialize
	altura := 0.
	valor := 7.! !

!methodRemoval: Arenoso #initializeArenoso stamp: 'CB 5/8/2023 18:06:15'!
initializeArenoso
	altura := 0.
	valor := 7.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:06:22'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:06:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:06:22'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:06:22'!
ERROR!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 18:06:55' prior: 50640921!
concretoConResistencia: resistencia 

	^Concreto new initializeConResistencia: resistencia ! !
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 18:07:41'!
initializeConResistencia: aResistencia 
       valor := 50.
     ! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 18:08:21' prior: 50643040!
initializeConResistencia: resistenciaInicial
       valor := 50.
       resistencia := resistenciaInicial.! !
!Tierra methodsFor: 'nil' stamp: 'CB 5/8/2023 18:08:52' overrides: 16920235!
initialize
      altura := 0.
      valor := 10.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 18:09:05' prior: 50640927!
tierra

	^Tierra new initialize! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:09:32'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:09:32'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:09:32'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:09:32'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:09:41'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:09:54'!
FAILURE!
!Arenoso methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:11:35' overrides: 50640857!
esArenoso
	^tipo = #Arenoso! !
!Concreto methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:11:35' overrides: 50640857!
esArenoso
	^tipo = #Arenoso! !
!Tierra methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:11:35' overrides: 50640857!
esArenoso
	^tipo = #Arenoso! !

!methodRemoval: CapaDeSuelo #esArenoso stamp: 'CB 5/8/2023 18:11:35'!
esArenoso
	^tipo = #Arenoso!
!Arenoso methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:11:46' prior: 50643143!
esArenoso
	^true.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:14'!
esArenoso
	^self subclassResponsibility.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:21' prior: 50640860!
esConcreto
	^self subclassResponsibility.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:25' prior: 50640864!
esTierra
	^self subclassResponsibility.! !
!Arenoso methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:38' overrides: 50643165!
esConcreto
	^false.! !
!Arenoso methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:42' overrides: 50643169!
esTierra
	^false.! !
!Concreto methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:12:58' prior: 50643147 overrides: 50643161!
esArenoso
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:02' overrides: 50643169!
esTierra
	^false! !
!Concreto methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:08' overrides: 50643165!
esConcreto
	^true! !
!Tierra methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:17' prior: 50643151 overrides: 50643161!
esArenoso
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:24' overrides: 50643165!
esConcreto
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:29' overrides: 50643169!
esTierra
	^false! !
!Tierra methodsFor: 'tipo' stamp: 'CB 5/8/2023 18:13:34' prior: 50643201 overrides: 50643169!
esTierra
	^true! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:13:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:13:43'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:13:46'!
PASSED!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:14:01'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia1 valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:14:28'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia1 valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:14:33'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:14:37'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:14:40'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:14:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:14:40'!
ERROR!
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 18:15:32' overrides: 50640892!
resistencia

	^ resistencia.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:15:46'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:15:46'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:15:46'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:15:46'!
PASSED!
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 18:16:11' overrides: 50640885!
sinResistencia
	^resistencia = 0! !
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 18:16:24' overrides: 50640880!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:16:25'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:16:25'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:16:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:16:25'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'CB 5/8/2023 18:18:21' prior: 50640876 overrides: 16901788!
hash

	"""^tipo hash + resistencia hash"""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:18:22'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:18:22'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:18:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:18:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:18:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:18:23'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:18:26'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:18:26'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:18:26'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:18:32'!
FAILURE!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:18:32'!
FAILURE!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:18:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:18:32'!
PASSED!
!Arenoso methodsFor: 'nil' stamp: 'CB 5/8/2023 18:20:49' overrides: 50640868!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ unaCapaDeSuelo esArenoso]! !
!Tierra methodsFor: 'nil' stamp: 'CB 5/8/2023 18:21:10' overrides: 50640868!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ unaCapaDeSuelo esTierra]! !
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 18:21:40' overrides: 50640868!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [ unaCapaDeSuelo esConcreto and: [resistencia = unaCapaDeSuelo resistencia]]! !
!CapaDeSuelo methodsFor: 'comparing' stamp: 'CB 5/8/2023 18:21:54' prior: 50640868 overrides: 16901772!
= unaCapaDeSuelo

	self subclassResponsibility ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:21:56'!
PASSED!

!methodRemoval: CapaDeSuelo #tipo stamp: 'CB 5/8/2023 18:22:35'!
tipo

	^tipo!

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:22:59'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:23:03'!
PASSED!

!methodRemoval: CapaDeSuelo #hash stamp: 'CB 5/8/2023 18:23:12'!
hash

	"""^tipo hash + resistencia hash"""!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:23:14'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:23:19'!
PASSED!

!methodRemoval: CapaDeSuelo #resistencia stamp: 'CB 5/8/2023 18:23:26'!
resistencia

	^ resistencia.!

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'CB 5/8/2023 18:23:30'!
sinResistencia
	^resistencia = 0!

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'CB 5/8/2023 18:23:38'!
initializeTierra
	
	tipo := #Tierra.
	altura := 0.!

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'CB 5/8/2023 18:23:41'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := 0.!

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'CB 5/8/2023 18:23:44'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := 0.!

----SNAPSHOT----(8 May 2023 18:25:19) CuisUniversity-5706.image priorSource: 9883995!
!Tierra methodsFor: 'scan' stamp: 'CB 5/8/2023 18:26:15' prior: 50642937!
scan
        ^valor.! !
!CapaDeSuelo methodsFor: 'accessing' stamp: 'CB 5/8/2023 18:26:56' prior: 50640889!
altura
      ^ altura.! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:30:20' prior: 50641089!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix  capaQueQueremos|
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	capaQueQueremos := tipoDeCapa scan.
	acc := 0.
	ix := 1.
	^capasDeSueloDebajo inject: 0 into: [:acc1 :capa | (capaQueQueremos = capa scan) ifTrue: [acc1 + 1 ]]
	"""	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc"""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:30:30'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:30:30'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:30:30'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:30:30'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:30:54'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:30:54'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:30:54'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:30:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:30:55'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:31:59' prior: 50640743!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: CapaDeSuelo arenoso).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:32:04'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:32:04'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:32:04'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:32:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:32:06'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:33:22'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:33:22'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:33:22'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:33:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:33:24'!
ERROR!

----SNAPSHOT----(8 May 2023 18:33:57) CuisUniversity-5706.image priorSource: 10002963!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:36:46' prior: 50644254!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix  capaQueQueremos|
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	capaQueQueremos := tipoDeCapa scan.
	acc := 0.
	ix := 1.
	^capasDeSueloDebajo occurrencesOf: (tipoDeCapa scan).
	"""^capasDeSueloDebajo inject: 0 into: [:acc1 :capa | (capaQueQueremos = capa scan) ifTrue: [acc1 + 1 ]]
		[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc"""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:36:53'!
FAILURE!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:36:53'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:36:53'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:36:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:36:56'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:40:36' prior: 50644606!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| valor acc ix  capaQueQueremos|
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	capaQueQueremos := tipoDeCapa scan.
	acc := 0.
	ix := 1.
	^capasDeSueloDebajo inject: 0 into: [:acc1 :capa | (capaQueQueremos = capa scan) ifTrue: [acc1 + 1 ]
		 ifFalse:[acc1]].
	"""	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc"""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:40:40'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:40:40'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:40:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:40:40'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:40:53' prior: 50640756!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: CapaDeSuelo tierra).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:41:17'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:41:17'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:41:17'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:41:52' prior: 50640769!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: (CapaDeSuelo concretoConResistencia: 10)).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:41:55'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:41:55'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:42:50' prior: 50644712!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| capaQueQueremos|
	
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | (capaQueQueremos = capa scan) 
		              ifTrue: [cantidadDeCapas + 1 ]
		              ifFalse:[cantidadDeCapas]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:42:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:42:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:42:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:42:59'!
FAILURE!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:42:59'!
FAILURE!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:42:59'!
FAILURE!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:42:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:42:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:42:59'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:43:13' prior: 50644996!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| capaQueQueremos|
	
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | 
		             (capaQueQueremos = capa scan) 
		              ifTrue: [cantidadDeCapas + 1 ]
		              ifFalse:[cantidadDeCapas]].
	! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:43:28' prior: 50645087!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
	| capaQueQueremos|
	 capaQueQueremos := tipoDeCapa scan.
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | 
		             (capaQueQueremos = capa scan) 
		              ifTrue: [cantidadDeCapas + 1 ]
		              ifFalse:[cantidadDeCapas]].
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:43:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:43:33'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:44:02' prior: 50645103!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	| capaQueQueremos|

        capaQueQueremos := tipoDeCapa scan.
	
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | (capaQueQueremos = capa scan) 
		              ifTrue: [cantidadDeCapas + 1 ]
		              ifFalse:[cantidadDeCapas]].
	! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:48:05' prior: 50642599!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| capaQueQueremos |
	
	capaQueQueremos := tipoDeCapa scan.
	
	"""[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."""! !
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:48:41' prior: 50645212!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| capaQueQueremos |
	
	capaQueQueremos := tipoDeCapa scan.
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | (capaQueQueremos = capa scan) 
		              ifTrue: [^cantidadDeCapas]
		              ifFalse:[cantidadDeCapas]].
	
	"""[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:48:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:48:43'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:48:43'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:48:43'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:48:56' prior: 50640783!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: CapaDeSuelo arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:49:06' prior: 50640798!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: CapaDeSuelo tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 18:49:20' prior: 50640813!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: (CapaDeSuelo concretoConResistencia: 10)).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:49:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:49:23'!
FAILURE!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:49:23'!
FAILURE!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:49:58' prior: 50645227!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| capaQueQueremos |
	
	capaQueQueremos := tipoDeCapa scan.
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | (capaQueQueremos = capa scan) 
		              ifTrue: [^cantidadDeCapas]
		              ifFalse:[cantidadDeCapas + capa altura]].
	
	"""[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:50:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:50:01'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'CB 5/8/2023 18:50:12' prior: 50645446!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| capaQueQueremos |
	
	capaQueQueremos := tipoDeCapa scan.
	
	^capasDeSueloDebajo inject: 0 into: [:cantidadDeCapas :capa | (capaQueQueremos = capa scan) 
		              ifTrue: [^cantidadDeCapas]
		              ifFalse:[cantidadDeCapas + capa altura]].
	
	! !

Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Mecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:52:02'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:52:25'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:52:51'!
Mecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:53:15'!
Mecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 18:53:49'!
Mecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 18:57:01' prior: 50640966!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	self sueloActual canManage: mechaPuesta.  
	
"""	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'"""! !
!Perforadora methodsFor: 'sobre qué suelo' stamp: 'CB 5/8/2023 18:57:44'!
sueloActual
	^capasDeSueloDebajo first! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 18:58:28'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 18:58:28'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 18:58:28'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 18:58:28'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 18:58:32'!
ERROR!
!Arenoso methodsFor: 'mmm' stamp: 'CB 5/8/2023 18:59:05'!
canManage: aMechaPuesta 
	self shouldBeImplemented.! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:01:28' prior: 50645611!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	self sueloActual puede: self cavarCon: mechaPuesta.  
	
"""	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'"""! !

!methodRemoval: Arenoso #canManage: stamp: 'CB 5/8/2023 19:01:35'!
canManage: aMechaPuesta 
	self shouldBeImplemented.!
!Arenoso methodsFor: 'nil' stamp: 'CB 5/8/2023 19:03:05'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEn: self para: unaExcavadora.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:03:26'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:03:26'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:03:26'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:03:26'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:03:29'!
ERROR!
!Diamante methodsFor: 'nil' stamp: 'CB 5/8/2023 19:04:33'!
esAptaEn: unTipoDeSuelo para: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:04:43'!
esAptaEnTierra: unTipoDeSuelo para: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:04:47'!
esAptaEnConcreto: unTipoDeSuelo para: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:05:18'!
esAptaEnConcretoPara: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:05:24'!
esAptaEnTierraPara: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:05:30'!
esAptaEnArenosoPara: unaExcavadora! !

!methodRemoval: Diamante #esAptaEn:para: stamp: 'CB 5/8/2023 19:05:34'!
esAptaEn: unTipoDeSuelo para: unaExcavadora!

!methodRemoval: Diamante #esAptaEnTierra:para: stamp: 'CB 5/8/2023 19:05:35'!
esAptaEnTierra: unTipoDeSuelo para: unaExcavadora!

!methodRemoval: Diamante #esAptaEnConcreto:para: stamp: 'CB 5/8/2023 19:05:38'!
esAptaEnConcreto: unTipoDeSuelo para: unaExcavadora!
!Arenoso methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:05:54' prior: 50645785!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnArenosoPara: unaExcavadora.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:20'!
esAptaEnTierraPara: unaExcavadora! !

!methodRemoval: Diamante #esAptaEnTierraPara: stamp: 'CB 5/8/2023 19:06:20'!
esAptaEnTierraPara: unaExcavadora!
!Mecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:29'!
esAptaEnConcretoPara: unaExcavadora! !

!methodRemoval: Diamante #esAptaEnConcretoPara: stamp: 'CB 5/8/2023 19:06:29'!
esAptaEnConcretoPara: unaExcavadora!
!Mecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:33'!
esAptaEnArenosoPara: unaExcavadora! !

!methodRemoval: Diamante #esAptaEnArenosoPara: stamp: 'CB 5/8/2023 19:06:33'!
esAptaEnArenosoPara: unaExcavadora!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:43' overrides: 50645920!
esAptaEnConcretoPara: unaExcavadora! !
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:43' overrides: 50645920!
esAptaEnConcretoPara: unaExcavadora! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:43' overrides: 50645920!
esAptaEnConcretoPara: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:43' overrides: 50645920!
esAptaEnConcretoPara: unaExcavadora! !

!methodRemoval: Mecha #esAptaEnConcretoPara: stamp: 'CB 5/8/2023 19:06:43'!
esAptaEnConcretoPara: unaExcavadora!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:49' overrides: 50645913!
esAptaEnTierraPara: unaExcavadora! !
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:49' overrides: 50645913!
esAptaEnTierraPara: unaExcavadora! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:49' overrides: 50645913!
esAptaEnTierraPara: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:49' overrides: 50645913!
esAptaEnTierraPara: unaExcavadora! !

!methodRemoval: Mecha #esAptaEnTierraPara: stamp: 'CB 5/8/2023 19:06:49'!
esAptaEnTierraPara: unaExcavadora!
!SinMecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:53' overrides: 50645928!
esAptaEnArenosoPara: unaExcavadora! !
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:53' overrides: 50645928!
esAptaEnArenosoPara: unaExcavadora! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:53' overrides: 50645928!
esAptaEnArenosoPara: unaExcavadora! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:06:53' overrides: 50645928!
esAptaEnArenosoPara: unaExcavadora! !

!methodRemoval: Mecha #esAptaEnArenosoPara: stamp: 'CB 5/8/2023 19:06:53'!
esAptaEnArenosoPara: unaExcavadora!
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:08:16' prior: 50645996!
esAptaEnArenosoPara: unaExcavadora
	^unaExcavadora mechaNoAptaParaCavar.
	
	! !
!Perforadora methodsFor: 'nil' stamp: 'CB 5/8/2023 19:08:44'!
mechaNoAptaParaCavar
     mechaPuesta := #Rota. 
     self error: 'Se rompió'! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:11:00' prior: 50645951!
esAptaEnConcretoPara: unaExcavadora
          ^unaExcavadora disminuyeUnaUnidadDeResistencia.! !
!Perforadora methodsFor: 'nil' stamp: 'CB 5/8/2023 19:11:41'!
disminuyeUnaUnidadDeResistencia
       
		vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
		capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
		^vecesQueGolpeoCapaActual.
	! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:11:51' prior: 50646020!
disminuyeUnaUnidadDeResistencia
       
	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual.
	! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:12:40' prior: 50645973!
esAptaEnTierraPara: unaExcavadora
        ^unaExcavadora pasarAProximaCapa.! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:13:55' prior: 50645991!
esAptaEnArenosoPara: unaExcavadora
      ^unaExcavadora pasarAProximaCapa.! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:16:09'!
noSePuedeGolpearMasDe3Veces
	vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
	^self 
		! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'CB 5/8/2023 19:16:28' prior: 50641050!
ponerMechaSoft
	mechaPuesta := Soft new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'CB 5/8/2023 19:16:35' prior: 50641054!
ponerMechaWidia
	mechaPuesta := Widia new! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'CB 5/8/2023 19:16:41' prior: 50641046!
ponerMechaDiamante
	mechaPuesta := Diamante new! !

!methodRemoval: Perforadora #sobreSueloArenoso stamp: 'CB 5/8/2023 19:17:02'!
sobreSueloArenoso
	^capasDeSueloDebajo first esArenoso!

!methodRemoval: Perforadora #sobreSueloTierra stamp: 'CB 5/8/2023 19:17:03'!
sobreSueloTierra
	^capasDeSueloDebajo first esTierra!

!methodRemoval: Perforadora #sobreSueloConcreto stamp: 'CB 5/8/2023 19:17:04'!
sobreSueloConcreto
	^capasDeSueloDebajo first esConcreto!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:18:02' prior: 50645740!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	(self capaDeSueloInmediata) puede: self cavarCon: mechaPuesta.  
	
"""	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'"""! !

!methodRemoval: Perforadora #sueloActual stamp: 'CB 5/8/2023 19:18:05'!
sueloActual
	^capasDeSueloDebajo first!
!Perforadora methodsFor: 'initialization' stamp: 'CB 5/8/2023 19:18:20' prior: 50641006!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !

Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Rota category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:18:39'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Perforadora methodsFor: 'accessing' stamp: 'CB 5/8/2023 19:18:50' prior: 50641019!
conMechaRota

	^mechaPuesta = Rota new! !
!Perforadora methodsFor: 'accessing' stamp: 'CB 5/8/2023 19:19:07' prior: 50641027!
sinMecha

	^mechaPuesta = SinMecha new! !
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:20:10' prior: 50645986!
esAptaEnArenosoPara: unaExcavadora
      ^unaExcavadora pasarAProximaCapa! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:21:24'!
mechaDiamanteNoAptaParaCavarArenoso
     mechaPuesta := #Rota. 
     self error: 'Se rompió'! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:21:24' prior: 50646004!
esAptaEnArenosoPara: unaExcavadora
	^unaExcavadora mechaDiamanteNoAptaParaCavarArenoso.
	
	! !

!methodRemoval: Perforadora #mechaNoAptaParaCavar stamp: 'CB 5/8/2023 19:21:24'!
mechaNoAptaParaCavar
     mechaPuesta := #Rota. 
     self error: 'Se rompió'!
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:22:05' prior: 50645963!
esAptaEnTierraPara: unaExcavadora
      ^unaExcavadora.! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:22:59' prior: 50645968!
esAptaEnTierraPara: unaExcavadora
        ^unaExcavadora m.! !
!Perforadora methodsFor: 'nil' stamp: 'CB 5/8/2023 19:23:20'!
m
    vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
    ^self.! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:24:44'!
cavarCapaTierraConMechaWidia
    vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
    ^self.! !

!methodRemoval: Perforadora #m stamp: 'CB 5/8/2023 19:24:48'!
m
    vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
    ^self.!
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:25:05' prior: 50646191!
esAptaEnTierraPara: unaExcavadora
        ^unaExcavadora cavarCapaTierraConMechaWidia.! !
!Soft methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:26:07' prior: 50645941!
esAptaEnConcretoPara: unaExcavadora
       ^unaExcavadora noEsPosibleCavarCapaConcretaConMechaSoft! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:26:47'!
noEsPosibleCavarCapaConcretaConMechaSoft
	 mechaPuesta := Rota new. 
	  self error: 'Se rompió'  
		! !

!methodRemoval: Perforadora #noSePuedeGolpearMasDe3Veces stamp: 'CB 5/8/2023 19:27:20'!
noSePuedeGolpearMasDe3Veces
	vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
	^self 
		!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:28:05'!
cavarCapaConcretaConMechaWidia
         vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
         ^self ! !
!Widia methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:28:21' prior: 50645946!
esAptaEnConcretoPara: unaExcavadora
        ^unaExcavadora cavarCapaConcretaConMechaWidia! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:28:58'!
cavarCapaConcretaConMechaDiamante
	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual 
	! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:29:24' prior: 50646015!
esAptaEnConcretoPara: unaExcavadora
          ^unaExcavadora cavarCapaConcretaConMechaDiamante.! !

!methodRemoval: Perforadora #disminuyeUnaUnidadDeResistencia stamp: 'CB 5/8/2023 19:29:30'!
disminuyeUnaUnidadDeResistencia
       
	vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual.
	!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:29:34'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:29:34'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:29:34'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:29:34'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:29:34'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:29:34'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:29:34'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:29:34'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:29:34'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:29:43'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:29:43'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:29:43'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:29:43'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:29:43'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:29:43'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:29:43'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:29:43'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:29:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:29:45'!
ERROR!
!Tierra methodsFor: 'nil' stamp: 'CB 5/8/2023 19:30:14'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnTierraPara: unaExcavadora.! !
!Concreto methodsFor: 'nil' stamp: 'CB 5/8/2023 19:30:24'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnConcretoPara: unaExcavadora.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:30:28'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:30:28'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:30:28'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:30:28'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:30:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:30:29'!
FAILURE!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:30:56'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:30:56'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:30:56'!
FAILURE!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:31:21'!
FAILURE!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:31:21'!
FAILURE!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:31:21'!
FAILURE!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:31:23'!
FAILURE!

excavadora conMechaRota!

excavadora!
!Perforadora methodsFor: 'accessing' stamp: 'CB 5/8/2023 19:33:50' prior: 50646155!
conMechaRota

	^mechaPuesta estaRota.! !
!Rota methodsFor: 'nil' stamp: 'CB 5/8/2023 19:34:06'!
estaRota
   ^true! !
!Mecha methodsFor: 'no messages' stamp: 'CB 5/8/2023 19:34:27'!
estaRota
   ^false! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:34:31'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:34:31'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:34:31'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:34:31'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:34:31'!
PASSED!
!Perforadora methodsFor: 'accessing' stamp: 'CB 5/8/2023 19:35:23' prior: 50646159!
sinMecha

	^mechaPuesta estaVacia.! !
!SinMecha methodsFor: 'nil' stamp: 'CB 5/8/2023 19:35:35'!
estaVacia
    ^true.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:35:42'!
estaVacia
   ^false! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:35:44'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:35:44'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:35:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:35:47'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:36:13'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:36:13'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:36:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:36:15'!
ERROR!
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:36:44' prior: 50646238!
cavarCapaConcretaConMechaWidia
         vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
         ^self ! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:36:51' prior: 50646169!
mechaDiamanteNoAptaParaCavarArenoso
     mechaPuesta := Rota new. 
     self error: 'Se rompió'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:36:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:36:56'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:38:12' prior: 50646087!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	self capaDeSueloInmediata puede: self cavarCon: mechaPuesta.  
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:38:13'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:38:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:38:13'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:38:18' prior: 50646899!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	self capaDeSueloInmediata puede: self cavarCon: mechaPuesta.  
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:38:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:38:19'!
PASSED!
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:40:42'!
noEsPosibleCavarCapaArenosaConMechaDiamante
     mechaPuesta := Rota new. 
     self error: 'Se rompió'! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 19:40:42' prior: 50646175!
esAptaEnArenosoPara: unaExcavadora
	^unaExcavadora noEsPosibleCavarCapaArenosaConMechaDiamante.
	
	! !

!methodRemoval: Perforadora #mechaDiamanteNoAptaParaCavarArenoso stamp: 'CB 5/8/2023 19:40:42'!
mechaDiamanteNoAptaParaCavarArenoso
     mechaPuesta := Rota new. 
     self error: 'Se rompió'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:40:53'!
PASSED!

----SNAPSHOT----(8 May 2023 19:44:09) CuisUniversity-5706.image priorSource: 10014483!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:44:58'!
PASSED!

Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #NoRota category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:47:31'!
Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:47:41'!
NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:47:50'!
NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:47:55'!
NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!NoRota methodsFor: 'testing' stamp: 'CB 5/8/2023 19:48:57' overrides: 50646561!
estaRota
   ^false! !
!NoRota methodsFor: 'testing' stamp: 'CB 5/8/2023 19:49:12' overrides: 50646647!
estaVacia
   ^false! !

!methodRemoval: Mecha #estaRota stamp: 'CB 5/8/2023 19:49:19'!
estaRota
   ^false!

!methodRemoval: Mecha #estaVacia stamp: 'CB 5/8/2023 19:49:19'!
estaVacia
   ^false!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:50:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:50:15'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:50:15'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:50:15'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:50:15'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:50:53' prior: 50646252!
cavarCapaConcretaConMechaDiamante
	vecesQueGolpeoCapaActual even ifTrue: [ self capaDeSueloInmediata bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual 
	! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:51:01' prior: 50647378!
cavarCapaConcretaConMechaDiamante
	vecesQueGolpeoCapaActual even ifTrue: [ self capaDeSueloInmediata bajaUnDecimoDeResistencia].
	self capaDeSueloInmediata sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual 
	! !
!Perforadora methodsFor: 'excavation' stamp: 'CB 5/8/2023 19:51:06' prior: 50647389!
cavarCapaConcretaConMechaDiamante
	vecesQueGolpeoCapaActual even ifTrue: [ self capaDeSueloInmediata bajaUnDecimoDeResistencia].
	(self capaDeSueloInmediata) sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual 
	! !

----SNAPSHOT----(8 May 2023 19:52:00) CuisUniversity-5706.image priorSource: 10096391!

Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 19:53:18'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!methodRemoval: SinMecha #esAptaEnTierraPara: stamp: 'CB 5/8/2023 19:53:45'!
esAptaEnTierraPara: unaExcavadora!

!methodRemoval: SinMecha #esAptaEnConcretoPara: stamp: 'CB 5/8/2023 19:53:50'!
esAptaEnConcretoPara: unaExcavadora!

!methodRemoval: SinMecha #esAptaEnArenosoPara: stamp: 'CB 5/8/2023 19:54:04'!
esAptaEnArenosoPara: unaExcavadora!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 19:54:06'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 19:54:06'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:01:10'!
excavadoraConMecha: blockClousere daGolpeDeTaladroA: sueloAExcavar
	|excavadora|
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora blockClousere value.
	
	excavadora darGolpeDeTaladro.
	
	^excavadora
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:04:56' prior: 50640541!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora excavadoraConMecha: [excavadora ponerMechaSoft] daGolpeDeTaladro.
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:06:06' prior: 50647515!
excavadoraConMecha: blockClousere daGolpeDeTaladroA: sueloAExcavar
	
	^(blockClousere value) darGolpeDeTaladro.
	
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:07:15' prior: 50647525!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self excavadoraConMecha: [excavadora ponerMechaSoft] daGolpeDeTaladroA: excavadora.
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:09:13'!
PASSED!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 20:13:00'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #TestDePerforación category: 'ISW1-2023-1C-Parcial-1' stamp: 'CB 5/8/2023 20:13:02'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1 excavadoraDeSuelo1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:12:58' overrides: 16961394!
setUp
	
	sueloAExcavar1 := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }..
	excavadoraDeSuelo1 := Perforadora sobreSuelo: sueloAExcavar1
	
	
	
	
	

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:06' prior: 50647661 overrides: 16961394!
setUp
	
	sueloAExcavar1 := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	
	excavadoraDeSuelo1 := Perforadora sobreSuelo: sueloAExcavar1
	
	
	
	
	

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:19' prior: 50645355!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadoraDeSuelo1 calcularProfundidadDelSueloHasta: (CapaDeSuelo concretoConResistencia: 10)).

	! !

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:13:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:13:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:13:23'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:29' prior: 50647683!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto
	
	self assert: 42 equals: (excavadoraDeSuelo1 calcularProfundidadDelSueloHasta: (CapaDeSuelo concretoConResistencia: 10)).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:36' prior: 50645339!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadoraDeSuelo1 calcularProfundidadDelSueloHasta: CapaDeSuelo tierra).

	! !

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:13:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:13:38'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:45' prior: 50647788!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra
	
	self assert: 2 equals: (excavadoraDeSuelo1 calcularProfundidadDelSueloHasta: CapaDeSuelo tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:13:54' prior: 50645323!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso
	
	self assert: 0 equals: (excavadoraDeSuelo1 calcularProfundidadDelSueloHasta: CapaDeSuelo arenoso).

	! !

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:13:55'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:13:55'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:14:03' prior: 50644906!
test16PuedeContarLasCapasDeTipoConcreto


	self assert: 1 equals: (excavadoraDeSuelo1 contarCapas: (CapaDeSuelo concretoConResistencia: 10)).

	! !

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:14:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:14:04'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:14:07' prior: 50647978!
test16PuedeContarLasCapasDeTipoConcreto

	self assert: 1 equals: (excavadoraDeSuelo1 contarCapas: (CapaDeSuelo concretoConResistencia: 10)).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:14:15' prior: 50644813!
test15PuedeContarLasCapasDeTipoTierra
	
	self assert: 1 equals: (excavadoraDeSuelo1 contarCapas: CapaDeSuelo tierra).

	! !

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:14:17'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:14:21'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:14:21'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:14:38' prior: 50644433!
test14PuedeContarLasCapasDeTipoArenoso
	
	self assert: 2 equals: (excavadoraDeSuelo1 contarCapas: CapaDeSuelo arenoso).

	! !

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:14:45'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:15:21'!
sueloArenoso

	^ {
			CapaDeSuelo arenoso.
			}! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:15:21' prior: 50640703!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloArenoso .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:15:21' prior: 50640715!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloArenoso .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:15:26'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:18:38'!
capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia

	^ {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 }! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:18:38' prior: 50647550!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self excavadoraConMecha: [excavadora ponerMechaSoft] daGolpeDeTaladroA: excavadora.
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:18:38' prior: 50640639!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:18:38' prior: 50640588!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:18:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:18:44'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:19:15'!
capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: numeroDeResistencia

	^ {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: numeroDeResistencia }! !

!methodRemoval: TestDePerforación #capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia stamp: 'CB 5/8/2023 20:19:18'!
capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia

	^ {
			CapaDeSuelo arenoso.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 }!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:19:23' prior: 50648210!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self excavadoraConMecha: [excavadora ponerMechaSoft] daGolpeDeTaladroA: excavadora.
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:19:30' prior: 50648246!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:19:42' prior: 50648376!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:17'!
capaDeTierraSeguidaDeConcretaConResistencia

	^ {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 }! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:17' prior: 50640603!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:17' prior: 50640556!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:17' prior: 50640657!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:24' prior: 50648406!
capaDeTierraSeguidaDeConcretaConResistencia

	^ {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 }! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:24' prior: 50648413!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:24' prior: 50648429!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:20:24' prior: 50648443!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'ARM 5/5/2023 17:59:09' prior: 50648465!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:21:17' prior: 50648481!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:21:46'!
capaDeTierraSeguidaDeConcretaConResistencia: numeroDeResistencia

	^ {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: numeroDeResistencia }! !

!methodRemoval: TestDePerforación #capaDeTierraSeguidaDeConcretaConResistencia stamp: 'CB 5/8/2023 20:21:51'!
capaDeTierraSeguidaDeConcretaConResistencia

	^ {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 }!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:22:38' prior: 50640619!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:22:41'!
FAILURE!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:23:38' prior: 50648554!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:24:08'!
capaDeConcretoConResistenciaSeguidaDeTierra

	^ {
			CapaDeSuelo concretoConResistencia: 5.	
			CapaDeSuelo tierra.
}! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:24:08' prior: 50648578!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:24:12' prior: 50648605!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !

----SNAPSHOT----(8 May 2023 20:24:41) CuisUniversity-5706.image priorSource: 10104312!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:25:44'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:25:44'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:25:44'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:25:44'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:25:59'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:25:59'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:25:59'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:25:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:25:59'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:26:35' prior: 50648527!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	 
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:26:36'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:26:36'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:26:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:26:36'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:26:56' prior: 50648495!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:26:57'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:26:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:26:57'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:27:06' prior: 50648228!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:27:07'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:27:07'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:30:44' prior: 50648358!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraConMecha: [excavadora ponerMechaSoft] daGolpeDeTaladroA: excavadora.
	"""excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro."""
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:30:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:30:45'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:31:20' prior: 50649085!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	"""excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro."""
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:31:48'!
excavadoraDaGolpeDeTaladroConMecha: blockClousere 
	
	^(blockClousere value) darGolpeDeTaladro.
	
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:32:06' prior: 50649201!
excavadoraDaGolpeDeTaladroConMecha: bloqueQueIndicaMecha 
	
	^(bloqueQueIndicaMecha  value) darGolpeDeTaladro.
	
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:32:09' prior: 50649207!
excavadoraDaGolpeDeTaladroConMecha: bloqueQueIndicaMecha 
	
	^(bloqueQueIndicaMecha value) darGolpeDeTaladro.
	
	
	! !

!methodRemoval: TestDePerforación #excavadoraConMecha:daGolpeDeTaladroA: stamp: 'CB 5/8/2023 20:32:15'!
excavadoraConMecha: blockClousere daGolpeDeTaladroA: sueloAExcavar
	
	^(blockClousere value) darGolpeDeTaladro.
	
	
	!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:32:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:32:25'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:32:44' prior: 50649183!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia:5 .
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:33:01' prior: 50648797!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	 
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:33:14' prior: 50648391!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:33:49' prior: 50640571!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:33:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:33:51'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:35:16' prior: 50648510!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaWidia].
	
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:35:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:35:18'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:35:37' prior: 50648625!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaWidia].
	
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:35:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:35:38'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:35:57' prior: 50640672!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			CapaDeSuelo tierra.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaDiamante].

	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:36:34' prior: 50640689!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo arenoso.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].

	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:36:50' prior: 50648172!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self sueloArenoso .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	
	self assert: excavadora elementsInContainer isEmpty
	! !

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:36:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:36:51'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:37:51' prior: 50648890!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaDiamante].
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:38:01' prior: 50649547!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaWidia].
	
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:38:38' prior: 50649450!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaWidia].
	
	excavadora darGolpeDeTaladro.	
	
	self assert: CapaDeSuelo arenoso equals: excavadora capaDeSueloInmediata
	
	! !

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:38:39'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:38:39'!
PASSED!
!Arenoso methodsFor: 'tipo' stamp: 'CB 5/8/2023 20:40:36' prior: 50643158 overrides: 50643161!
esArenoso
	"""^true."""! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:40:41'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:40:41'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:40:41'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:41:10'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:41:10'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:41:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:41:14'!
ERROR!
!Arenoso methodsFor: 'comparing' stamp: 'CB 5/8/2023 20:42:25' prior: 50643887 overrides: 50643907!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class)! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:42:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:42:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:42:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:42:30'!
PASSED!
!Arenoso methodsFor: 'comparing' stamp: 'CB 5/8/2023 20:42:37' prior: 50650065 overrides: 50643907!
= unaCapaDeSuelo

	^unaCapaDeSuelo isKindOf: self class! !
!Concreto methodsFor: 'comparing' stamp: 'CB 5/8/2023 20:42:47' prior: 50643899 overrides: 50643907!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !
!Tierra methodsFor: 'comparing' stamp: 'CB 5/8/2023 20:42:55' prior: 50643893 overrides: 50643907!
= unaCapaDeSuelo

	^unaCapaDeSuelo isKindOf: self class! !

!methodRemoval: Tierra #esArenoso stamp: 'CB 5/8/2023 20:43:06'!
esArenoso
	^false!

!methodRemoval: Tierra #esConcreto stamp: 'CB 5/8/2023 20:43:06'!
esConcreto
	^false!

!methodRemoval: Tierra #esTierra stamp: 'CB 5/8/2023 20:43:06'!
esTierra
	^true!

!methodRemoval: Concreto #esArenoso stamp: 'CB 5/8/2023 20:43:11'!
esArenoso
	^false!

!methodRemoval: Concreto #esConcreto stamp: 'CB 5/8/2023 20:43:11'!
esConcreto
	^true!

!methodRemoval: Concreto #esTierra stamp: 'CB 5/8/2023 20:43:11'!
esTierra
	^false!

!methodRemoval: Arenoso #esArenoso stamp: 'CB 5/8/2023 20:43:17'!
esArenoso
	"""^true."""!

!methodRemoval: Arenoso #esConcreto stamp: 'CB 5/8/2023 20:43:17'!
esConcreto
	^false.!

!methodRemoval: Arenoso #esTierra stamp: 'CB 5/8/2023 20:43:17'!
esTierra
	^false.!

!methodRemoval: CapaDeSuelo #esArenoso stamp: 'CB 5/8/2023 20:43:25'!
esArenoso
	^self subclassResponsibility.!

!methodRemoval: CapaDeSuelo #esConcreto stamp: 'CB 5/8/2023 20:43:25'!
esConcreto
	^self subclassResponsibility.!

!methodRemoval: CapaDeSuelo #esTierra stamp: 'CB 5/8/2023 20:43:25'!
esTierra
	^self subclassResponsibility.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:43:29'!
PASSED!

----SNAPSHOT----(8 May 2023 20:43:32) CuisUniversity-5706.image priorSource: 10143788!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:43:56' prior: 50649307!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: 5.
	
	 
 	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaSoft].
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 20:45:42' prior: 50649647!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self capaDeConcretoConResistenciaSeguidaDeTierra.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	excavadora := self excavadoraDaGolpeDeTaladroConMecha: [excavadora ponerMechaDiamante].

	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 20:45:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 20:45:43'!
PASSED!
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 20:48:06' prior: 50641118!
sobreSuelo: capasDeSueloAExcavar 
         self assertSueloValido: capasDeSueloAExcavar. 
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 20:50:41'!
assertSueloValido: capasDeSueloAExcavar
	^ capasDeSueloAExcavar m ifFalse: [ self error: self tipoDeSueloInvalidoErrorDescription ]! !
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 20:51:35'!
tipoDeSueloInvalidoErrorDescription
	^ 'no se puede crear un suelo donde dos capas contiguas sean de un mismo tipo'! !

----SNAPSHOT----(8 May 2023 20:54:12) CuisUniversity-5706.image priorSource: 10195863!

----SNAPSHOT----(8 May 2023 21:00:57) CuisUniversity-5706.image priorSource: 10200278!

Perforadora sobreSuelo: sueloAExcavar1!

self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: 5!

self capaArenosaSeguidaDeTierraSeguidaDeConcretaConResistencia: 5.!
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:03:06' prior: 50650388!
sobreSuelo: capasDeSueloAExcavar 
       """  self assertSueloValido: capasDeSueloAExcavar.""" 
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:03:09'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:03:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:03:18'!
PASSED!
!Behavior method!
pasarAProximaCapa
	#_coverageTracker29824416_ markAsExecuted.
	#_coverageTracker29824416_
		cover: (20 to: 43)
		declaredAt: (20 to: 43)
		by:
			(vecesQueGolpeoCapaActual _ #_coverageTracker29824416_
				coverAll:
					{48 to: 48}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker29824416_
		cover: (74 to: 91)
		declaredAt: (52 to: 69)
		by:
			(capasDeSueloDebajo _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824416_
				cover: (52 to: 69)
				declaredAt: (52 to: 69)
				by: capasDeSueloDebajo.
			#_coverageTracker29824416_
				coverAll:
					{93 to: 103}
				evaluating: [ receiver1 allButFirst ]
				thatSends: #allButFirst
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker29824416_
		cover: (107 to: 124)
		declaredAt: (52 to: 69)
		by: capasDeSueloDebajo.
	#_coverageTracker29824416_
		coverAll:
			{126 to: 133}
		evaluating: [ receiver2 ifEmpty: [ ^ #_coverageTracker29824416_
					coverAll:
						{137 to: 140}
					byLiteralOrPseudoVariable: self ]]
		thatSends: #ifEmpty:
		to: receiver2 ] value.
	[ | receiver6 |
	receiver6 _ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ #_coverageTracker29824416_
		cover: (147 to: 164)
		declaredAt: (52 to: 69)
		by: capasDeSueloDebajo.
	#_coverageTracker29824416_
		coverAll:
			{166 to: 170}
		evaluating: [ receiver3 first ]
		thatSends: #first
		to: receiver3 ] value.
	#_coverageTracker29824416_
		coverAll:
			{172 to: 180}
		evaluating: [
			receiver4 isKindOf:
				(#_coverageTracker29824416_
					coverAll:
						{182 to: 192}
					by: CapaDeSuelo) ]
		thatSends: #isKindOf:
		to: receiver4 ] value.
	#_coverageTracker29824416_
		coverAll:
			{195 to: 202}
		evaluating: [
			receiver6 ifFalse: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker29824416_
					cover: (208 to: 216)
					declaredAt: (208 to: 216)
					by: container.
				#_coverageTracker29824416_
					coverAll:
						{218 to: 224}
					evaluating: [
						receiver5 addAll:
							(#_coverageTracker29824416_
								cover: (226 to: 243)
								declaredAt: (52 to: 69)
								by: capasDeSueloDebajo) ]
					thatSends: #addAll:
					to: receiver5 ] value ]]
		thatSends: #ifFalse:
		to: receiver6 ] value.! !
!Behavior method!
deactivateTurbo
	#_coverageTracker29824447_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29824447_
		cover: (20 to: 30)
		declaredAt: (20 to: 30)
		by: turboStatus.
	#_coverageTracker29824447_
		coverAll:
			{32 to: 42}
		evaluating: [
			receiver1 deactiveOn:
				(#_coverageTracker29824447_
					coverAll:
						{44 to: 47}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #deactiveOn:
		to: receiver1 ] value.! !
!Behavior method!
includes: aCar
	#_coverageTracker29824451_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824451_
		cover: (20 to: 23)
		declaredAt: (20 to: 23)
		by: cars.
	#_coverageTracker29824451_
		coverAll:
			{25 to: 36}
		evaluating: [
			receiver1 includesKey:
				(#_coverageTracker29824451_
					cover: (38 to: 41)
					declaredAt: (11 to: 14)
					by: aCar) ]
		thatSends: #includesKey:
		to: receiver1 ] value.! !
!Behavior method!
drivenBy: aDriver
	#_coverageTracker29824466_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824466_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824466_
		coverAll:
			{28 to: 30}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29824466_
		coverAll:
			{32 to: 50}
		evaluating: [
			receiver2 initializeDrivenBy:
				(#_coverageTracker29824466_
					cover: (52 to: 58)
					declaredAt: (11 to: 17)
					by: aDriver) ]
		thatSends: #initializeDrivenBy:
		to: receiver2 ] value.! !
!Behavior method!
initializeWith: aMap
	#_coverageTracker29824470_ markAsExecuted.
	#_coverageTracker29824470_
		cover: (24 to: 26)
		declaredAt: (24 to: 26)
		by:
			(map _ #_coverageTracker29824470_
				cover: (31 to: 34)
				declaredAt: (17 to: 20)
				by: aMap).! !
!Behavior method!
canMoveBucanero: aBucanero to: aPosition at: island
	#_coverageTracker29824473_ markAsExecuted.
	^ #_coverageTracker29824473_
		coverAll:
			{58 to: 61}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
bajaUnDecimoDeResistencia
	#_coverageTracker29824487_ markAsExecuted.
	#_coverageTracker29824487_
		cover: (43 to: 53)
		declaredAt: (28 to: 38)
		by:
			(resistencia _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824487_
				cover: (28 to: 38)
				declaredAt: (28 to: 38)
				by: resistencia.
			#_coverageTracker29824487_
				coverAll:
					{55 to: 55}
				evaluating: [
					receiver1 -
						(#_coverageTracker29824487_
							coverAll:
								{56 to: 57}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #-
				to: receiver1 ] value).! !
!Behavior method!
test24CanNotActivateTurboWhenTurboIsActivated
	#_coverageTracker29824505_ markAsExecuted.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824505_
		coverAll:
			{49 to: 52}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824505_
		coverAll:
			{54 to: 77}
		evaluating: [
			receiver6 withTurboAvailableCarDo: [ :turboAvailableCar |
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824505_
					cover: (104 to: 120)
					declaredAt: (82 to: 98)
					by: turboAvailableCar.
				#_coverageTracker29824505_
					coverAll:
						{122 to: 134}
					evaluating: [ receiver1 activateTurbo ]
					thatSends: #activateTurbo
					to: receiver1 ] value.
				[ | receiver5 |
				receiver5 _ #_coverageTracker29824505_
					coverAll:
						{142 to: 145}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824505_
					coverAll:
						{151 to: 157. 198 to: 203. 238 to: 253}
					evaluating: [
						receiver5
							should: [
								[ | receiver2 |
								receiver2 _ #_coverageTracker29824505_
									cover: (161 to: 177)
									declaredAt: (82 to: 98)
									by: turboAvailableCar.
								#_coverageTracker29824505_
									coverAll:
										{179 to: 191}
									evaluating: [ receiver2 activateTurbo ]
									thatSends: #activateTurbo
									to: receiver2 ] value ]
							raise:
								[ | receiver3 |
								receiver3 _ #_coverageTracker29824505_
									coverAll:
										{205 to: 209}
									by: Error.
								#_coverageTracker29824505_
									coverAll:
										{211 to: 211}
									evaluating: [
										receiver3 -
											(#_coverageTracker29824505_
												coverAll:
													{213 to: 232}
												by: MessageNotUnderstood) ]
									thatSends: #-
									to: receiver3 ] value
							withMessageText:
								[ | receiver4 |
								receiver4 _ #_coverageTracker29824505_
									cover: (255 to: 271)
									declaredAt: (82 to: 98)
									by: turboAvailableCar.
								#_coverageTracker29824505_
									coverAll:
										{273 to: 309}
									evaluating: [ receiver4 turboAlreadyActivatedErrorDescription ]
									thatSends: #turboAlreadyActivatedErrorDescription
									to: receiver4 ] value ]
					thatSends: #should:raise:withMessageText:
					to: receiver5 ] value ]]
		thatSends: #withTurboAvailableCarDo:
		to: receiver6 ] value.! !
!Behavior method!
treasureMarkAt: aPosition
	#_coverageTracker29824526_ markAsExecuted.
	#_coverageTracker29824526_
		cover: (29 to: 48)
		declaredAt: (29 to: 48)
		by:
			(treasureMarkPosition _ #_coverageTracker29824526_
				cover: (53 to: 61)
				declaredAt: (17 to: 25)
				by: aPosition).! !
!Behavior method!
esAptaEnConcretoPara: unaExcavadora
	#_coverageTracker29824530_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824530_
		cover: (48 to: 60)
		declaredAt: (23 to: 35)
		by: unaExcavadora.
	#_coverageTracker29824530_
		coverAll:
			{62 to: 94}
		evaluating: [ receiver1 cavarCapaConcretaConMechaDiamante ]
		thatSends: #cavarCapaConcretaConMechaDiamante
		to: receiver1 ] value.! !
!Behavior method!
cavarCapaConcretaConMechaWidia
	#_coverageTracker29824546_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824546_
		cover: (41 to: 64)
		declaredAt: (41 to: 64)
		by: vecesQueGolpeoCapaActual.
	#_coverageTracker29824546_
		coverAll:
			{66 to: 66}
		evaluating: [
			receiver1 =
				(#_coverageTracker29824546_
					coverAll:
						{68 to: 68}
					byLiteralOrPseudoVariable: 3) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker29824546_
		coverAll:
			{70 to: 76}
		evaluating: [
			receiver4 ifTrue: [
				#_coverageTracker29824546_
					cover: (80 to: 90)
					declaredAt: (80 to: 90)
					by:
						(mechaPuesta _ [ | receiver2 |
						receiver2 _ #_coverageTracker29824546_
							coverAll:
								{95 to: 98}
							by: Rota.
						#_coverageTracker29824546_
							coverAll:
								{100 to: 102}
							evaluating: [ receiver2 new ]
							thatSends: #new
							to: receiver2 ] value).
				[ | receiver3 |
				receiver3 _ #_coverageTracker29824546_
					coverAll:
						{105 to: 108}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824546_
					coverAll:
						{110 to: 115}
					evaluating: [
						receiver3 error:
							(#_coverageTracker29824546_
								coverAll:
									{117 to: 127}
								byLiteralOrPseudoVariable: 'Se rompió') ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	^ #_coverageTracker29824546_
		coverAll:
			{142 to: 145}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
elementsInContainer
	#_coverageTracker29824578_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824578_
		cover: (23 to: 31)
		declaredAt: (23 to: 31)
		by: container.
	#_coverageTracker29824578_
		coverAll:
			{33 to: 39}
		evaluating: [ receiver1 asArray ]
		thatSends: #asArray
		to: receiver1 ] value.! !
!Behavior method!
positionOf: aCar
	#_coverageTracker29824581_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824581_
		cover: (23 to: 26)
		declaredAt: (23 to: 26)
		by: cars.
	#_coverageTracker29824581_
		coverAll:
			{28 to: 30}
		evaluating: [
			receiver1 at:
				(#_coverageTracker29824581_
					cover: (32 to: 35)
					declaredAt: (13 to: 16)
					by: aCar) ]
		thatSends: #at:
		to: receiver1 ] value.! !
!Behavior method!
drawDirectionTo: aPosition
	#_coverageTracker29824586_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29824586_
		cover: (30 to: 32)
		declaredAt: (30 to: 32)
		by: map.
	#_coverageTracker29824586_
		coverAll:
			{34 to: 42}
		evaluating: [
			receiver3 nextStep:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29824586_
					cover: (44 to: 52)
					declaredAt: (18 to: 26)
					by: aPosition.
				#_coverageTracker29824586_
					coverAll:
						{54 to: 54}
					evaluating: [
						receiver2 -
							[ | receiver1 |
							receiver1 _ #_coverageTracker29824586_
								cover: (57 to: 59)
								declaredAt: (30 to: 32)
								by: map.
							#_coverageTracker29824586_
								coverAll:
									{61 to: 72}
								evaluating: [ receiver1 lastPosition ]
								thatSends: #lastPosition
								to: receiver1 ] value ]
					thatSends: #-
					to: receiver2 ] value ]
		thatSends: #nextStep:
		to: receiver3 ] value.! !
!Behavior method!
moveTo: aPosition
	| moved terrain |
	#_coverageTracker29824595_ markAsExecuted.
	#_coverageTracker29824595_
		cover: (42 to: 48)
		declaredAt: (29 to: 35)
		by:
			(terrain _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824595_
				cover: (53 to: 58)
				declaredAt: (53 to: 58)
				by: island.
			#_coverageTracker29824595_
				coverAll:
					{60 to: 69}
				evaluating: [
					receiver1 terrainAt:
						(#_coverageTracker29824595_
							cover: (71 to: 79)
							declaredAt: (9 to: 17)
							by: aPosition) ]
				thatSends: #terrainAt:
				to: receiver1 ] value).
	#_coverageTracker29824595_
		cover: (85 to: 89)
		declaredAt: (23 to: 27)
		by:
			(moved _ [ | receiver4 |
			receiver4 _ #_coverageTracker29824595_
				cover: (94 to: 100)
				declaredAt: (94 to: 100)
				by: pirates.
			#_coverageTracker29824595_
				coverAll:
					{102 to: 108. 115 to: 119}
				evaluating: [
					receiver4
						inject:
							(#_coverageTracker29824595_
								coverAll:
									{110 to: 113}
								byLiteralOrPseudoVariable: true)
						into: [ :canMove :pirate |
							[ | receiver3 |
							receiver3 _ #_coverageTracker29824595_
								cover: (142 to: 148)
								declaredAt: (124 to: 130)
								by: canMove.
							#_coverageTracker29824595_
								coverAll:
									{150 to: 150}
								evaluating: [
									receiver3 &
										[ | receiver2 |
										receiver2 _ #_coverageTracker29824595_
											cover: (153 to: 158)
											declaredAt: (133 to: 138)
											by: pirate.
										#_coverageTracker29824595_
											coverAll:
												{160 to: 169. 181 to: 183. 193 to: 195}
											evaluating: [
												receiver2
													canMoveTo:
														(#_coverageTracker29824595_
															cover: (171 to: 179)
															declaredAt: (9 to: 17)
															by: aPosition)
													in:
														(#_coverageTracker29824595_
															cover: (185 to: 191)
															declaredAt: (29 to: 35)
															by: terrain)
													at:
														(#_coverageTracker29824595_
															cover: (197 to: 202)
															declaredAt: (53 to: 58)
															by: island) ]
											thatSends: #canMoveTo:in:at:
											to: receiver2 ] value ]
								thatSends: #&
								to: receiver3 ] value ]]
				thatSends: #inject:into:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824595_
		cover: (250 to: 254)
		declaredAt: (23 to: 27)
		by: moved.
	#_coverageTracker29824595_
		coverAll:
			{256 to: 262}
		evaluating: [
			receiver6 ifTrue: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker29824595_
					cover: (266 to: 271)
					declaredAt: (53 to: 58)
					by: island.
				#_coverageTracker29824595_
					coverAll:
						{273 to: 279}
					evaluating: [
						receiver5 crewAt:
							(#_coverageTracker29824595_
								cover: (281 to: 289)
								declaredAt: (9 to: 17)
								by: aPosition) ]
					thatSends: #crewAt:
					to: receiver5 ] value ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.! !
!Behavior method!
ponerMechaWidia
	#_coverageTracker29824625_ markAsExecuted.
	#_coverageTracker29824625_
		cover: (18 to: 28)
		declaredAt: (18 to: 28)
		by:
			(mechaPuesta _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824625_
				coverAll:
					{33 to: 37}
				by: Widia.
			#_coverageTracker29824625_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
puede: unaExcavadora cavarCon: suMechaActual
	#_coverageTracker29824640_ markAsExecuted.
	self.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824640_
		cover: (56 to: 68)
		declaredAt: (32 to: 44)
		by: suMechaActual.
	#_coverageTracker29824640_
		coverAll:
			{70 to: 89}
		evaluating: [
			receiver1 esAptaEnArenosoPara:
				(#_coverageTracker29824640_
					cover: (91 to: 103)
					declaredAt: (8 to: 20)
					by: unaExcavadora) ]
		thatSends: #esAptaEnArenosoPara:
		to: receiver1 ] value.! !
!Behavior method!
= unaCapaDeSuelo
	#_coverageTracker29824645_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ [ | receiver2 |
	receiver2 _ #_coverageTracker29824645_
		cover: (22 to: 35)
		declaredAt: (3 to: 16)
		by: unaCapaDeSuelo.
	#_coverageTracker29824645_
		coverAll:
			{37 to: 45}
		evaluating: [
			receiver2 isKindOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824645_
					coverAll:
						{47 to: 50}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824645_
					coverAll:
						{52 to: 56}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value ]
		thatSends: #isKindOf:
		to: receiver2 ] value.
	#_coverageTracker29824645_
		coverAll:
			{59 to: 62}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 _ #_coverageTracker29824645_
					cover: (65 to: 75)
					declaredAt: (65 to: 75)
					by: resistencia.
				#_coverageTracker29824645_
					coverAll:
						{77 to: 77}
					evaluating: [
						receiver4 =
							[ | receiver3 |
							receiver3 _ #_coverageTracker29824645_
								cover: (79 to: 92)
								declaredAt: (3 to: 16)
								by: unaCapaDeSuelo.
							#_coverageTracker29824645_
								coverAll:
									{94 to: 104}
								evaluating: [ receiver3 resistencia ]
								thatSends: #resistencia
								to: receiver3 ] value ]
					thatSends: #=
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente
	#_coverageTracker29824669_ markAsExecuted.
	#_coverageTracker29824669_
		cover: (58 to: 75)
		declaredAt: (58 to: 75)
		by:
			(capasDeSueloDebajo _ #_coverageTracker29824669_
				cover: (80 to: 111)
				declaredAt: (23 to: 54)
				by: capasDeSueloAExcavarInicialmente).
	#_coverageTracker29824669_
		cover: (115 to: 138)
		declaredAt: (115 to: 138)
		by:
			(vecesQueGolpeoCapaActual _ #_coverageTracker29824669_
				coverAll:
					{143 to: 143}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker29824669_
		cover: (147 to: 155)
		declaredAt: (147 to: 155)
		by:
			(container _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824669_
				coverAll:
					{160 to: 176}
				by: OrderedCollection.
			#_coverageTracker29824669_
				coverAll:
					{178 to: 180}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker29824669_
		cover: (184 to: 194)
		declaredAt: (184 to: 194)
		by:
			(mechaPuesta _ [ | receiver2 |
			receiver2 _ #_coverageTracker29824669_
				coverAll:
					{199 to: 206}
				by: SinMecha.
			#_coverageTracker29824669_
				coverAll:
					{208 to: 210}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
sobreSuelo: capasDeSueloAExcavar
	""
	"  self assertSueloValido: capasDeSueloAExcavar."
	""
	#_coverageTracker29824675_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824675_
		coverAll:
			{99 to: 102}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824675_
		coverAll:
			{104 to: 106}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29824675_
		coverAll:
			{108 to: 128}
		evaluating: [
			receiver2 initializeSobreSuelo:
				(#_coverageTracker29824675_
					cover: (130 to: 149)
					declaredAt: (13 to: 32)
					by: capasDeSueloAExcavar) ]
		thatSends: #initializeSobreSuelo:
		to: receiver2 ] value.! !
!Behavior method!
turboAlreadyActivatedErrorDescription
	#_coverageTracker29824689_ markAsExecuted.
	^ #_coverageTracker29824689_
		coverAll:
			{43 to: 67}
		byLiteralOrPseudoVariable: 'Turbo already activated'.! !
!Behavior method!
initialize
	#_coverageTracker29824692_ markAsExecuted.
	#_coverageTracker29824692_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by:
			(rank _ #_coverageTracker29824692_
				coverAll:
					{22 to: 34}
				byLiteralOrPseudoVariable: #SimplePirate).! !
!Behavior method!
corsario: aCorsario buryTreasureAt: aPosition at: island
	#_coverageTracker29824695_ markAsExecuted.! !
!Behavior method!
cannotDigErrorDescription
	#_coverageTracker29824698_ markAsExecuted.
	^ #_coverageTracker29824698_
		coverAll:
			{31 to: 73}
		byLiteralOrPseudoVariable: 'Arrgh!! I cannot dig this type of terrain!!'.! !
!Behavior method!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap
	| nextPosition |
	#_coverageTracker29824715_ markAsExecuted.
	#_coverageTracker29824715_
		cover: (80 to: 91)
		declaredAt: (61 to: 72)
		by:
			(nextPosition _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824715_
				coverAll:
					{96 to: 96}
				byLiteralOrPseudoVariable: 2.
			#_coverageTracker29824715_
				coverAll:
					{97 to: 97}
				evaluating: [
					receiver1 @
						(#_coverageTracker29824715_
							coverAll:
								{98 to: 98}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #@
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker29824715_
		coverAll:
			{102 to: 105}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824715_
		coverAll:
			{107 to: 113}
		evaluating: [
			receiver3 assert:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29824715_
					cover: (115 to: 118)
					declaredAt: (115 to: 118)
					by: map1.
				#_coverageTracker29824715_
					coverAll:
						{120 to: 126}
					evaluating: [ receiver2 isEmpty ]
					thatSends: #isEmpty
					to: receiver2 ] value ]
		thatSends: #assert:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29824715_
		cover: (131 to: 135)
		declaredAt: (131 to: 135)
		by: crew1.
	#_coverageTracker29824715_
		coverAll:
			{137 to: 143}
		evaluating: [
			receiver4 moveTo:
				(#_coverageTracker29824715_
					cover: (145 to: 156)
					declaredAt: (61 to: 72)
					by: nextPosition) ]
		thatSends: #moveTo:
		to: receiver4 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824715_
		coverAll:
			{161 to: 164}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824715_
		coverAll:
			{166 to: 172. 189 to: 195}
		evaluating: [
			receiver6
				assert:
					[ | receiver5 |
					receiver5 _ #_coverageTracker29824715_
						cover: (174 to: 177)
						declaredAt: (115 to: 118)
						by: map1.
					#_coverageTracker29824715_
						coverAll:
							{179 to: 187}
						evaluating: [ receiver5 stepsSize ]
						thatSends: #stepsSize
						to: receiver5 ] value
				equals:
					(#_coverageTracker29824715_
						coverAll:
							{197 to: 197}
						byLiteralOrPseudoVariable: 1) ]
		thatSends: #assert:equals:
		to: receiver6 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29824715_
		coverAll:
			{202 to: 205}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824715_
		coverAll:
			{207 to: 213. 233 to: 239}
		evaluating: [
			receiver8
				assert:
					[ | receiver7 |
					receiver7 _ #_coverageTracker29824715_
						cover: (215 to: 218)
						declaredAt: (115 to: 118)
						by: map1.
					#_coverageTracker29824715_
						coverAll:
							{220 to: 231}
						evaluating: [ receiver7 lastPosition ]
						thatSends: #lastPosition
						to: receiver7 ] value
				equals:
					(#_coverageTracker29824715_
						cover: (241 to: 252)
						declaredAt: (61 to: 72)
						by: nextPosition) ]
		thatSends: #assert:equals:
		to: receiver8 ] value.! !
!Behavior method!
test15ACarStoppedShouldNotMoveAfterSomeTime
	| grandPrix verstappen |
	#_coverageTracker29824730_ markAsExecuted.
	#_coverageTracker29824730_
		cover: (75 to: 84)
		declaredAt: (59 to: 68)
		by:
			(verstappen _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824730_
				coverAll:
					{88 to: 91}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29824730_
				coverAll:
					{93 to: 105}
				evaluating: [ receiver1 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver1 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker29824730_
		cover: (109 to: 118)
		declaredAt: (59 to: 68)
		by: verstappen.
	#_coverageTracker29824730_
		coverAll:
			{120 to: 125}
		evaluating: [
			receiver4 speed:
				[ | receiver3 |
				receiver3 _ [ | receiver2 |
				receiver2 _ #_coverageTracker29824730_
					coverAll:
						{127 to: 127}
					byLiteralOrPseudoVariable: 0.
				#_coverageTracker29824730_
					coverAll:
						{129 to: 129}
					evaluating: [
						receiver2 *
							(#_coverageTracker29824730_
								coverAll:
									{131 to: 139}
								by: kilometer) ]
					thatSends: #*
					to: receiver2 ] value.
				#_coverageTracker29824730_
					coverAll:
						{141 to: 141}
					evaluating: [
						receiver3 /
							(#_coverageTracker29824730_
								coverAll:
									{143 to: 146}
								by: hour) ]
					thatSends: #/
					to: receiver3 ] value ]
		thatSends: #speed:
		to: receiver4 ] value.
	#_coverageTracker29824730_
		cover: (152 to: 160)
		declaredAt: (49 to: 57)
		by:
			(grandPrix _ [ | receiver7 |
			receiver7 _ #_coverageTracker29824730_
				coverAll:
					{164 to: 172}
				by: GrandPrix.
			#_coverageTracker29824730_
				coverAll:
					{177 to: 179. 203 to: 210. 218 to: 222}
				evaluating: [
					receiver7
						on:
							[ | receiver5 |
							receiver5 _ #_coverageTracker29824730_
								coverAll:
									{181 to: 184}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29824730_
								coverAll:
									{186 to: 199}
								evaluating: [ receiver5 oneSectorTrack ]
								thatSends: #oneSectorTrack
								to: receiver5 ] value
						running:
							(#_coverageTracker29824730_
								coverAll:
									{212 to: 214}
								byLiteralOrPseudoVariable: 100)
						with:
							[ | receiver6 |
							receiver6 _ #_coverageTracker29824730_
								coverAll:
									{225 to: 227}
								by: Set.
							#_coverageTracker29824730_
								coverAll:
									{229 to: 233}
								evaluating: [
									receiver6 with:
										(#_coverageTracker29824730_
											cover: (235 to: 244)
											declaredAt: (59 to: 68)
											by: verstappen) ]
								thatSends: #with:
								to: receiver6 ] value ]
				thatSends: #on:running:with:
				to: receiver7 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker29824730_
		cover: (251 to: 259)
		declaredAt: (49 to: 57)
		by: grandPrix.
	#_coverageTracker29824730_
		coverAll:
			{261 to: 264. 277 to: 279}
		evaluating: [
			receiver9
				put:
					(#_coverageTracker29824730_
						cover: (266 to: 275)
						declaredAt: (59 to: 68)
						by: verstappen)
				at:
					[ | receiver8 |
					receiver8 _ #_coverageTracker29824730_
						coverAll:
							{281 to: 281}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29824730_
						coverAll:
							{283 to: 283}
						evaluating: [
							receiver8 *
								(#_coverageTracker29824730_
									coverAll:
										{285 to: 293}
									by: kilometer) ]
						thatSends: #*
						to: receiver8 ] value ]
		thatSends: #put:at:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29824730_
		cover: (297 to: 305)
		declaredAt: (49 to: 57)
		by: grandPrix.
	#_coverageTracker29824730_
		coverAll:
			{307 to: 314}
		evaluating: [
			receiver11 advance:
				[ | receiver10 |
				receiver10 _ #_coverageTracker29824730_
					coverAll:
						{316 to: 317}
					byLiteralOrPseudoVariable: 10.
				#_coverageTracker29824730_
					coverAll:
						{319 to: 319}
					evaluating: [
						receiver10 *
							(#_coverageTracker29824730_
								coverAll:
									{321 to: 326}
								by: minute) ]
					thatSends: #*
					to: receiver10 ] value ]
		thatSends: #advance:
		to: receiver11 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker29824730_
		coverAll:
			{332 to: 335}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824730_
		coverAll:
			{337 to: 343. 359 to: 365}
		evaluating: [
			receiver14
				assert:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29824730_
						coverAll:
							{345 to: 345}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29824730_
						coverAll:
							{347 to: 347}
						evaluating: [
							receiver12 *
								(#_coverageTracker29824730_
									coverAll:
										{349 to: 357}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value
				equals:
					[ | receiver13 |
					receiver13 _ #_coverageTracker29824730_
						cover: (368 to: 376)
						declaredAt: (49 to: 57)
						by: grandPrix.
					#_coverageTracker29824730_
						coverAll:
							{378 to: 388}
						evaluating: [
							receiver13 locationOf:
								(#_coverageTracker29824730_
									cover: (390 to: 399)
									declaredAt: (59 to: 68)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver13 ] value ]
		thatSends: #assert:equals:
		to: receiver14 ] value.! !
!Behavior method!
test07CaptainCanUseMap
	| pirate |
	#_coverageTracker29824793_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29824793_
		cover: (40 to: 44)
		declaredAt: (40 to: 44)
		by: crew1.
	#_coverageTracker29824793_
		coverAll:
			{46 to: 52}
		evaluating: [
			receiver2 moveTo:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824793_
					coverAll:
						{54 to: 54}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29824793_
					coverAll:
						{55 to: 55}
					evaluating: [
						receiver1 @
							(#_coverageTracker29824793_
								coverAll:
									{56 to: 56}
								byLiteralOrPseudoVariable: 1) ]
					thatSends: #@
					to: receiver1 ] value ]
		thatSends: #moveTo:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29824793_
		cover: (60 to: 64)
		declaredAt: (40 to: 44)
		by: crew1.
	#_coverageTracker29824793_
		coverAll:
			{66 to: 80}
		evaluating: [
			receiver4 buryTreasureAt:
				[ | receiver3 |
				receiver3 _ #_coverageTracker29824793_
					coverAll:
						{82 to: 82}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29824793_
					coverAll:
						{83 to: 83}
					evaluating: [
						receiver3 @
							(#_coverageTracker29824793_
								coverAll:
									{84 to: 84}
								byLiteralOrPseudoVariable: 2) ]
					thatSends: #@
					to: receiver3 ] value ]
		thatSends: #buryTreasureAt:
		to: receiver4 ] value.
	#_coverageTracker29824793_
		cover: (89 to: 94)
		declaredAt: (28 to: 33)
		by:
			(pirate _ [ | receiver5 |
			receiver5 _ #_coverageTracker29824793_
				coverAll:
					{99 to: 106}
				by: Bucanero.
			#_coverageTracker29824793_
				coverAll:
					{108 to: 110}
				evaluating: [ receiver5 new ]
				thatSends: #new
				to: receiver5 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824793_
		cover: (114 to: 119)
		declaredAt: (28 to: 33)
		by: pirate.
	#_coverageTracker29824793_
		coverAll:
			{121 to: 141}
		evaluating: [ receiver6 aCaptainIWasMeantToBe ]
		thatSends: #aCaptainIWasMeantToBe
		to: receiver6 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29824793_
		coverAll:
			{147 to: 150}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824793_
		coverAll:
			{152 to: 158}
		evaluating: [
			receiver8 assert:
				[ | receiver7 |
				receiver7 _ #_coverageTracker29824793_
					cover: (161 to: 166)
					declaredAt: (28 to: 33)
					by: pirate.
				#_coverageTracker29824793_
					coverAll:
						{168 to: 184. 194 to: 198}
					evaluating: [
						receiver7
							searchTreasureIn:
								(#_coverageTracker29824793_
									cover: (186 to: 192)
									declaredAt: (186 to: 192)
									by: island1)
							with:
								(#_coverageTracker29824793_
									cover: (200 to: 203)
									declaredAt: (200 to: 203)
									by: map1) ]
					thatSends: #searchTreasureIn:with:
					to: receiver7 ] value ]
		thatSends: #assert:
		to: receiver8 ] value.! !
!Behavior method!
searchTreasureIn: island with: aMap
	#_coverageTracker29824811_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824811_
		cover: (39 to: 42)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29824811_
		coverAll:
			{44 to: 44}
		evaluating: [
			receiver1 =
				(#_coverageTracker29824811_
					coverAll:
						{46 to: 58}
					byLiteralOrPseudoVariable: #SimplePirate) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker29824811_
		coverAll:
			{60 to: 66}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker29824811_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824811_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver2 error:
							(#_coverageTracker29824811_
								coverAll:
									{82 to: 104}
								byLiteralOrPseudoVariable: 'I am a simple pirate!!') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ [ | receiver4 |
	receiver4 _ #_coverageTracker29824811_
		cover: (110 to: 113)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29824811_
		coverAll:
			{115 to: 115}
		evaluating: [
			receiver4 =
				(#_coverageTracker29824811_
					coverAll:
						{117 to: 124}
					byLiteralOrPseudoVariable: #Captain) ]
		thatSends: #=
		to: receiver4 ] value.
	#_coverageTracker29824811_
		coverAll:
			{126 to: 132}
		evaluating: [ receiver5 ifTrue: [ ^ #_coverageTracker29824811_
					coverAll:
						{138 to: 141}
					byLiteralOrPseudoVariable: true ]]
		thatSends: #ifTrue:
		to: receiver5 ] value.! !
!Behavior method!
twoSectorsTrack
	#_coverageTracker29824828_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29824828_
		coverAll:
			{21 to: 25}
		by: Track.
	#_coverageTracker29824828_
		coverAll:
			{27 to: 38}
		evaluating: [
			receiver2 withSectors:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824828_
					coverAll:
						{40 to: 43}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824828_
					coverAll:
						{45 to: 54}
					evaluating: [ receiver1 twoSectors ]
					thatSends: #twoSectors
					to: receiver1 ] value ]
		thatSends: #withSectors:
		to: receiver2 ] value.! !
!Behavior method!
filibustero: aFilistero buryTreasureAt: aPosition at: island
	#_coverageTracker29824830_ markAsExecuted.! !
!Behavior method!
activeTurboWhenActivated
	#_coverageTracker29824834_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29824834_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824834_
		coverAll:
			{34 to: 39}
		evaluating: [
			receiver2 error:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824834_
					coverAll:
						{41 to: 44}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824834_
					coverAll:
						{46 to: 82}
					evaluating: [ receiver1 turboAlreadyActivatedErrorDescription ]
					thatSends: #turboAlreadyActivatedErrorDescription
					to: receiver1 ] value ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
= unaCapaDeSuelo
	#_coverageTracker29824841_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29824841_
		cover: (21 to: 34)
		declaredAt: (3 to: 16)
		by: unaCapaDeSuelo.
	#_coverageTracker29824841_
		coverAll:
			{36 to: 44}
		evaluating: [
			receiver2 isKindOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824841_
					coverAll:
						{46 to: 49}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824841_
					coverAll:
						{51 to: 55}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value ]
		thatSends: #isKindOf:
		to: receiver2 ] value.! !
!Behavior method!
receiveTreasureAt: aPosition
	#_coverageTracker29824849_ markAsExecuted.
	#_coverageTracker29824849_
		cover: (32 to: 41)
		declaredAt: (32 to: 41)
		by:
			(treasureAt _ #_coverageTracker29824849_
				cover: (46 to: 54)
				declaredAt: (20 to: 28)
				by: aPosition).! !
!Behavior method!
test03MovingCrewToFreePlace
	| nextPosition |
	#_coverageTracker29824853_ markAsExecuted.
	#_coverageTracker29824853_
		cover: (52 to: 63)
		declaredAt: (33 to: 44)
		by:
			(nextPosition _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824853_
				coverAll:
					{68 to: 68}
				byLiteralOrPseudoVariable: 2.
			#_coverageTracker29824853_
				coverAll:
					{69 to: 69}
				evaluating: [
					receiver1 @
						(#_coverageTracker29824853_
							coverAll:
								{70 to: 70}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #@
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker29824853_
		coverAll:
			{74 to: 77}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824853_
		coverAll:
			{79 to: 85}
		evaluating: [
			receiver3 assert:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29824853_
					cover: (88 to: 94)
					declaredAt: (88 to: 94)
					by: island1.
				#_coverageTracker29824853_
					coverAll:
						{96 to: 105}
					evaluating: [
						receiver2 isEmptyAt:
							(#_coverageTracker29824853_
								cover: (107 to: 118)
								declaredAt: (33 to: 44)
								by: nextPosition) ]
					thatSends: #isEmptyAt:
					to: receiver2 ] value ]
		thatSends: #assert:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29824853_
		cover: (125 to: 129)
		declaredAt: (125 to: 129)
		by: crew1.
	#_coverageTracker29824853_
		coverAll:
			{131 to: 137}
		evaluating: [
			receiver4 moveTo:
				(#_coverageTracker29824853_
					cover: (139 to: 150)
					declaredAt: (33 to: 44)
					by: nextPosition) ]
		thatSends: #moveTo:
		to: receiver4 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824853_
		coverAll:
			{155 to: 158}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824853_
		coverAll:
			{160 to: 164}
		evaluating: [
			receiver6 deny:
				[ | receiver5 |
				receiver5 _ #_coverageTracker29824853_
					cover: (167 to: 173)
					declaredAt: (88 to: 94)
					by: island1.
				#_coverageTracker29824853_
					coverAll:
						{175 to: 184}
					evaluating: [
						receiver5 hasCrewAt:
							(#_coverageTracker29824853_
								cover: (186 to: 198)
								declaredAt: (186 to: 198)
								by: crewPosition1) ]
					thatSends: #hasCrewAt:
					to: receiver5 ] value ]
		thatSends: #deny:
		to: receiver6 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29824853_
		coverAll:
			{203 to: 206}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824853_
		coverAll:
			{208 to: 214}
		evaluating: [
			receiver8 assert:
				[ | receiver7 |
				receiver7 _ #_coverageTracker29824853_
					cover: (217 to: 223)
					declaredAt: (88 to: 94)
					by: island1.
				#_coverageTracker29824853_
					coverAll:
						{225 to: 234}
					evaluating: [
						receiver7 hasCrewAt:
							(#_coverageTracker29824853_
								cover: (236 to: 247)
								declaredAt: (33 to: 44)
								by: nextPosition) ]
					thatSends: #hasCrewAt:
					to: receiver7 ] value ]
		thatSends: #assert:
		to: receiver8 ] value.! !
!Behavior method!
test07TrackMustHaveSectors
	#_coverageTracker29824877_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29824877_
		coverAll:
			{30 to: 33}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824877_
		coverAll:
			{37 to: 43. 74 to: 79. 89 to: 104}
		evaluating: [
			receiver3
				should: [
					[ | receiver1 |
					receiver1 _ #_coverageTracker29824877_
						coverAll:
							{47 to: 51}
						by: Track.
					#_coverageTracker29824877_
						coverAll:
							{53 to: 64}
						evaluating: [
							receiver1 withSectors:
								(#_coverageTracker29824877_
									coverAll:
										{66 to: 68}
									byLiteralOrPseudoVariable: #()) ]
						thatSends: #withSectors:
						to: receiver1 ] value ]
				raise:
					(#_coverageTracker29824877_
						coverAll:
							{81 to: 85}
						by: Error)
				withMessageText:
					[ | receiver2 |
					receiver2 _ #_coverageTracker29824877_
						coverAll:
							{106 to: 110}
						by: Track.
					#_coverageTracker29824877_
						coverAll:
							{112 to: 142}
						evaluating: [ receiver2 mustHaveSectorsErrorDescription ]
						thatSends: #mustHaveSectorsErrorDescription
						to: receiver2 ] value ]
		thatSends: #should:raise:withMessageText:
		to: receiver3 ] value.! !
!Behavior method!
sinMecha
	#_coverageTracker29824885_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29824885_
		cover: (13 to: 23)
		declaredAt: (13 to: 23)
		by: mechaPuesta.
	#_coverageTracker29824885_
		coverAll:
			{25 to: 33}
		evaluating: [ receiver1 estaVacia ]
		thatSends: #estaVacia
		to: receiver1 ] value.! !
!Behavior method!
assertValidPosition: aPosition
	#_coverageTracker29824900_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824900_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: length.
	#_coverageTracker29824900_
		coverAll:
			{41 to: 41}
		evaluating: [
			receiver1 <
				(#_coverageTracker29824900_
					cover: (43 to: 51)
					declaredAt: (22 to: 30)
					by: aPosition) ]
		thatSends: #<
		to: receiver1 ] value.
	#_coverageTracker29824900_
		coverAll:
			{53 to: 59}
		evaluating: [
			receiver5 ifTrue: [
				[ | receiver4 |
				receiver4 _ #_coverageTracker29824900_
					coverAll:
						{63 to: 66}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29824900_
					coverAll:
						{68 to: 73}
					evaluating: [
						receiver4 error:
							[ | receiver3 |
							receiver3 _ [ | receiver2 |
							receiver2 _ #_coverageTracker29824900_
								coverAll:
									{75 to: 78}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29824900_
								coverAll:
									{80 to: 84}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value.
							#_coverageTracker29824900_
								coverAll:
									{86 to: 116}
								evaluating: [ receiver3 cannotPlacedCarErrorDescription ]
								thatSends: #cannotPlacedCarErrorDescription
								to: receiver3 ] value ]
					thatSends: #error:
					to: receiver4 ] value ]]
		thatSends: #ifTrue:
		to: receiver5 ] value.! !
!Behavior method!
aCaptainIWasMeantToBe
	#_coverageTracker29824906_ markAsExecuted.
	#_coverageTracker29824906_
		cover: (25 to: 28)
		declaredAt: (25 to: 28)
		by:
			(rank _ #_coverageTracker29824906_
				coverAll:
					{33 to: 40}
				byLiteralOrPseudoVariable: #Captain).! !
!Behavior method!
buryTreasureAt: aPosition
	| terrain |
	#_coverageTracker29824918_ markAsExecuted.
	#_coverageTracker29824918_
		cover: (44 to: 50)
		declaredAt: (31 to: 37)
		by:
			(terrain _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824918_
				cover: (55 to: 60)
				declaredAt: (55 to: 60)
				by: island.
			#_coverageTracker29824918_
				coverAll:
					{62 to: 71}
				evaluating: [
					receiver1 terrainAt:
						(#_coverageTracker29824918_
							cover: (73 to: 81)
							declaredAt: (17 to: 25)
							by: aPosition) ]
				thatSends: #terrainAt:
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker29824918_
		cover: (87 to: 93)
		declaredAt: (87 to: 93)
		by: pirates.
	#_coverageTracker29824918_
		coverAll:
			{95 to: 97}
		evaluating: [
			receiver3 do: [ :pirate |
				[ | receiver2 |
				receiver2 _ #_coverageTracker29824918_
					cover: (111 to: 116)
					declaredAt: (102 to: 107)
					by: pirate.
				#_coverageTracker29824918_
					coverAll:
						{118 to: 132. 144 to: 146. 156 to: 158}
					evaluating: [
						receiver2
							buryTreasureTo:
								(#_coverageTracker29824918_
									cover: (134 to: 142)
									declaredAt: (17 to: 25)
									by: aPosition)
							in:
								(#_coverageTracker29824918_
									cover: (148 to: 154)
									declaredAt: (31 to: 37)
									by: terrain)
							at:
								(#_coverageTracker29824918_
									cover: (160 to: 165)
									declaredAt: (55 to: 60)
									by: island) ]
					thatSends: #buryTreasureTo:in:at:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
setUp
	#_coverageTracker29824937_ markAsExecuted.
	#_coverageTracker29824937_
		cover: (10 to: 22)
		declaredAt: (10 to: 22)
		by:
			(crewPosition1 _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824937_
				coverAll:
					{27 to: 27}
				byLiteralOrPseudoVariable: 1.
			#_coverageTracker29824937_
				coverAll:
					{28 to: 28}
				evaluating: [
					receiver1 @
						(#_coverageTracker29824937_
							coverAll:
								{29 to: 29}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #@
				to: receiver1 ] value).
	#_coverageTracker29824937_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by:
			(treePosition1 _ [ | receiver2 |
			receiver2 _ #_coverageTracker29824937_
				coverAll:
					{50 to: 50}
				byLiteralOrPseudoVariable: 1.
			#_coverageTracker29824937_
				coverAll:
					{51 to: 51}
				evaluating: [
					receiver2 @
						(#_coverageTracker29824937_
							coverAll:
								{52 to: 52}
							byLiteralOrPseudoVariable: 2) ]
				thatSends: #@
				to: receiver2 ] value).
	#_coverageTracker29824937_
		cover: (58 to: 64)
		declaredAt: (58 to: 64)
		by:
			(island1 _ [ | receiver7 |
			receiver7 _ #_coverageTracker29824937_
				coverAll:
					{69 to: 74}
				by: Island.
			#_coverageTracker29824937_
				coverAll:
					{78 to: 83. 91 to: 98. 142 to: 148}
				evaluating: [
					receiver7
						sized:
							[ | receiver3 |
							receiver3 _ #_coverageTracker29824937_
								coverAll:
									{85 to: 85}
								byLiteralOrPseudoVariable: 3.
							#_coverageTracker29824937_
								coverAll:
									{86 to: 86}
								evaluating: [
									receiver3 @
										(#_coverageTracker29824937_
											coverAll:
												{87 to: 87}
											byLiteralOrPseudoVariable: 3) ]
								thatSends: #@
								to: receiver3 ] value
						treesAt:
							[ | receiver4 |
							receiver4 _ #_coverageTracker29824937_
								coverAll:
									{101 to: 117}
								by: OrderedCollection.
							#_coverageTracker29824937_
								coverAll:
									{119 to: 123}
								evaluating: [
									receiver4 with:
										(#_coverageTracker29824937_
											cover: (125 to: 137)
											declaredAt: (33 to: 45)
											by: treePosition1) ]
								thatSends: #with:
								to: receiver4 ] value
						digsAt:
							[ | receiver6 |
							receiver6 _ #_coverageTracker29824937_
								coverAll:
									{151 to: 167}
								by: OrderedCollection.
							#_coverageTracker29824937_
								coverAll:
									{169 to: 173}
								evaluating: [
									receiver6 with:
										[ | receiver5 |
										receiver5 _ #_coverageTracker29824937_
											coverAll:
												{175 to: 175}
											byLiteralOrPseudoVariable: 2.
										#_coverageTracker29824937_
											coverAll:
												{176 to: 176}
											evaluating: [
												receiver5 @
													(#_coverageTracker29824937_
														coverAll:
															{177 to: 177}
														byLiteralOrPseudoVariable: 2) ]
											thatSends: #@
											to: receiver5 ] value ]
								thatSends: #with:
								to: receiver6 ] value ]
				thatSends: #sized:treesAt:digsAt:
				to: receiver7 ] value).
	#_coverageTracker29824937_
		cover: (184 to: 187)
		declaredAt: (184 to: 187)
		by:
			(map1 _ [ | receiver8 |
			receiver8 _ #_coverageTracker29824937_
				coverAll:
					{192 to: 194}
				by: Map.
			#_coverageTracker29824937_
				coverAll:
					{196 to: 198. 208 to: 220}
				evaluating: [
					receiver8
						of:
							(#_coverageTracker29824937_
								cover: (200 to: 206)
								declaredAt: (58 to: 64)
								by: island1)
						crewStartsAt:
							(#_coverageTracker29824937_
								cover: (222 to: 234)
								declaredAt: (10 to: 22)
								by: crewPosition1) ]
				thatSends: #of:crewStartsAt:
				to: receiver8 ] value).
	#_coverageTracker29824937_
		cover: (239 to: 243)
		declaredAt: (239 to: 243)
		by:
			(crew1 _ [ | receiver13 |
			receiver13 _ #_coverageTracker29824937_
				coverAll:
					{248 to: 251}
				by: Crew.
			#_coverageTracker29824937_
				coverAll:
					{257 to: 259. 273 to: 283. 377 to: 379}
				evaluating: [
					receiver13
						at:
							(#_coverageTracker29824937_
								cover: (261 to: 267)
								declaredAt: (58 to: 64)
								by: island1)
						composedBy:
							[ | receiver12 |
							receiver12 _ #_coverageTracker29824937_
								coverAll:
									{286 to: 302}
								by: OrderedCollection.
							#_coverageTracker29824937_
								coverAll:
									{304 to: 308. 332 to: 336. 354 to: 358}
								evaluating: [
									receiver12
										with:
											[ | receiver9 |
											receiver9 _ #_coverageTracker29824937_
												coverAll:
													{311 to: 318}
												by: Corsario.
											#_coverageTracker29824937_
												coverAll:
													{320 to: 324}
												evaluating: [
													receiver9 with:
														(#_coverageTracker29824937_
															cover: (326 to: 329)
															declaredAt: (184 to: 187)
															by: map1) ]
												thatSends: #with:
												to: receiver9 ] value
										with:
											[ | receiver10 |
											receiver10 _ #_coverageTracker29824937_
												coverAll:
													{338 to: 348}
												by: Filibustero.
											#_coverageTracker29824937_
												coverAll:
													{350 to: 352}
												evaluating: [ receiver10 new ]
												thatSends: #new
												to: receiver10 ] value
										with:
											[ | receiver11 |
											receiver11 _ #_coverageTracker29824937_
												coverAll:
													{360 to: 367}
												by: Bucanero.
											#_coverageTracker29824937_
												coverAll:
													{369 to: 371}
												evaluating: [ receiver11 new ]
												thatSends: #new
												to: receiver11 ] value ]
								thatSends: #with:with:with:
								to: receiver12 ] value
						at:
							(#_coverageTracker29824937_
								cover: (381 to: 393)
								declaredAt: (10 to: 22)
								by: crewPosition1) ]
				thatSends: #at:composedBy:at:
				to: receiver13 ] value).! !
!Behavior method!
next: aNext
	#_coverageTracker29824975_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29824975_
		coverAll:
			{18 to: 21}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824975_
		coverAll:
			{23 to: 25}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29824975_
		coverAll:
			{27 to: 41}
		evaluating: [
			receiver2 initializeNext:
				(#_coverageTracker29824975_
					cover: (43 to: 47)
					declaredAt: (7 to: 11)
					by: aNext) ]
		thatSends: #initializeNext:
		to: receiver2 ] value.! !
!Behavior method!
thirtyKilomentersTurboSector
	#_coverageTracker29824980_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29824980_
		coverAll:
			{34 to: 44}
		by: TurboSector.
	#_coverageTracker29824980_
		coverAll:
			{46 to: 48}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29824980_
					coverAll:
						{50 to: 51}
					byLiteralOrPseudoVariable: 30.
				#_coverageTracker29824980_
					coverAll:
						{53 to: 53}
					evaluating: [
						receiver1 *
							(#_coverageTracker29824980_
								coverAll:
									{55 to: 63}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar
	| schumacher hamilton sector |
	#_coverageTracker29824988_ markAsExecuted.
	#_coverageTracker29824988_
		cover: (98 to: 103)
		declaredAt: (86 to: 91)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29824988_
				coverAll:
					{107 to: 110}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29824988_
				coverAll:
					{112 to: 142}
				evaluating: [ receiver1 twentyFourKilometersTurboSector ]
				thatSends: #twentyFourKilometersTurboSector
				to: receiver1 ] value).
	#_coverageTracker29824988_
		cover: (148 to: 157)
		declaredAt: (66 to: 75)
		by:
			(schumacher _ [ | receiver2 |
			receiver2 _ #_coverageTracker29824988_
				coverAll:
					{161 to: 164}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29824988_
				coverAll:
					{166 to: 178}
				evaluating: [ receiver2 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver2 ] value).
	#_coverageTracker29824988_
		cover: (182 to: 189)
		declaredAt: (77 to: 84)
		by:
			(hamilton _ [ | receiver3 |
			receiver3 _ #_coverageTracker29824988_
				coverAll:
					{193 to: 196}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29824988_
				coverAll:
					{198 to: 208}
				evaluating: [ receiver3 hamiltonCar ]
				thatSends: #hamiltonCar
				to: receiver3 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29824988_
		cover: (214 to: 223)
		declaredAt: (66 to: 75)
		by: schumacher.
	#_coverageTracker29824988_
		coverAll:
			{225 to: 230}
		evaluating: [
			receiver6 speed:
				[ | receiver5 |
				receiver5 _ [ | receiver4 |
				receiver4 _ #_coverageTracker29824988_
					coverAll:
						{232 to: 234}
					byLiteralOrPseudoVariable: 300.
				#_coverageTracker29824988_
					coverAll:
						{236 to: 236}
					evaluating: [
						receiver4 *
							(#_coverageTracker29824988_
								coverAll:
									{238 to: 246}
								by: kilometer) ]
					thatSends: #*
					to: receiver4 ] value.
				#_coverageTracker29824988_
					coverAll:
						{248 to: 248}
					evaluating: [
						receiver5 /
							(#_coverageTracker29824988_
								coverAll:
									{250 to: 253}
								by: hour) ]
					thatSends: #/
					to: receiver5 ] value ]
		thatSends: #speed:
		to: receiver6 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker29824988_
		cover: (257 to: 264)
		declaredAt: (77 to: 84)
		by: hamilton.
	#_coverageTracker29824988_
		coverAll:
			{266 to: 271}
		evaluating: [
			receiver9 speed:
				[ | receiver8 |
				receiver8 _ [ | receiver7 |
				receiver7 _ #_coverageTracker29824988_
					coverAll:
						{273 to: 275}
					byLiteralOrPseudoVariable: 300.
				#_coverageTracker29824988_
					coverAll:
						{277 to: 277}
					evaluating: [
						receiver7 *
							(#_coverageTracker29824988_
								coverAll:
									{279 to: 287}
								by: kilometer) ]
					thatSends: #*
					to: receiver7 ] value.
				#_coverageTracker29824988_
					coverAll:
						{289 to: 289}
					evaluating: [
						receiver8 /
							(#_coverageTracker29824988_
								coverAll:
									{291 to: 294}
								by: hour) ]
					thatSends: #/
					to: receiver8 ] value ]
		thatSends: #speed:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29824988_
		cover: (300 to: 305)
		declaredAt: (86 to: 91)
		by: sector.
	#_coverageTracker29824988_
		coverAll:
			{307 to: 310. 323 to: 325}
		evaluating: [
			receiver11
				put:
					(#_coverageTracker29824988_
						cover: (312 to: 321)
						declaredAt: (66 to: 75)
						by: schumacher)
				at:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29824988_
						coverAll:
							{327 to: 331}
						byLiteralOrPseudoVariable: 12.95.
					#_coverageTracker29824988_
						coverAll:
							{333 to: 333}
						evaluating: [
							receiver10 *
								(#_coverageTracker29824988_
									coverAll:
										{335 to: 343}
									by: kilometer) ]
						thatSends: #*
						to: receiver10 ] value ]
		thatSends: #put:at:
		to: receiver11 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29824988_
		cover: (347 to: 352)
		declaredAt: (86 to: 91)
		by: sector.
	#_coverageTracker29824988_
		coverAll:
			{354 to: 357. 368 to: 370}
		evaluating: [
			receiver13
				put:
					(#_coverageTracker29824988_
						cover: (359 to: 366)
						declaredAt: (77 to: 84)
						by: hamilton)
				at:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29824988_
						coverAll:
							{372 to: 373}
						byLiteralOrPseudoVariable: 13.
					#_coverageTracker29824988_
						coverAll:
							{375 to: 375}
						evaluating: [
							receiver12 *
								(#_coverageTracker29824988_
									coverAll:
										{377 to: 385}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value ]
		thatSends: #put:at:
		to: receiver13 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker29824988_
		cover: (391 to: 400)
		declaredAt: (66 to: 75)
		by: schumacher.
	#_coverageTracker29824988_
		coverAll:
			{402 to: 414}
		evaluating: [ receiver14 activateTurbo ]
		thatSends: #activateTurbo
		to: receiver14 ] value.
	[ | receiver16 |
	receiver16 _ #_coverageTracker29824988_
		coverAll:
			{420 to: 423}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29824988_
		coverAll:
			{425 to: 431}
		evaluating: [
			receiver16 assert:
				[ | receiver15 |
				receiver15 _ #_coverageTracker29824988_
					cover: (433 to: 442)
					declaredAt: (66 to: 75)
					by: schumacher.
				#_coverageTracker29824988_
					coverAll:
						{444 to: 459}
					evaluating: [ receiver15 isTurboActivated ]
					thatSends: #isTurboActivated
					to: receiver15 ] value ]
		thatSends: #assert:
		to: receiver16 ] value.! !
!Behavior method!
canMoveBucanero: aBucanero to: aPosition at: island
	#_coverageTracker29825036_ markAsExecuted.
	^ #_coverageTracker29825036_
		coverAll:
			{59 to: 62}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
searchTreasureFor: aPirate at: anIsland with: aMap
	#_coverageTracker29825039_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29825039_
		coverAll:
			{56 to: 59}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825039_
		coverAll:
			{61 to: 66}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker29825039_
					coverAll:
						{68 to: 71}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825039_
					coverAll:
						{73 to: 77}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker29825039_
					coverAll:
						{79 to: 106}
					evaluating: [ receiver2 simplePirateErrorDescription ]
					thatSends: #simplePirateErrorDescription
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
length
	#_coverageTracker29825042_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker29825042_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: sectors.
	#_coverageTracker29825042_
		coverAll:
			{19 to: 22. 52 to: 59}
		evaluating: [
			receiver3
				sum: [ :sector |
					[ | receiver1 |
					receiver1 _ #_coverageTracker29825042_
						cover: (36 to: 41)
						declaredAt: (27 to: 32)
						by: sector.
					#_coverageTracker29825042_
						coverAll:
							{43 to: 48}
						evaluating: [ receiver1 length ]
						thatSends: #length
						to: receiver1 ] value ]
				ifEmpty: [
					[ | receiver2 |
					receiver2 _ #_coverageTracker29825042_
						coverAll:
							{63 to: 63}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker29825042_
						coverAll:
							{65 to: 65}
						evaluating: [
							receiver2 *
								(#_coverageTracker29825042_
									coverAll:
										{67 to: 75}
									by: kilometer) ]
						thatSends: #*
						to: receiver2 ] value ]]
		thatSends: #sum:ifEmpty:
		to: receiver3 ] value.! !
!Behavior method!
speedingRatio
	#_coverageTracker29825052_ markAsExecuted.
	^ #_coverageTracker29825052_
		coverAll:
			{17 to: 18}
		byLiteralOrPseudoVariable: 1.! !
!Behavior method!
sized: size treesAt: treesPositions digsAt: digsPositions
	#_coverageTracker29825055_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825055_
		coverAll:
			{63 to: 66}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825055_
		coverAll:
			{68 to: 70}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29825055_
		coverAll:
			{72 to: 87. 94 to: 101. 118 to: 124}
		evaluating: [
			receiver2
				initializeSized:
					(#_coverageTracker29825055_
						cover: (89 to: 92)
						declaredAt: (8 to: 11)
						by: size)
				treesAt:
					(#_coverageTracker29825055_
						cover: (103 to: 116)
						declaredAt: (22 to: 35)
						by: treesPositions)
				digsAt:
					(#_coverageTracker29825055_
						cover: (126 to: 138)
						declaredAt: (45 to: 57)
						by: digsPositions) ]
		thatSends: #initializeSized:treesAt:digsAt:
		to: receiver2 ] value.! !
!Behavior method!
buryTreasureTo: aPosition in: terrain at: island
	#_coverageTracker29825062_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825062_
		cover: (54 to: 60)
		declaredAt: (31 to: 37)
		by: terrain.
	#_coverageTracker29825062_
		coverAll:
			{62 to: 70. 77 to: 91. 103 to: 105}
		evaluating: [
			receiver1
				corsario:
					(#_coverageTracker29825062_
						coverAll:
							{72 to: 75}
						byLiteralOrPseudoVariable: self)
				buryTreasureAt:
					(#_coverageTracker29825062_
						cover: (93 to: 101)
						declaredAt: (17 to: 25)
						by: aPosition)
				at:
					(#_coverageTracker29825062_
						cover: (107 to: 112)
						declaredAt: (43 to: 48)
						by: island) ]
		thatSends: #corsario:buryTreasureAt:at:
		to: receiver1 ] value.! !
!Behavior method!
scan
	#_coverageTracker29825077_ markAsExecuted.
	^ #_coverageTracker29825077_
		cover: (15 to: 19)
		declaredAt: (15 to: 19)
		by: valor.! !
!Behavior method!
initializeNext: aNext
	#_coverageTracker29825079_ markAsExecuted.
	#_coverageTracker29825079_
		cover: (27 to: 30)
		declaredAt: (27 to: 30)
		by:
			(next _ #_coverageTracker29825079_
				cover: (35 to: 39)
				declaredAt: (17 to: 21)
				by: aNext).! !
!Behavior method!
twoSectors
	#_coverageTracker29825081_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker29825081_
		coverAll:
			{16 to: 32}
		by: OrderedCollection.
	#_coverageTracker29825081_
		coverAll:
			{37 to: 41. 77 to: 81}
		evaluating: [
			receiver3
				with:
					[ | receiver1 |
					receiver1 _ #_coverageTracker29825081_
						coverAll:
							{44 to: 47}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825081_
						coverAll:
							{49 to: 72}
						evaluating: [ receiver1 tenKilometersTurboSector ]
						thatSends: #tenKilometersTurboSector
						to: receiver1 ] value
				with:
					[ | receiver2 |
					receiver2 _ #_coverageTracker29825081_
						coverAll:
							{84 to: 87}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825081_
						coverAll:
							{89 to: 117}
						evaluating: [ receiver2 twentyKilometersNoTurboSector ]
						thatSends: #twentyKilometersNoTurboSector
						to: receiver2 ] value ]
		thatSends: #with:with:
		to: receiver3 ] value.! !
!Behavior method!
activeOn: aFormulaOneCar
	#_coverageTracker29825092_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825092_
		cover: (31 to: 44)
		declaredAt: (11 to: 24)
		by: aFormulaOneCar.
	#_coverageTracker29825092_
		coverAll:
			{46 to: 71}
		evaluating: [ receiver1 activeTurboWhenDeactivated ]
		thatSends: #activeTurboWhenDeactivated
		to: receiver1 ] value.! !
!Behavior method!
oneSectorTrack
	#_coverageTracker29825095_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker29825095_
		coverAll:
			{20 to: 24}
		by: Track.
	#_coverageTracker29825095_
		coverAll:
			{26 to: 37}
		evaluating: [
			receiver3 withSectors:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29825095_
					coverAll:
						{40 to: 56}
					by: OrderedCollection.
				#_coverageTracker29825095_
					coverAll:
						{58 to: 62}
					evaluating: [
						receiver2 with:
							[ | receiver1 |
							receiver1 _ #_coverageTracker29825095_
								coverAll:
									{65 to: 68}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29825095_
								coverAll:
									{70 to: 93}
								evaluating: [ receiver1 tenKilometersTurboSector ]
								thatSends: #tenKilometersTurboSector
								to: receiver1 ] value ]
					thatSends: #with:
					to: receiver2 ] value ]
		thatSends: #withSectors:
		to: receiver3 ] value.! !
!Behavior method!
test01SectorLengthMustBePositive
	#_coverageTracker29825101_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29825101_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825101_
		coverAll:
			{44 to: 50. 89 to: 94. 104 to: 119}
		evaluating: [
			receiver4
				should: [
					[ | receiver2 |
					receiver2 _ #_coverageTracker29825101_
						coverAll:
							{55 to: 65}
						by: TurboSector.
					#_coverageTracker29825101_
						coverAll:
							{67 to: 69}
						evaluating: [
							receiver2 of:
								[ | receiver1 |
								receiver1 _ #_coverageTracker29825101_
									coverAll:
										{71 to: 71}
									byLiteralOrPseudoVariable: 0.
								#_coverageTracker29825101_
									coverAll:
										{73 to: 73}
									evaluating: [
										receiver1 *
											(#_coverageTracker29825101_
												coverAll:
													{75 to: 83}
												by: kilometer) ]
									thatSends: #*
									to: receiver1 ] value ]
						thatSends: #of:
						to: receiver2 ] value ]
				raise:
					(#_coverageTracker29825101_
						coverAll:
							{96 to: 100}
						by: Error)
				withMessageText:
					[ | receiver3 |
					receiver3 _ #_coverageTracker29825101_
						coverAll:
							{121 to: 126}
						by: Sector.
					#_coverageTracker29825101_
						coverAll:
							{128 to: 163}
						evaluating: [ receiver3 lengthMustBePositiveErrorDescription ]
						thatSends: #lengthMustBePositiveErrorDescription
						to: receiver3 ] value ]
		thatSends: #should:raise:withMessageText:
		to: receiver4 ] value.! !
!Behavior method!
estaRota
	#_coverageTracker29825118_ markAsExecuted.
	^ #_coverageTracker29825118_
		coverAll:
			{14 to: 18}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
tenKilomentersNoTurboSector
	#_coverageTracker29825120_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825120_
		coverAll:
			{33 to: 45}
		by: NoTurboSector.
	#_coverageTracker29825120_
		coverAll:
			{47 to: 49}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825120_
					coverAll:
						{51 to: 52}
					byLiteralOrPseudoVariable: 10.
				#_coverageTracker29825120_
					coverAll:
						{53 to: 53}
					evaluating: [
						receiver1 *
							(#_coverageTracker29825120_
								coverAll:
									{54 to: 62}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
step: ix
	#_coverageTracker29825123_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825123_
		cover: (14 to: 18)
		declaredAt: (14 to: 18)
		by: steps.
	#_coverageTracker29825123_
		coverAll:
			{20 to: 22}
		evaluating: [
			receiver1 at:
				(#_coverageTracker29825123_
					cover: (24 to: 25)
					declaredAt: (7 to: 8)
					by: ix) ]
		thatSends: #at:
		to: receiver1 ] value.! !
!Behavior method!
with: aMap
	#_coverageTracker29825135_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825135_
		coverAll:
			{16 to: 19}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825135_
		coverAll:
			{21 to: 23}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29825135_
		coverAll:
			{25 to: 39}
		evaluating: [
			receiver2 initializeWith:
				(#_coverageTracker29825135_
					cover: (41 to: 44)
					declaredAt: (7 to: 10)
					by: aMap) ]
		thatSends: #initializeWith:
		to: receiver2 ] value.! !
!Behavior method!
canMoveCorsario: aCorsario to: aPosition at: island
	#_coverageTracker29825140_ markAsExecuted.
	^ #_coverageTracker29825140_
		coverAll:
			{58 to: 62}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
twentyFourKilometersTurboSector
	#_coverageTracker29825143_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825143_
		coverAll:
			{37 to: 47}
		by: TurboSector.
	#_coverageTracker29825143_
		coverAll:
			{49 to: 51}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825143_
					coverAll:
						{53 to: 54}
					byLiteralOrPseudoVariable: 24.
				#_coverageTracker29825143_
					coverAll:
						{56 to: 56}
					evaluating: [
						receiver1 *
							(#_coverageTracker29825143_
								coverAll:
									{58 to: 66}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
activateTurboTo: aCarToActivateTurboTo
	#_coverageTracker29825157_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29825157_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825157_
		coverAll:
			{47 to: 52}
		evaluating: [
			receiver2 error:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825157_
					coverAll:
						{54 to: 59}
					by: Sector.
				#_coverageTracker29825157_
					coverAll:
						{61 to: 91}
					evaluating: [ receiver1 turboNotAllowedErrorDescription ]
					thatSends: #turboNotAllowedErrorDescription
					to: receiver1 ] value ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
contarCapas: tipoDeCapa
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	| capaQueQueremos |
	#_coverageTracker29825165_ markAsExecuted.
	#_coverageTracker29825165_
		cover: (224 to: 238)
		declaredAt: (198 to: 212)
		by:
			(capaQueQueremos _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825165_
				cover: (243 to: 252)
				declaredAt: (14 to: 23)
				by: tipoDeCapa.
			#_coverageTracker29825165_
				coverAll:
					{254 to: 257}
				evaluating: [ receiver1 scan ]
				thatSends: #scan
				to: receiver1 ] value).
	^ [ | receiver6 |
	receiver6 _ #_coverageTracker29825165_
		cover: (264 to: 281)
		declaredAt: (264 to: 281)
		by: capasDeSueloDebajo.
	#_coverageTracker29825165_
		coverAll:
			{283 to: 289. 293 to: 297}
		evaluating: [
			receiver6
				inject:
					(#_coverageTracker29825165_
						coverAll:
							{291 to: 291}
						byLiteralOrPseudoVariable: 0)
				into: [ :cantidadDeCapas :capa |
					[ | receiver5 |
					receiver5 _ [ | receiver3 |
					receiver3 _ #_coverageTracker29825165_
						cover: (326 to: 340)
						declaredAt: (198 to: 212)
						by: capaQueQueremos.
					#_coverageTracker29825165_
						coverAll:
							{342 to: 342}
						evaluating: [
							receiver3 =
								[ | receiver2 |
								receiver2 _ #_coverageTracker29825165_
									cover: (344 to: 347)
									declaredAt: (318 to: 321)
									by: capa.
								#_coverageTracker29825165_
									coverAll:
										{349 to: 352}
									evaluating: [ receiver2 scan ]
									thatSends: #scan
									to: receiver2 ] value ]
						thatSends: #=
						to: receiver3 ] value.
					#_coverageTracker29825165_
						coverAll:
							{372 to: 378. 419 to: 426}
						evaluating: [
							receiver5
								ifTrue: [
									[ | receiver4 |
									receiver4 _ #_coverageTracker29825165_
										cover: (381 to: 395)
										declaredAt: (301 to: 315)
										by: cantidadDeCapas.
									#_coverageTracker29825165_
										coverAll:
											{397 to: 397}
										evaluating: [
											receiver4 +
												(#_coverageTracker29825165_
													coverAll:
														{399 to: 399}
													byLiteralOrPseudoVariable: 1) ]
										thatSends: #+
										to: receiver4 ] value ]
								ifFalse: [
									#_coverageTracker29825165_
										cover: (428 to: 442)
										declaredAt: (301 to: 315)
										by: cantidadDeCapas ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver5 ] value ]]
		thatSends: #inject:into:
		to: receiver6 ] value.! !
!Behavior method!
test08SimplePirateCannotUseMap
	| pirate |
	#_coverageTracker29825181_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29825181_
		cover: (48 to: 52)
		declaredAt: (48 to: 52)
		by: crew1.
	#_coverageTracker29825181_
		coverAll:
			{54 to: 60}
		evaluating: [
			receiver2 moveTo:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825181_
					coverAll:
						{62 to: 62}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29825181_
					coverAll:
						{63 to: 63}
					evaluating: [
						receiver1 @
							(#_coverageTracker29825181_
								coverAll:
									{64 to: 64}
								byLiteralOrPseudoVariable: 1) ]
					thatSends: #@
					to: receiver1 ] value ]
		thatSends: #moveTo:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29825181_
		cover: (68 to: 72)
		declaredAt: (48 to: 52)
		by: crew1.
	#_coverageTracker29825181_
		coverAll:
			{74 to: 88}
		evaluating: [
			receiver4 buryTreasureAt:
				[ | receiver3 |
				receiver3 _ #_coverageTracker29825181_
					coverAll:
						{90 to: 90}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29825181_
					coverAll:
						{91 to: 91}
					evaluating: [
						receiver3 @
							(#_coverageTracker29825181_
								coverAll:
									{92 to: 92}
								byLiteralOrPseudoVariable: 2) ]
					thatSends: #@
					to: receiver3 ] value ]
		thatSends: #buryTreasureAt:
		to: receiver4 ] value.
	#_coverageTracker29825181_
		cover: (97 to: 102)
		declaredAt: (36 to: 41)
		by:
			(pirate _ [ | receiver5 |
			receiver5 _ #_coverageTracker29825181_
				coverAll:
					{107 to: 114}
				by: Bucanero.
			#_coverageTracker29825181_
				coverAll:
					{116 to: 118}
				evaluating: [ receiver5 new ]
				thatSends: #new
				to: receiver5 ] value).
	[ | receiver9 |
	receiver9 _ #_coverageTracker29825181_
		coverAll:
			{124 to: 127}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825181_
		coverAll:
			{132 to: 138. 191 to: 196. 230 to: 245}
		evaluating: [
			receiver9
				should: [
					[ | receiver6 |
					receiver6 _ #_coverageTracker29825181_
						cover: (142 to: 147)
						declaredAt: (36 to: 41)
						by: pirate.
					#_coverageTracker29825181_
						coverAll:
							{149 to: 165. 175 to: 179}
						evaluating: [
							receiver6
								searchTreasureIn:
									(#_coverageTracker29825181_
										cover: (167 to: 173)
										declaredAt: (167 to: 173)
										by: island1)
								with:
									(#_coverageTracker29825181_
										cover: (181 to: 184)
										declaredAt: (181 to: 184)
										by: map1) ]
						thatSends: #searchTreasureIn:with:
						to: receiver6 ] value ]
				raise:
					[ | receiver7 |
					receiver7 _ #_coverageTracker29825181_
						coverAll:
							{198 to: 202}
						by: Error.
					#_coverageTracker29825181_
						coverAll:
							{204 to: 204}
						evaluating: [
							receiver7 -
								(#_coverageTracker29825181_
									coverAll:
										{206 to: 225}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver7 ] value
				withMessageText:
					[ | receiver8 |
					receiver8 _ #_coverageTracker29825181_
						coverAll:
							{247 to: 258}
						by: SimplePirate.
					#_coverageTracker29825181_
						coverAll:
							{260 to: 287}
						evaluating: [ receiver8 simplePirateErrorDescription ]
						thatSends: #simplePirateErrorDescription
						to: receiver8 ] value ]
		thatSends: #should:raise:withMessageText:
		to: receiver9 ] value.! !
!Behavior method!
advance: aTimeLapse
	#_coverageTracker29825218_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825218_
		cover: (24 to: 28)
		declaredAt: (24 to: 28)
		by: track.
	#_coverageTracker29825218_
		coverAll:
			{30 to: 33}
		evaluating: [ receiver1 cars ]
		thatSends: #cars
		to: receiver1 ] value.
	#_coverageTracker29825218_
		coverAll:
			{35 to: 37}
		evaluating: [
			receiver3 do: [ :car |
				[ | receiver2 |
				receiver2 _ #_coverageTracker29825218_
					coverAll:
						{47 to: 50}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825218_
					coverAll:
						{52 to: 60. 66 to: 71}
					evaluating: [
						receiver2
							relocate:
								(#_coverageTracker29825218_
									cover: (62 to: 64)
									declaredAt: (42 to: 44)
									by: car)
							after:
								(#_coverageTracker29825218_
									cover: (73 to: 82)
									declaredAt: (10 to: 19)
									by: aTimeLapse) ]
					thatSends: #relocate:after:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
aCaptainIWasMeantToBe
	#_coverageTracker29825225_ markAsExecuted.
	#_coverageTracker29825225_
		cover: (25 to: 28)
		declaredAt: (25 to: 28)
		by:
			(rank _ #_coverageTracker29825225_
				coverAll:
					{33 to: 40}
				byLiteralOrPseudoVariable: #Captain).! !
!Behavior method!
advance: aDistance
	#_coverageTracker29825239_ markAsExecuted.
	#_coverageTracker29825239_
		cover: (41 to: 56)
		declaredAt: (22 to: 37)
		by:
			(traveledDistance _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825239_
				cover: (22 to: 37)
				declaredAt: (22 to: 37)
				by: traveledDistance.
			#_coverageTracker29825239_
				coverAll:
					{58 to: 58}
				evaluating: [
					receiver1 +
						(#_coverageTracker29825239_
							cover: (60 to: 68)
							declaredAt: (10 to: 18)
							by: aDistance) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
test10TrackShouldPlaceCarInKilometerWithinSector
	| sectors track car positionInTrack positionInSector2 |
	#_coverageTracker29825248_ markAsExecuted.
	#_coverageTracker29825248_
		cover: (111 to: 117)
		declaredAt: (54 to: 60)
		by:
			(sectors _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825248_
				coverAll:
					{121 to: 124}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825248_
				coverAll:
					{126 to: 135}
				evaluating: [ receiver1 twoSectors ]
				thatSends: #twoSectors
				to: receiver1 ] value).
	#_coverageTracker29825248_
		cover: (142 to: 158)
		declaredAt: (88 to: 104)
		by:
			(positionInSector2 _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825248_
				coverAll:
					{162 to: 162}
				byLiteralOrPseudoVariable: 5.
			#_coverageTracker29825248_
				coverAll:
					{164 to: 164}
				evaluating: [
					receiver2 *
						(#_coverageTracker29825248_
							coverAll:
								{166 to: 174}
							by: kilometer) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker29825248_
		cover: (178 to: 192)
		declaredAt: (72 to: 86)
		by:
			(positionInTrack _ [ | receiver5 |
			receiver5 _ [ | receiver4 |
			receiver4 _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825248_
				cover: (196 to: 202)
				declaredAt: (54 to: 60)
				by: sectors.
			#_coverageTracker29825248_
				coverAll:
					{204 to: 208}
				evaluating: [ receiver3 first ]
				thatSends: #first
				to: receiver3 ] value.
			#_coverageTracker29825248_
				coverAll:
					{210 to: 215}
				evaluating: [ receiver4 length ]
				thatSends: #length
				to: receiver4 ] value.
			#_coverageTracker29825248_
				coverAll:
					{217 to: 217}
				evaluating: [
					receiver5 +
						(#_coverageTracker29825248_
							cover: (219 to: 235)
							declaredAt: (88 to: 104)
							by: positionInSector2) ]
				thatSends: #+
				to: receiver5 ] value).
	#_coverageTracker29825248_
		cover: (241 to: 245)
		declaredAt: (62 to: 66)
		by:
			(track _ [ | receiver6 |
			receiver6 _ #_coverageTracker29825248_
				coverAll:
					{249 to: 253}
				by: Track.
			#_coverageTracker29825248_
				coverAll:
					{255 to: 266}
				evaluating: [
					receiver6 withSectors:
						(#_coverageTracker29825248_
							cover: (268 to: 274)
							declaredAt: (54 to: 60)
							by: sectors) ]
				thatSends: #withSectors:
				to: receiver6 ] value).
	#_coverageTracker29825248_
		cover: (278 to: 280)
		declaredAt: (68 to: 70)
		by:
			(car _ [ | receiver7 |
			receiver7 _ #_coverageTracker29825248_
				coverAll:
					{284 to: 287}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825248_
				coverAll:
					{289 to: 301}
				evaluating: [ receiver7 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver7 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker29825248_
		cover: (306 to: 310)
		declaredAt: (62 to: 66)
		by: track.
	#_coverageTracker29825248_
		coverAll:
			{312 to: 315. 321 to: 323}
		evaluating: [
			receiver8
				put:
					(#_coverageTracker29825248_
						cover: (317 to: 319)
						declaredAt: (68 to: 70)
						by: car)
				at:
					(#_coverageTracker29825248_
						cover: (325 to: 339)
						declaredAt: (72 to: 86)
						by: positionInTrack) ]
		thatSends: #put:at:
		to: receiver8 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29825248_
		coverAll:
			{345 to: 348}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825248_
		coverAll:
			{350 to: 356. 373 to: 379}
		evaluating: [
			receiver11
				assert:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29825248_
						cover: (358 to: 364)
						declaredAt: (54 to: 60)
						by: sectors.
					#_coverageTracker29825248_
						coverAll:
							{366 to: 371}
						evaluating: [ receiver9 second ]
						thatSends: #second
						to: receiver9 ] value
				equals:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29825248_
						cover: (382 to: 386)
						declaredAt: (62 to: 66)
						by: track.
					#_coverageTracker29825248_
						coverAll:
							{388 to: 396}
						evaluating: [
							receiver10 sectorOf:
								(#_coverageTracker29825248_
									cover: (398 to: 400)
									declaredAt: (68 to: 70)
									by: car) ]
						thatSends: #sectorOf:
						to: receiver10 ] value ]
		thatSends: #assert:equals:
		to: receiver11 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29825248_
		coverAll:
			{405 to: 408}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825248_
		coverAll:
			{410 to: 416. 434 to: 440}
		evaluating: [
			receiver13
				assert:
					(#_coverageTracker29825248_
						cover: (418 to: 432)
						declaredAt: (72 to: 86)
						by: positionInTrack)
				equals:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29825248_
						cover: (443 to: 447)
						declaredAt: (62 to: 66)
						by: track.
					#_coverageTracker29825248_
						coverAll:
							{449 to: 459}
						evaluating: [
							receiver12 positionOf:
								(#_coverageTracker29825248_
									cover: (461 to: 463)
									declaredAt: (68 to: 70)
									by: car) ]
						thatSends: #positionOf:
						to: receiver12 ] value ]
		thatSends: #assert:equals:
		to: receiver13 ] value.
	[ | receiver16 |
	receiver16 _ #_coverageTracker29825248_
		coverAll:
			{470 to: 473}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825248_
		coverAll:
			{475 to: 479}
		evaluating: [
			receiver16 deny:
				[ | receiver15 |
				receiver15 _ [ | receiver14 |
				receiver14 _ #_coverageTracker29825248_
					cover: (482 to: 488)
					declaredAt: (54 to: 60)
					by: sectors.
				#_coverageTracker29825248_
					coverAll:
						{490 to: 494}
					evaluating: [ receiver14 first ]
					thatSends: #first
					to: receiver14 ] value.
				#_coverageTracker29825248_
					coverAll:
						{496 to: 504}
					evaluating: [
						receiver15 includes:
							(#_coverageTracker29825248_
								cover: (506 to: 508)
								declaredAt: (68 to: 70)
								by: car) ]
					thatSends: #includes:
					to: receiver15 ] value ]
		thatSends: #deny:
		to: receiver16 ] value.
	[ | receiver19 |
	receiver19 _ #_coverageTracker29825248_
		coverAll:
			{513 to: 516}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825248_
		coverAll:
			{518 to: 524}
		evaluating: [
			receiver19 assert:
				[ | receiver18 |
				receiver18 _ [ | receiver17 |
				receiver17 _ #_coverageTracker29825248_
					cover: (527 to: 533)
					declaredAt: (54 to: 60)
					by: sectors.
				#_coverageTracker29825248_
					coverAll:
						{535 to: 540}
					evaluating: [ receiver17 second ]
					thatSends: #second
					to: receiver17 ] value.
				#_coverageTracker29825248_
					coverAll:
						{542 to: 550}
					evaluating: [
						receiver18 includes:
							(#_coverageTracker29825248_
								cover: (552 to: 554)
								declaredAt: (68 to: 70)
								by: car) ]
					thatSends: #includes:
					to: receiver18 ] value ]
		thatSends: #assert:
		to: receiver19 ] value.! !
!Behavior method!
speed
	#_coverageTracker29825298_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825298_
		cover: (10 to: 14)
		declaredAt: (10 to: 14)
		by: speed.
	#_coverageTracker29825298_
		coverAll:
			{16 to: 16}
		evaluating: [
			receiver2 *
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825298_
					cover: (18 to: 28)
					declaredAt: (18 to: 28)
					by: turboStatus.
				#_coverageTracker29825298_
					coverAll:
						{30 to: 42}
					evaluating: [ receiver1 speedingRatio ]
					thatSends: #speedingRatio
					to: receiver1 ] value ]
		thatSends: #*
		to: receiver2 ] value.! !
!Behavior method!
initializeSpeeding: aSpeedingRatio next: aNext
	#_coverageTracker29825301_ markAsExecuted.
	#_coverageTracker29825301_
		cover: (52 to: 64)
		declaredAt: (52 to: 64)
		by:
			(speedingRatio _ #_coverageTracker29825301_
				cover: (69 to: 82)
				declaredAt: (21 to: 34)
				by: aSpeedingRatio).
	#_coverageTracker29825301_
		cover: (86 to: 89)
		declaredAt: (86 to: 89)
		by:
			(next _ #_coverageTracker29825301_
				cover: (94 to: 98)
				declaredAt: (42 to: 46)
				by: aNext).! !
!Behavior method!
canMoveCorsario: aCorsario to: aPosition at: island
	#_coverageTracker29825305_ markAsExecuted.
	^ #_coverageTracker29825305_
		coverAll:
			{58 to: 61}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
on: aTrack running: aNumberOfLaps
	#_coverageTracker29825307_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825307_
		coverAll:
			{39 to: 42}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825307_
		coverAll:
			{44 to: 46. 55 to: 62. 78 to: 82}
		evaluating: [
			receiver1
				on:
					(#_coverageTracker29825307_
						cover: (48 to: 53)
						declaredAt: (5 to: 10)
						by: aTrack)
				running:
					(#_coverageTracker29825307_
						cover: (64 to: 76)
						declaredAt: (21 to: 33)
						by: aNumberOfLaps)
				with:
					(#_coverageTracker29825307_
						coverAll:
							{84 to: 86}
						byLiteralOrPseudoVariable: #()) ]
		thatSends: #on:running:with:
		to: receiver1 ] value.! !
!Behavior method!
canMoveTo: aPosition in: terrain at: island
	#_coverageTracker29825322_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825322_
		cover: (50 to: 56)
		declaredAt: (26 to: 32)
		by: terrain.
	#_coverageTracker29825322_
		coverAll:
			{58 to: 73. 80 to: 82. 94 to: 96}
		evaluating: [
			receiver1
				canMoveBucanero:
					(#_coverageTracker29825322_
						coverAll:
							{75 to: 78}
						byLiteralOrPseudoVariable: self)
				to:
					(#_coverageTracker29825322_
						cover: (84 to: 92)
						declaredAt: (12 to: 20)
						by: aPosition)
				at:
					(#_coverageTracker29825322_
						cover: (98 to: 103)
						declaredAt: (38 to: 43)
						by: island) ]
		thatSends: #canMoveBucanero:to:at:
		to: receiver1 ] value.! !
!Behavior method!
tipoDeSueloInvalidoErrorDescription
	#_coverageTracker29825327_ markAsExecuted.
	^ #_coverageTracker29825327_
		coverAll:
			{40 to: 115}
		byLiteralOrPseudoVariable: 'no se puede crear un suelo donde dos capas contiguas sean de un mismo tipo'.! !
!Behavior method!
turboAlreadydeActivatedErrorDescription
	#_coverageTracker29825329_ markAsExecuted.
	^ #_coverageTracker29825329_
		coverAll:
			{45 to: 74}
		byLiteralOrPseudoVariable: 'Turbo is already deactivated'.! !
!Behavior method!
cannotActivateTurboWhenNoCarAheadErrorDescription
	#_coverageTracker29825336_ markAsExecuted.
	^ #_coverageTracker29825336_
		coverAll:
			{56 to: 101}
		byLiteralOrPseudoVariable: 'Cannot activate Turbo without opponent ahead'.! !
!Behavior method!
tenKilometersTurboSector
	#_coverageTracker29825338_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825338_
		coverAll:
			{30 to: 40}
		by: TurboSector.
	#_coverageTracker29825338_
		coverAll:
			{42 to: 44}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825338_
					coverAll:
						{46 to: 47}
					byLiteralOrPseudoVariable: 10.
				#_coverageTracker29825338_
					coverAll:
						{49 to: 49}
					evaluating: [
						receiver1 *
							(#_coverageTracker29825338_
								coverAll:
									{51 to: 59}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
initializeDrivenBy: aDriver
	#_coverageTracker29825345_ markAsExecuted.
	#_coverageTracker29825345_
		cover: (32 to: 37)
		declaredAt: (32 to: 37)
		by:
			(driver _ #_coverageTracker29825345_
				cover: (41 to: 47)
				declaredAt: (21 to: 27)
				by: aDriver).
	#_coverageTracker29825345_
		cover: (51 to: 61)
		declaredAt: (51 to: 61)
		by:
			(turboStatus _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825345_
				coverAll:
					{65 to: 80}
				by: TurboDeactivated.
			#_coverageTracker29825345_
				coverAll:
					{82 to: 86}
				evaluating: [
					receiver2 next:
						[ | receiver1 |
						receiver1 _ #_coverageTracker29825345_
							coverAll:
								{88 to: 91}
							byLiteralOrPseudoVariable: self.
						#_coverageTracker29825345_
							coverAll:
								{93 to: 111}
							evaluating: [ receiver1 firstTurboActivated ]
							thatSends: #firstTurboActivated
							to: receiver1 ] value ]
				thatSends: #next:
				to: receiver2 ] value).
	#_coverageTracker29825345_
		cover: (115 to: 119)
		declaredAt: (115 to: 119)
		by:
			(speed _ [ | receiver4 |
			receiver4 _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825345_
				coverAll:
					{123 to: 123}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker29825345_
				coverAll:
					{124 to: 124}
				evaluating: [
					receiver3 *
						(#_coverageTracker29825345_
							coverAll:
								{125 to: 133}
							by: kilometer) ]
				thatSends: #*
				to: receiver3 ] value.
			#_coverageTracker29825345_
				coverAll:
					{134 to: 134}
				evaluating: [
					receiver4 /
						(#_coverageTracker29825345_
							coverAll:
								{135 to: 138}
							by: hour) ]
				thatSends: #/
				to: receiver4 ] value).
	#_coverageTracker29825345_
		cover: (142 to: 157)
		declaredAt: (142 to: 157)
		by:
			(traveledDistance _ #_coverageTracker29825345_
				coverAll:
					{161 to: 161}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
buryTreasureTo: aPosition in: terrain at: island
	#_coverageTracker29825371_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825371_
		cover: (54 to: 60)
		declaredAt: (31 to: 37)
		by: terrain.
	#_coverageTracker29825371_
		coverAll:
			{62 to: 73. 80 to: 94. 106 to: 108}
		evaluating: [
			receiver1
				filibustero:
					(#_coverageTracker29825371_
						coverAll:
							{75 to: 78}
						byLiteralOrPseudoVariable: self)
				buryTreasureAt:
					(#_coverageTracker29825371_
						cover: (96 to: 104)
						declaredAt: (17 to: 25)
						by: aPosition)
				at:
					(#_coverageTracker29825371_
						cover: (110 to: 115)
						declaredAt: (43 to: 48)
						by: island) ]
		thatSends: #filibustero:buryTreasureAt:at:
		to: receiver1 ] value.! !
!Behavior method!
esAptaEnTierraPara: unaExcavadora
	#_coverageTracker29825385_ markAsExecuted.
	^ #_coverageTracker29825385_
		cover: (42 to: 54)
		declaredAt: (21 to: 33)
		by: unaExcavadora.! !
!Behavior method!
filibustero: aFilistero buryTreasureAt: aPosition at: island
	#_coverageTracker29825389_ markAsExecuted.! !
!Behavior method!
mustHaveSectorsErrorDescription
	#_coverageTracker29825391_ markAsExecuted.
	^ #_coverageTracker29825391_
		coverAll:
			{36 to: 60}
		byLiteralOrPseudoVariable: 'Track must have sectors'.! !
!Behavior method!
esAptaEnArenosoPara: unaExcavadora
	#_coverageTracker29825394_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825394_
		cover: (38 to: 50)
		declaredAt: (22 to: 34)
		by: unaExcavadora.
	#_coverageTracker29825394_
		coverAll:
			{52 to: 94}
		evaluating: [ receiver1 noEsPosibleCavarCapaArenosaConMechaDiamante ]
		thatSends: #noEsPosibleCavarCapaArenosaConMechaDiamante
		to: receiver1 ] value.! !
!Behavior method!
test20FirstTurboIncrementsSpeedByTwentyPercent
	#_coverageTracker29825399_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29825399_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825399_
		coverAll:
			{58 to: 71. 99 to: 104}
		evaluating: [
			receiver4
				assertSpeedIs:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker29825399_
						coverAll:
							{73 to: 75}
						byLiteralOrPseudoVariable: 120.
					#_coverageTracker29825399_
						coverAll:
							{77 to: 77}
						evaluating: [
							receiver1 *
								(#_coverageTracker29825399_
									coverAll:
										{79 to: 87}
									by: kilometer) ]
						thatSends: #*
						to: receiver1 ] value.
					#_coverageTracker29825399_
						coverAll:
							{89 to: 89}
						evaluating: [
							receiver2 /
								(#_coverageTracker29825399_
									coverAll:
										{91 to: 94}
									by: hour) ]
						thatSends: #/
						to: receiver2 ] value
				after: [ :turboAvailableCar |
					[ | receiver3 |
					receiver3 _ #_coverageTracker29825399_
						cover: (129 to: 145)
						declaredAt: (109 to: 125)
						by: turboAvailableCar.
					#_coverageTracker29825399_
						coverAll:
							{147 to: 159}
						evaluating: [ receiver3 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver3 ] value ]]
		thatSends: #assertSpeedIs:after:
		to: receiver4 ] value.! !
!Behavior method!
concretoConResistencia: resistencia
	#_coverageTracker29825417_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825417_
		coverAll:
			{41 to: 48}
		by: Concreto.
	#_coverageTracker29825417_
		coverAll:
			{50 to: 52}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29825417_
		coverAll:
			{54 to: 78}
		evaluating: [
			receiver2 initializeConResistencia:
				(#_coverageTracker29825417_
					cover: (80 to: 90)
					declaredAt: (25 to: 35)
					by: resistencia) ]
		thatSends: #initializeConResistencia:
		to: receiver2 ] value.! !
!Behavior method!
filibustero: aFilistero buryTreasureAt: aPosition at: island
	#_coverageTracker29825420_ markAsExecuted.! !
!Behavior method!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead
	| carAhead carAheadTime carToActiveTurboTime |
	#_coverageTracker29825429_ markAsExecuted.
	#_coverageTracker29825429_
		cover: (137 to: 144)
		declaredAt: (89 to: 96)
		by:
			(carAhead _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825429_
				coverAll:
					{148 to: 151}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825429_
				coverAll:
					{153 to: 166}
				evaluating: [
					receiver1 carAtPosition:
						(#_coverageTracker29825429_
							cover: (168 to: 185)
							declaredAt: (66 to: 83)
							by: positionOfCarAhead) ]
				thatSends: #carAtPosition:
				to: receiver1 ] value).
	#_coverageTracker29825429_
		cover: (191 to: 202)
		declaredAt: (98 to: 109)
		by:
			(carAheadTime _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825429_
				cover: (206 to: 223)
				declaredAt: (66 to: 83)
				by: positionOfCarAhead.
			#_coverageTracker29825429_
				coverAll:
					{225 to: 225}
				evaluating: [
					receiver3 /
						[ | receiver2 |
						receiver2 _ #_coverageTracker29825429_
							cover: (227 to: 234)
							declaredAt: (89 to: 96)
							by: carAhead.
						#_coverageTracker29825429_
							coverAll:
								{236 to: 240}
							evaluating: [ receiver2 speed ]
							thatSends: #speed
							to: receiver2 ] value ]
				thatSends: #/
				to: receiver3 ] value).
	#_coverageTracker29825429_
		cover: (244 to: 263)
		declaredAt: (111 to: 130)
		by:
			(carToActiveTurboTime _ [ | receiver6 |
			receiver6 _ [ | receiver4 |
			receiver4 _ #_coverageTracker29825429_
				cover: (268 to: 271)
				declaredAt: (268 to: 271)
				by: cars.
			#_coverageTracker29825429_
				coverAll:
					{273 to: 275}
				evaluating: [
					receiver4 at:
						(#_coverageTracker29825429_
							cover: (277 to: 297)
							declaredAt: (32 to: 52)
							by: aCarToActivateTurboTo) ]
				thatSends: #at:
				to: receiver4 ] value.
			#_coverageTracker29825429_
				coverAll:
					{300 to: 300}
				evaluating: [
					receiver6 /
						[ | receiver5 |
						receiver5 _ #_coverageTracker29825429_
							cover: (302 to: 322)
							declaredAt: (32 to: 52)
							by: aCarToActivateTurboTo.
						#_coverageTracker29825429_
							coverAll:
								{324 to: 328}
							evaluating: [ receiver5 speed ]
							thatSends: #speed
							to: receiver5 ] value ]
				thatSends: #/
				to: receiver6 ] value).
	[ | receiver12 |
	receiver12 _ [ | receiver9 |
	receiver9 _ [ | receiver7 |
	receiver7 _ #_coverageTracker29825429_
		cover: (334 to: 345)
		declaredAt: (98 to: 109)
		by: carAheadTime.
	#_coverageTracker29825429_
		coverAll:
			{347 to: 347}
		evaluating: [
			receiver7 -
				(#_coverageTracker29825429_
					cover: (349 to: 368)
					declaredAt: (111 to: 130)
					by: carToActiveTurboTime) ]
		thatSends: #-
		to: receiver7 ] value.
	#_coverageTracker29825429_
		coverAll:
			{370 to: 370}
		evaluating: [
			receiver9 <
				[ | receiver8 |
				receiver8 _ #_coverageTracker29825429_
					coverAll:
						{373 to: 373}
					byLiteralOrPseudoVariable: 1.
				#_coverageTracker29825429_
					coverAll:
						{375 to: 375}
					evaluating: [
						receiver8 *
							(#_coverageTracker29825429_
								coverAll:
									{377 to: 382}
								by: second) ]
					thatSends: #*
					to: receiver8 ] value ]
		thatSends: #<
		to: receiver9 ] value.
	#_coverageTracker29825429_
		coverAll:
			{387 to: 394}
		evaluating: [
			receiver12 ifFalse: [
				[ | receiver11 |
				receiver11 _ #_coverageTracker29825429_
					coverAll:
						{397 to: 400}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825429_
					coverAll:
						{402 to: 407}
					evaluating: [
						receiver11 error:
							[ | receiver10 |
							receiver10 _ #_coverageTracker29825429_
								coverAll:
									{409 to: 414}
								by: Sector.
							#_coverageTracker29825429_
								coverAll:
									{416 to: 485}
								evaluating: [ receiver10 cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ]
								thatSends: #cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription
								to: receiver10 ] value ]
					thatSends: #error:
					to: receiver11 ] value ]]
		thatSends: #ifFalse:
		to: receiver12 ] value.! !
!Behavior method!
estaVacia
	#_coverageTracker29825444_ markAsExecuted.
	^ #_coverageTracker29825444_
		coverAll:
			{15 to: 19}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
calcularProfundidadDelSueloHasta: tipoDeCapa
	| capaQueQueremos |
	#_coverageTracker29825448_ markAsExecuted.
	#_coverageTracker29825448_
		cover: (72 to: 86)
		declaredAt: (51 to: 65)
		by:
			(capaQueQueremos _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825448_
				cover: (91 to: 100)
				declaredAt: (35 to: 44)
				by: tipoDeCapa.
			#_coverageTracker29825448_
				coverAll:
					{102 to: 105}
				evaluating: [ receiver1 scan ]
				thatSends: #scan
				to: receiver1 ] value).
	^ [ | receiver7 |
	receiver7 _ #_coverageTracker29825448_
		cover: (112 to: 129)
		declaredAt: (112 to: 129)
		by: capasDeSueloDebajo.
	#_coverageTracker29825448_
		coverAll:
			{131 to: 137. 141 to: 145}
		evaluating: [
			receiver7
				inject:
					(#_coverageTracker29825448_
						coverAll:
							{139 to: 139}
						byLiteralOrPseudoVariable: 0)
				into: [ :cantidadDeCapas :capa |
					[ | receiver6 |
					receiver6 _ [ | receiver3 |
					receiver3 _ #_coverageTracker29825448_
						cover: (174 to: 188)
						declaredAt: (51 to: 65)
						by: capaQueQueremos.
					#_coverageTracker29825448_
						coverAll:
							{190 to: 190}
						evaluating: [
							receiver3 =
								[ | receiver2 |
								receiver2 _ #_coverageTracker29825448_
									cover: (192 to: 195)
									declaredAt: (166 to: 169)
									by: capa.
								#_coverageTracker29825448_
									coverAll:
										{197 to: 200}
									evaluating: [ receiver2 scan ]
									thatSends: #scan
									to: receiver2 ] value ]
						thatSends: #=
						to: receiver3 ] value.
					#_coverageTracker29825448_
						coverAll:
							{220 to: 226. 263 to: 270}
						evaluating: [
							receiver6
								ifTrue: [ ^ #_coverageTracker29825448_
										cover: (230 to: 244)
										declaredAt: (149 to: 163)
										by: cantidadDeCapas ]
								ifFalse: [
									[ | receiver5 |
									receiver5 _ #_coverageTracker29825448_
										cover: (272 to: 286)
										declaredAt: (149 to: 163)
										by: cantidadDeCapas.
									#_coverageTracker29825448_
										coverAll:
											{288 to: 288}
										evaluating: [
											receiver5 +
												[ | receiver4 |
												receiver4 _ #_coverageTracker29825448_
													cover: (290 to: 293)
													declaredAt: (166 to: 169)
													by: capa.
												#_coverageTracker29825448_
													coverAll:
														{295 to: 300}
													evaluating: [ receiver4 altura ]
													thatSends: #altura
													to: receiver4 ] value ]
										thatSends: #+
										to: receiver5 ] value ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver6 ] value ]]
		thatSends: #inject:into:
		to: receiver7 ] value.! !
!Behavior method!
deactiveTurboWhenActivated
	#_coverageTracker29825474_ markAsExecuted.
	#_coverageTracker29825474_
		cover: (68 to: 78)
		declaredAt: (31 to: 41)
		by:
			(turboStatus _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825474_
				coverAll:
					{45 to: 60}
				by: TurboDeactivated.
			#_coverageTracker29825474_
				coverAll:
					{62 to: 66}
				evaluating: [
					receiver2 next:
						[ | receiver1 |
						receiver1 _ #_coverageTracker29825474_
							cover: (31 to: 41)
							declaredAt: (31 to: 41)
							by: turboStatus.
						#_coverageTracker29825474_
							coverAll:
								{80 to: 83}
							evaluating: [ receiver1 next ]
							thatSends: #next
							to: receiver1 ] value ]
				thatSends: #next:
				to: receiver2 ] value).! !
!Behavior method!
cars
	#_coverageTracker29825489_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825489_
		cover: (11 to: 14)
		declaredAt: (11 to: 14)
		by: cars.
	#_coverageTracker29825489_
		coverAll:
			{16 to: 19}
		evaluating: [ receiver1 keys ]
		thatSends: #keys
		to: receiver1 ] value.! !
!Behavior method!
isTurboActivated
	#_coverageTracker29825491_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825491_
		cover: (22 to: 32)
		declaredAt: (22 to: 32)
		by: turboStatus.
	#_coverageTracker29825491_
		coverAll:
			{34 to: 44}
		evaluating: [ receiver1 isActivated ]
		thatSends: #isActivated
		to: receiver1 ] value.! !
!Behavior method!
initializeConResistencia: resistenciaInicial
	#_coverageTracker29825494_ markAsExecuted.
	#_coverageTracker29825494_
		cover: (53 to: 57)
		declaredAt: (53 to: 57)
		by:
			(valor _ #_coverageTracker29825494_
				coverAll:
					{62 to: 63}
				byLiteralOrPseudoVariable: 50).
	#_coverageTracker29825494_
		cover: (73 to: 83)
		declaredAt: (73 to: 83)
		by:
			(resistencia _ #_coverageTracker29825494_
				cover: (88 to: 105)
				declaredAt: (27 to: 44)
				by: resistenciaInicial).! !
!Behavior method!
atSector: aSector
	#_coverageTracker29825505_ markAsExecuted.
	#_coverageTracker29825505_
		cover: (21 to: 33)
		declaredAt: (21 to: 33)
		by:
			(currentSector _ #_coverageTracker29825505_
				cover: (37 to: 43)
				declaredAt: (11 to: 17)
				by: aSector).! !
!Behavior method!
test05CrewCannotBuryTreasureIfBucaneroCannotDig
	#_coverageTracker29825511_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29825511_
		cover: (51 to: 55)
		declaredAt: (51 to: 55)
		by: crew1.
	#_coverageTracker29825511_
		coverAll:
			{57 to: 63}
		evaluating: [
			receiver2 moveTo:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825511_
					coverAll:
						{65 to: 65}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29825511_
					coverAll:
						{66 to: 66}
					evaluating: [
						receiver1 @
							(#_coverageTracker29825511_
								coverAll:
									{67 to: 67}
								byLiteralOrPseudoVariable: 1) ]
					thatSends: #@
					to: receiver1 ] value ]
		thatSends: #moveTo:
		to: receiver2 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29825511_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825511_
		coverAll:
			{81 to: 87. 122 to: 127. 161 to: 176}
		evaluating: [
			receiver11
				should: [
					[ | receiver4 |
					receiver4 _ #_coverageTracker29825511_
						cover: (91 to: 95)
						declaredAt: (51 to: 55)
						by: crew1.
					#_coverageTracker29825511_
						coverAll:
							{97 to: 111}
						evaluating: [
							receiver4 buryTreasureAt:
								[ | receiver3 |
								receiver3 _ #_coverageTracker29825511_
									coverAll:
										{113 to: 113}
									byLiteralOrPseudoVariable: 3.
								#_coverageTracker29825511_
									coverAll:
										{114 to: 114}
									evaluating: [
										receiver3 @
											(#_coverageTracker29825511_
												coverAll:
													{115 to: 115}
												byLiteralOrPseudoVariable: 1) ]
									thatSends: #@
									to: receiver3 ] value ]
						thatSends: #buryTreasureAt:
						to: receiver4 ] value ]
				raise:
					[ | receiver5 |
					receiver5 _ #_coverageTracker29825511_
						coverAll:
							{129 to: 133}
						by: Error.
					#_coverageTracker29825511_
						coverAll:
							{135 to: 135}
						evaluating: [
							receiver5 -
								(#_coverageTracker29825511_
									coverAll:
										{137 to: 156}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver5 ] value
				withExceptionDo: [ :error |
					[ | receiver8 |
					receiver8 _ #_coverageTracker29825511_
						coverAll:
							{193 to: 196}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825511_
						coverAll:
							{198 to: 204. 224 to: 230}
						evaluating: [
							receiver8
								assert:
									[ | receiver6 |
									receiver6 _ #_coverageTracker29825511_
										cover: (206 to: 210)
										declaredAt: (181 to: 185)
										by: error.
									#_coverageTracker29825511_
										coverAll:
											{212 to: 222}
										evaluating: [ receiver6 messageText ]
										thatSends: #messageText
										to: receiver6 ] value
								equals:
									[ | receiver7 |
									receiver7 _ #_coverageTracker29825511_
										coverAll:
											{232 to: 239}
										by: Bucanero.
									#_coverageTracker29825511_
										coverAll:
											{241 to: 265}
										evaluating: [ receiver7 cannotDigErrorDescription ]
										thatSends: #cannotDigErrorDescription
										to: receiver7 ] value ]
						thatSends: #assert:equals:
						to: receiver8 ] value.
					[ | receiver10 |
					receiver10 _ #_coverageTracker29825511_
						coverAll:
							{271 to: 274}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825511_
						coverAll:
							{276 to: 280}
						evaluating: [
							receiver10 deny:
								[ | receiver9 |
								receiver9 _ #_coverageTracker29825511_
									cover: (282 to: 285)
									declaredAt: (282 to: 285)
									by: map1.
								#_coverageTracker29825511_
									coverAll:
										{287 to: 301}
									evaluating: [ receiver9 hasTreasureMark ]
									thatSends: #hasTreasureMark
									to: receiver9 ] value ]
						thatSends: #deny:
						to: receiver10 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver11 ] value.! !
!Behavior method!
sectorOf: aCar
	#_coverageTracker29825546_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825546_
		cover: (21 to: 25)
		declaredAt: (21 to: 25)
		by: track.
	#_coverageTracker29825546_
		coverAll:
			{27 to: 35}
		evaluating: [
			receiver1 sectorOf:
				(#_coverageTracker29825546_
					cover: (37 to: 40)
					declaredAt: (11 to: 14)
					by: aCar) ]
		thatSends: #sectorOf:
		to: receiver1 ] value.! !
!Behavior method!
isDiggableAt: aPosition
	#_coverageTracker29825561_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825561_
		cover: (29 to: 34)
		declaredAt: (29 to: 34)
		by: digsAt.
	#_coverageTracker29825561_
		coverAll:
			{36 to: 44}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker29825561_
					cover: (46 to: 54)
					declaredAt: (15 to: 23)
					by: aPosition) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
esAptaEnConcretoPara: unaExcavadora
	#_coverageTracker29825566_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825566_
		cover: (45 to: 57)
		declaredAt: (23 to: 35)
		by: unaExcavadora.
	#_coverageTracker29825566_
		coverAll:
			{59 to: 98}
		evaluating: [ receiver1 noEsPosibleCavarCapaConcretaConMechaSoft ]
		thatSends: #noEsPosibleCavarCapaConcretaConMechaSoft
		to: receiver1 ] value.! !
!Behavior method!
test19GrandPrixMovesCarsBetweenSectors
	| grandPrix verstappen sectorA sectorB |
	#_coverageTracker29825596_ markAsExecuted.
	#_coverageTracker29825596_
		cover: (86 to: 95)
		declaredAt: (54 to: 63)
		by:
			(verstappen _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825596_
				coverAll:
					{99 to: 102}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825596_
				coverAll:
					{104 to: 116}
				evaluating: [ receiver1 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver1 ] value).
	#_coverageTracker29825596_
		cover: (120 to: 126)
		declaredAt: (65 to: 71)
		by:
			(sectorA _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825596_
				coverAll:
					{130 to: 133}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825596_
				coverAll:
					{135 to: 158}
				evaluating: [ receiver2 tenKilometersTurboSector ]
				thatSends: #tenKilometersTurboSector
				to: receiver2 ] value).
	#_coverageTracker29825596_
		cover: (162 to: 168)
		declaredAt: (73 to: 79)
		by:
			(sectorB _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825596_
				coverAll:
					{172 to: 175}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825596_
				coverAll:
					{177 to: 204}
				evaluating: [ receiver3 thirtyKilomentersTurboSector ]
				thatSends: #thirtyKilomentersTurboSector
				to: receiver3 ] value).
	#_coverageTracker29825596_
		cover: (210 to: 218)
		declaredAt: (44 to: 52)
		by:
			(grandPrix _ [ | receiver9 |
			receiver9 _ #_coverageTracker29825596_
				coverAll:
					{222 to: 230}
				by: GrandPrix.
			#_coverageTracker29825596_
				coverAll:
					{235 to: 237. 310 to: 317. 325 to: 329}
				evaluating: [
					receiver9
						on:
							[ | receiver5 |
							receiver5 _ #_coverageTracker29825596_
								coverAll:
									{240 to: 244}
								by: Track.
							#_coverageTracker29825596_
								coverAll:
									{246 to: 257}
								evaluating: [
									receiver5 withSectors:
										[ | receiver4 |
										receiver4 _ #_coverageTracker29825596_
											coverAll:
												{260 to: 276}
											by: OrderedCollection.
										#_coverageTracker29825596_
											coverAll:
												{278 to: 282. 292 to: 296}
											evaluating: [
												receiver4
													with:
														(#_coverageTracker29825596_
															cover: (284 to: 290)
															declaredAt: (65 to: 71)
															by: sectorA)
													with:
														(#_coverageTracker29825596_
															cover: (298 to: 304)
															declaredAt: (73 to: 79)
															by: sectorB) ]
											thatSends: #with:with:
											to: receiver4 ] value ]
								thatSends: #withSectors:
								to: receiver5 ] value
						running:
							(#_coverageTracker29825596_
								coverAll:
									{319 to: 321}
								byLiteralOrPseudoVariable: 100)
						with:
							[ | cascadeReceiver |
							cascadeReceiver _ [ | receiver6 |
							receiver6 _ #_coverageTracker29825596_
								coverAll:
									{332 to: 334}
								by: Set.
							#_coverageTracker29825596_
								coverAll:
									{336 to: 338}
								evaluating: [ receiver6 new ]
								thatSends: #new
								to: receiver6 ] value.
							[ | receiver7 |
							receiver7 _ cascadeReceiver.
							#_coverageTracker29825596_
								coverAll:
									{340 to: 343}
								evaluating: [
									receiver7 add:
										(#_coverageTracker29825596_
											cover: (345 to: 354)
											declaredAt: (54 to: 63)
											by: verstappen) ]
								thatSends: #add:
								to: receiver7 ] value.
							[ | receiver8 |
							receiver8 _ cascadeReceiver.
							#_coverageTracker29825596_
								coverAll:
									{357 to: 364}
								evaluating: [ receiver8 yourself ]
								thatSends: #yourself
								to: receiver8 ] value ] value ]
				thatSends: #on:running:with:
				to: receiver9 ] value).
	[ | receiver11 |
	receiver11 _ #_coverageTracker29825596_
		cover: (372 to: 380)
		declaredAt: (44 to: 52)
		by: grandPrix.
	#_coverageTracker29825596_
		coverAll:
			{382 to: 385. 398 to: 400}
		evaluating: [
			receiver11
				put:
					(#_coverageTracker29825596_
						cover: (387 to: 396)
						declaredAt: (54 to: 63)
						by: verstappen)
				at:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29825596_
						coverAll:
							{402 to: 402}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29825596_
						coverAll:
							{404 to: 404}
						evaluating: [
							receiver10 *
								(#_coverageTracker29825596_
									coverAll:
										{406 to: 414}
									by: kilometer) ]
						thatSends: #*
						to: receiver10 ] value ]
		thatSends: #put:at:
		to: receiver11 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker29825596_
		coverAll:
			{419 to: 422}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825596_
		coverAll:
			{424 to: 430. 446 to: 452}
		evaluating: [
			receiver14
				assert:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29825596_
						coverAll:
							{432 to: 432}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29825596_
						coverAll:
							{434 to: 434}
						evaluating: [
							receiver12 *
								(#_coverageTracker29825596_
									coverAll:
										{436 to: 444}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value
				equals:
					[ | receiver13 |
					receiver13 _ #_coverageTracker29825596_
						cover: (455 to: 463)
						declaredAt: (44 to: 52)
						by: grandPrix.
					#_coverageTracker29825596_
						coverAll:
							{465 to: 475}
						evaluating: [
							receiver13 locationOf:
								(#_coverageTracker29825596_
									cover: (477 to: 486)
									declaredAt: (54 to: 63)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver13 ] value ]
		thatSends: #assert:equals:
		to: receiver14 ] value.
	[ | receiver16 |
	receiver16 _ #_coverageTracker29825596_
		coverAll:
			{492 to: 495}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825596_
		coverAll:
			{497 to: 503. 513 to: 519}
		evaluating: [
			receiver16
				assert:
					(#_coverageTracker29825596_
						cover: (505 to: 511)
						declaredAt: (65 to: 71)
						by: sectorA)
				equals:
					[ | receiver15 |
					receiver15 _ #_coverageTracker29825596_
						cover: (522 to: 530)
						declaredAt: (44 to: 52)
						by: grandPrix.
					#_coverageTracker29825596_
						coverAll:
							{532 to: 540}
						evaluating: [
							receiver15 sectorOf:
								(#_coverageTracker29825596_
									cover: (542 to: 551)
									declaredAt: (54 to: 63)
									by: verstappen) ]
						thatSends: #sectorOf:
						to: receiver15 ] value ]
		thatSends: #assert:equals:
		to: receiver16 ] value.
	[ | receiver19 |
	receiver19 _ #_coverageTracker29825596_
		cover: (558 to: 567)
		declaredAt: (54 to: 63)
		by: verstappen.
	#_coverageTracker29825596_
		coverAll:
			{569 to: 574}
		evaluating: [
			receiver19 speed:
				[ | receiver18 |
				receiver18 _ [ | receiver17 |
				receiver17 _ #_coverageTracker29825596_
					coverAll:
						{576 to: 577}
					byLiteralOrPseudoVariable: 15.
				#_coverageTracker29825596_
					coverAll:
						{579 to: 579}
					evaluating: [
						receiver17 *
							(#_coverageTracker29825596_
								coverAll:
									{581 to: 589}
								by: kilometer) ]
					thatSends: #*
					to: receiver17 ] value.
				#_coverageTracker29825596_
					coverAll:
						{591 to: 591}
					evaluating: [
						receiver18 /
							(#_coverageTracker29825596_
								coverAll:
									{593 to: 596}
								by: hour) ]
					thatSends: #/
					to: receiver18 ] value ]
		thatSends: #speed:
		to: receiver19 ] value.
	[ | receiver21 |
	receiver21 _ #_coverageTracker29825596_
		cover: (600 to: 608)
		declaredAt: (44 to: 52)
		by: grandPrix.
	#_coverageTracker29825596_
		coverAll:
			{610 to: 617}
		evaluating: [
			receiver21 advance:
				[ | receiver20 |
				receiver20 _ #_coverageTracker29825596_
					coverAll:
						{619 to: 619}
					byLiteralOrPseudoVariable: 1.
				#_coverageTracker29825596_
					coverAll:
						{621 to: 621}
					evaluating: [
						receiver20 *
							(#_coverageTracker29825596_
								coverAll:
									{623 to: 626}
								by: hour) ]
					thatSends: #*
					to: receiver20 ] value ]
		thatSends: #advance:
		to: receiver21 ] value.
	[ | receiver24 |
	receiver24 _ #_coverageTracker29825596_
		coverAll:
			{632 to: 635}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825596_
		coverAll:
			{637 to: 643. 660 to: 666}
		evaluating: [
			receiver24
				assert:
					[ | receiver22 |
					receiver22 _ #_coverageTracker29825596_
						coverAll:
							{645 to: 646}
						byLiteralOrPseudoVariable: 20.
					#_coverageTracker29825596_
						coverAll:
							{648 to: 648}
						evaluating: [
							receiver22 *
								(#_coverageTracker29825596_
									coverAll:
										{650 to: 658}
									by: kilometer) ]
						thatSends: #*
						to: receiver22 ] value
				equals:
					[ | receiver23 |
					receiver23 _ #_coverageTracker29825596_
						cover: (669 to: 677)
						declaredAt: (44 to: 52)
						by: grandPrix.
					#_coverageTracker29825596_
						coverAll:
							{679 to: 689}
						evaluating: [
							receiver23 locationOf:
								(#_coverageTracker29825596_
									cover: (691 to: 700)
									declaredAt: (54 to: 63)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver23 ] value ]
		thatSends: #assert:equals:
		to: receiver24 ] value.
	[ | receiver26 |
	receiver26 _ #_coverageTracker29825596_
		coverAll:
			{706 to: 709}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825596_
		coverAll:
			{711 to: 717. 727 to: 733}
		evaluating: [
			receiver26
				assert:
					(#_coverageTracker29825596_
						cover: (719 to: 725)
						declaredAt: (73 to: 79)
						by: sectorB)
				equals:
					[ | receiver25 |
					receiver25 _ #_coverageTracker29825596_
						cover: (736 to: 744)
						declaredAt: (44 to: 52)
						by: grandPrix.
					#_coverageTracker29825596_
						coverAll:
							{746 to: 754}
						evaluating: [
							receiver25 sectorOf:
								(#_coverageTracker29825596_
									cover: (756 to: 765)
									declaredAt: (54 to: 63)
									by: verstappen) ]
						thatSends: #sectorOf:
						to: receiver25 ] value ]
		thatSends: #assert:equals:
		to: receiver26 ] value.! !
!Behavior method!
isEmpty
	#_coverageTracker29825680_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825680_
		cover: (13 to: 17)
		declaredAt: (13 to: 17)
		by: steps.
	#_coverageTracker29825680_
		coverAll:
			{19 to: 25}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !
!Behavior method!
assertIsValidLength: aLength
	#_coverageTracker29825685_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825685_
		cover: (34 to: 40)
		declaredAt: (22 to: 28)
		by: aLength.
	#_coverageTracker29825685_
		coverAll:
			{42 to: 57}
		evaluating: [ receiver1 strictlyPositive ]
		thatSends: #strictlyPositive
		to: receiver1 ] value.
	#_coverageTracker29825685_
		coverAll:
			{59 to: 66}
		evaluating: [
			receiver4 ifFalse: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker29825685_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825685_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker29825685_
								coverAll:
									{82 to: 85}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29825685_
								coverAll:
									{87 to: 122}
								evaluating: [ receiver2 lengthMustBePositiveErrorDescription ]
								thatSends: #lengthMustBePositiveErrorDescription
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.! !
!Behavior method!
distanceOutSideRaceTrackLengthErrorMessage
	#_coverageTracker29825690_ markAsExecuted.
	^ #_coverageTracker29825690_
		coverAll:
			{47 to: 82}
		byLiteralOrPseudoVariable: 'Distance outside Race Track length'.! !
!Behavior method!
includes: aCar
	"Returns if any of the sectors includes aCar"
	#_coverageTracker29825693_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825693_
		cover: (67 to: 73)
		declaredAt: (67 to: 73)
		by: sectors.
	#_coverageTracker29825693_
		coverAll:
			{75 to: 85}
		evaluating: [
			receiver2 anySatisfy: [ :sector |
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825693_
					cover: (99 to: 104)
					declaredAt: (90 to: 95)
					by: sector.
				#_coverageTracker29825693_
					coverAll:
						{106 to: 114}
					evaluating: [
						receiver1 includes:
							(#_coverageTracker29825693_
								cover: (116 to: 119)
								declaredAt: (11 to: 14)
								by: aCar) ]
					thatSends: #includes:
					to: receiver1 ] value ]]
		thatSends: #anySatisfy:
		to: receiver2 ] value.! !
!Behavior method!
sectorOf: aCar ifNone: aBlock
	#_coverageTracker29825700_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825700_
		cover: (35 to: 41)
		declaredAt: (35 to: 41)
		by: sectors.
	#_coverageTracker29825700_
		coverAll:
			{43 to: 49. 87 to: 93}
		evaluating: [
			receiver2
				detect: [ :sector |
					[ | receiver1 |
					receiver1 _ #_coverageTracker29825700_
						cover: (63 to: 68)
						declaredAt: (54 to: 59)
						by: sector.
					#_coverageTracker29825700_
						coverAll:
							{70 to: 78}
						evaluating: [
							receiver1 includes:
								(#_coverageTracker29825700_
									cover: (80 to: 83)
									declaredAt: (11 to: 14)
									by: aCar) ]
						thatSends: #includes:
						to: receiver1 ] value ]
				ifNone:
					(#_coverageTracker29825700_
						cover: (95 to: 100)
						declaredAt: (24 to: 29)
						by: aBlock) ]
		thatSends: #detect:ifNone:
		to: receiver2 ] value.! !
!Behavior method!
buryTreasureTo: aPosition in: terrain at: island
	#_coverageTracker29825704_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825704_
		cover: (54 to: 60)
		declaredAt: (31 to: 37)
		by: terrain.
	#_coverageTracker29825704_
		coverAll:
			{62 to: 70. 77 to: 91. 103 to: 105}
		evaluating: [
			receiver1
				bucanero:
					(#_coverageTracker29825704_
						coverAll:
							{72 to: 75}
						byLiteralOrPseudoVariable: self)
				buryTreasureAt:
					(#_coverageTracker29825704_
						cover: (93 to: 101)
						declaredAt: (17 to: 25)
						by: aPosition)
				at:
					(#_coverageTracker29825704_
						cover: (107 to: 112)
						declaredAt: (43 to: 48)
						by: island) ]
		thatSends: #bucanero:buryTreasureAt:at:
		to: receiver1 ] value.! !
!Behavior method!
assertSpeedIs: anExpectedSpeed after: aTurboAvailableCarBlock
	#_coverageTracker29825720_ markAsExecuted.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29825720_
		coverAll:
			{66 to: 69}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825720_
		coverAll:
			{71 to: 94}
		evaluating: [
			receiver6 withTurboAvailableCarDo: [ :turboAvailableCar |
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825720_
					cover: (125 to: 147)
					declaredAt: (39 to: 61)
					by: aTurboAvailableCarBlock.
				#_coverageTracker29825720_
					coverAll:
						{149 to: 154}
					evaluating: [
						receiver1 value:
							(#_coverageTracker29825720_
								cover: (156 to: 172)
								declaredAt: (99 to: 115)
								by: turboAvailableCar) ]
					thatSends: #value:
					to: receiver1 ] value.
				[ | receiver3 |
				receiver3 _ #_coverageTracker29825720_
					coverAll:
						{179 to: 182}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825720_
					coverAll:
						{184 to: 190}
					evaluating: [
						receiver3 assert:
							[ | receiver2 |
							receiver2 _ #_coverageTracker29825720_
								cover: (192 to: 208)
								declaredAt: (99 to: 115)
								by: turboAvailableCar.
							#_coverageTracker29825720_
								coverAll:
									{210 to: 225}
								evaluating: [ receiver2 isTurboActivated ]
								thatSends: #isTurboActivated
								to: receiver2 ] value ]
					thatSends: #assert:
					to: receiver3 ] value.
				[ | receiver5 |
				receiver5 _ #_coverageTracker29825720_
					coverAll:
						{230 to: 233}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825720_
					coverAll:
						{235 to: 241. 259 to: 265}
					evaluating: [
						receiver5
							assert:
								(#_coverageTracker29825720_
									cover: (243 to: 257)
									declaredAt: (16 to: 30)
									by: anExpectedSpeed)
							equals:
								[ | receiver4 |
								receiver4 _ #_coverageTracker29825720_
									cover: (267 to: 283)
									declaredAt: (99 to: 115)
									by: turboAvailableCar.
								#_coverageTracker29825720_
									coverAll:
										{285 to: 289}
									evaluating: [ receiver4 speed ]
									thatSends: #speed
									to: receiver4 ] value ]
					thatSends: #assert:equals:
					to: receiver5 ] value ]]
		thatSends: #withTurboAvailableCarDo:
		to: receiver6 ] value.! !
!Behavior method!
initializeWithTrack: aTrack andNumberOfLaps: aNumberOfLaps andCars: aCollectionOfCars
	#_coverageTracker29825736_ markAsExecuted.
	#_coverageTracker29825736_
		cover: (89 to: 93)
		declaredAt: (89 to: 93)
		by:
			(track _ #_coverageTracker29825736_
				cover: (97 to: 102)
				declaredAt: (22 to: 27)
				by: aTrack).
	#_coverageTracker29825736_
		cover: (106 to: 117)
		declaredAt: (106 to: 117)
		by:
			(numberOfLaps _ #_coverageTracker29825736_
				cover: (121 to: 133)
				declaredAt: (46 to: 58)
				by: aNumberOfLaps).
	[ | receiver2 |
	receiver2 _ #_coverageTracker29825736_
		cover: (137 to: 153)
		declaredAt: (69 to: 85)
		by: aCollectionOfCars.
	#_coverageTracker29825736_
		coverAll:
			{155 to: 157}
		evaluating: [
			receiver2 do: [ :car |
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825736_
					cover: (168 to: 170)
					declaredAt: (162 to: 164)
					by: car.
				#_coverageTracker29825736_
					coverAll:
						{172 to: 190}
					evaluating: [
						receiver1 runningInGrandPrix:
							(#_coverageTracker29825736_
								coverAll:
									{192 to: 195}
								byLiteralOrPseudoVariable: self) ]
					thatSends: #runningInGrandPrix:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
initialize
	#_coverageTracker29825743_ markAsExecuted.
	#_coverageTracker29825743_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by:
			(rank _ #_coverageTracker29825743_
				coverAll:
					{22 to: 34}
				byLiteralOrPseudoVariable: #SimplePirate).! !
!Behavior method!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps
	| track grandPrix numberOfLaps |
	#_coverageTracker29825760_ markAsExecuted.
	#_coverageTracker29825760_
		cover: (97 to: 101)
		declaredAt: (63 to: 67)
		by:
			(track _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825760_
				coverAll:
					{105 to: 108}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825760_
				coverAll:
					{110 to: 124}
				evaluating: [ receiver1 twoSectorsTrack ]
				thatSends: #twoSectorsTrack
				to: receiver1 ] value).
	#_coverageTracker29825760_
		cover: (128 to: 139)
		declaredAt: (79 to: 90)
		by:
			(numberOfLaps _ #_coverageTracker29825760_
				coverAll:
					{143 to: 145}
				byLiteralOrPseudoVariable: 100).
	#_coverageTracker29825760_
		cover: (151 to: 159)
		declaredAt: (69 to: 77)
		by:
			(grandPrix _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825760_
				coverAll:
					{163 to: 171}
				by: GrandPrix.
			#_coverageTracker29825760_
				coverAll:
					{173 to: 175. 183 to: 190}
				evaluating: [
					receiver2
						on:
							(#_coverageTracker29825760_
								cover: (177 to: 181)
								declaredAt: (63 to: 67)
								by: track)
						running:
							(#_coverageTracker29825760_
								cover: (192 to: 203)
								declaredAt: (79 to: 90)
								by: numberOfLaps) ]
				thatSends: #on:running:
				to: receiver2 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29825760_
		coverAll:
			{209 to: 212}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825760_
		coverAll:
			{214 to: 220. 251 to: 257}
		evaluating: [
			receiver6
				assert:
					[ | receiver4 |
					receiver4 _ [ | receiver3 |
					receiver3 _ #_coverageTracker29825760_
						cover: (222 to: 226)
						declaredAt: (63 to: 67)
						by: track.
					#_coverageTracker29825760_
						coverAll:
							{228 to: 233}
						evaluating: [ receiver3 length ]
						thatSends: #length
						to: receiver3 ] value.
					#_coverageTracker29825760_
						coverAll:
							{235 to: 235}
						evaluating: [
							receiver4 *
								(#_coverageTracker29825760_
									cover: (237 to: 248)
									declaredAt: (79 to: 90)
									by: numberOfLaps) ]
						thatSends: #*
						to: receiver4 ] value
				equals:
					[ | receiver5 |
					receiver5 _ #_coverageTracker29825760_
						cover: (259 to: 267)
						declaredAt: (69 to: 77)
						by: grandPrix.
					#_coverageTracker29825760_
						coverAll:
							{269 to: 274}
						evaluating: [ receiver5 length ]
						thatSends: #length
						to: receiver5 ] value ]
		thatSends: #assert:equals:
		to: receiver6 ] value.! !
!Behavior method!
cavarCapaTierraConMechaWidia
	#_coverageTracker29825771_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825771_
		cover: (34 to: 57)
		declaredAt: (34 to: 57)
		by: vecesQueGolpeoCapaActual.
	#_coverageTracker29825771_
		coverAll:
			{59 to: 59}
		evaluating: [
			receiver1 =
				(#_coverageTracker29825771_
					coverAll:
						{61 to: 61}
					byLiteralOrPseudoVariable: 2) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker29825771_
		coverAll:
			{63 to: 69}
		evaluating: [ receiver3 ifTrue: [ ^ [ | receiver2 |
				receiver2 _ #_coverageTracker29825771_
					coverAll:
						{74 to: 77}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825771_
					coverAll:
						{79 to: 102}
					evaluating: [ receiver2 transformarCapaEnArenoso ]
					thatSends: #transformarCapaEnArenoso
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	^ #_coverageTracker29825771_
		coverAll:
			{112 to: 115}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
put: aCar at: aDistance
	| distanceInTrack |
	#_coverageTracker29825775_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29825775_
		cover: (50 to: 53)
		declaredAt: (6 to: 9)
		by: aCar.
	#_coverageTracker29825775_
		coverAll:
			{55 to: 71}
		evaluating: [
			receiver1 traveledDistance:
				(#_coverageTracker29825775_
					cover: (73 to: 81)
					declaredAt: (15 to: 23)
					by: aDistance) ]
		thatSends: #traveledDistance:
		to: receiver1 ] value.
	#_coverageTracker29825775_
		cover: (87 to: 101)
		declaredAt: (29 to: 43)
		by:
			(distanceInTrack _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825775_
				cover: (105 to: 113)
				declaredAt: (15 to: 23)
				by: aDistance.
			#_coverageTracker29825775_
				coverAll:
					{115 to: 116}
				evaluating: [
					receiver3 \\
						[ | receiver2 |
						receiver2 _ #_coverageTracker29825775_
							cover: (118 to: 122)
							declaredAt: (118 to: 122)
							by: track.
						#_coverageTracker29825775_
							coverAll:
								{124 to: 129}
							evaluating: [ receiver2 length ]
							thatSends: #length
							to: receiver2 ] value ]
				thatSends: #\\
				to: receiver3 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker29825775_
		cover: (133 to: 137)
		declaredAt: (118 to: 122)
		by: track.
	#_coverageTracker29825775_
		coverAll:
			{139 to: 142. 149 to: 151}
		evaluating: [
			receiver4
				put:
					(#_coverageTracker29825775_
						cover: (144 to: 147)
						declaredAt: (6 to: 9)
						by: aCar)
				at:
					(#_coverageTracker29825775_
						cover: (153 to: 167)
						declaredAt: (29 to: 43)
						by: distanceInTrack) ]
		thatSends: #put:at:
		to: receiver4 ] value.! !
!Behavior method!
speed: newSpeed
	#_coverageTracker29825795_ markAsExecuted.
	#_coverageTracker29825795_
		cover: (19 to: 23)
		declaredAt: (19 to: 23)
		by:
			(speed _ #_coverageTracker29825795_
				cover: (27 to: 34)
				declaredAt: (8 to: 15)
				by: newSpeed).! !
!Behavior method!
altura
	#_coverageTracker29825797_ markAsExecuted.
	^ #_coverageTracker29825797_
		cover: (16 to: 21)
		declaredAt: (16 to: 21)
		by: altura.! !
!Behavior method!
cars
	#_coverageTracker29825803_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ #_coverageTracker29825803_
		cover: (9 to: 15)
		declaredAt: (9 to: 15)
		by: sectors.
	#_coverageTracker29825803_
		coverAll:
			{19 to: 25. 51 to: 55}
		evaluating: [
			receiver5
				inject:
					[ | receiver1 |
					receiver1 _ #_coverageTracker29825803_
						coverAll:
							{27 to: 43}
						by: OrderedCollection.
					#_coverageTracker29825803_
						coverAll:
							{45 to: 47}
						evaluating: [ receiver1 new ]
						thatSends: #new
						to: receiver1 ] value
				into: [ :cars :sector |
					[ | cascadeReceiver |
					cascadeReceiver _ #_coverageTracker29825803_
						cover: (75 to: 78)
						declaredAt: (60 to: 63)
						by: cars.
					[ | receiver3 |
					receiver3 _ cascadeReceiver.
					#_coverageTracker29825803_
						coverAll:
							{80 to: 86}
						evaluating: [
							receiver3 addAll:
								[ | receiver2 |
								receiver2 _ #_coverageTracker29825803_
									cover: (88 to: 93)
									declaredAt: (66 to: 71)
									by: sector.
								#_coverageTracker29825803_
									coverAll:
										{95 to: 98}
									evaluating: [ receiver2 cars ]
									thatSends: #cars
									to: receiver2 ] value ]
						thatSends: #addAll:
						to: receiver3 ] value.
					[ | receiver4 |
					receiver4 _ cascadeReceiver.
					#_coverageTracker29825803_
						coverAll:
							{101 to: 108}
						evaluating: [ receiver4 yourself ]
						thatSends: #yourself
						to: receiver4 ] value ] value ]]
		thatSends: #inject:into:
		to: receiver5 ] value.! !
!Behavior method!
exhaustedTurbo
	#_coverageTracker29825812_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825812_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825812_
		coverAll:
			{25 to: 27}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29825812_
		coverAll:
			{29 to: 52}
		evaluating: [ receiver2 initializeExhaustedTurbo ]
		thatSends: #initializeExhaustedTurbo
		to: receiver2 ] value.! !
!Behavior method!
bucanero: aBucanero buryTreasureAt: aPosition at: island
	#_coverageTracker29825817_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29825817_
		coverAll:
			{63 to: 66}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825817_
		coverAll:
			{68 to: 73}
		evaluating: [
			receiver1 error:
				(#_coverageTracker29825817_
					coverAll:
						{75 to: 117}
					byLiteralOrPseudoVariable: 'Arrgh!! I cannot dig this type of terrain!!') ]
		thatSends: #error:
		to: receiver1 ] value.! !
!Behavior method!
relocate: aCar after: aTimeLapse
	| distanceMoved distanceInTrack |
	#_coverageTracker29825833_ markAsExecuted.
	#_coverageTracker29825833_
		cover: (74 to: 86)
		declaredAt: (39 to: 51)
		by:
			(distanceMoved _ [ | receiver2 |
			receiver2 _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825833_
				cover: (90 to: 93)
				declaredAt: (11 to: 14)
				by: aCar.
			#_coverageTracker29825833_
				coverAll:
					{95 to: 99}
				evaluating: [ receiver1 speed ]
				thatSends: #speed
				to: receiver1 ] value.
			#_coverageTracker29825833_
				coverAll:
					{101 to: 101}
				evaluating: [
					receiver2 *
						(#_coverageTracker29825833_
							cover: (103 to: 112)
							declaredAt: (23 to: 32)
							by: aTimeLapse) ]
				thatSends: #*
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker29825833_
		cover: (116 to: 119)
		declaredAt: (11 to: 14)
		by: aCar.
	#_coverageTracker29825833_
		coverAll:
			{121 to: 128}
		evaluating: [
			receiver3 advance:
				(#_coverageTracker29825833_
					cover: (130 to: 142)
					declaredAt: (39 to: 51)
					by: distanceMoved) ]
		thatSends: #advance:
		to: receiver3 ] value.
	#_coverageTracker29825833_
		cover: (148 to: 162)
		declaredAt: (53 to: 67)
		by:
			(distanceInTrack _ [ | receiver6 |
			receiver6 _ [ | receiver4 |
			receiver4 _ #_coverageTracker29825833_
				cover: (166 to: 169)
				declaredAt: (11 to: 14)
				by: aCar.
			#_coverageTracker29825833_
				coverAll:
					{171 to: 186}
				evaluating: [ receiver4 traveledDistance ]
				thatSends: #traveledDistance
				to: receiver4 ] value.
			#_coverageTracker29825833_
				coverAll:
					{188 to: 189}
				evaluating: [
					receiver6 \\
						[ | receiver5 |
						receiver5 _ #_coverageTracker29825833_
							cover: (191 to: 195)
							declaredAt: (191 to: 195)
							by: track.
						#_coverageTracker29825833_
							coverAll:
								{197 to: 202}
							evaluating: [ receiver5 length ]
							thatSends: #length
							to: receiver5 ] value ]
				thatSends: #\\
				to: receiver6 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker29825833_
		cover: (206 to: 210)
		declaredAt: (191 to: 195)
		by: track.
	#_coverageTracker29825833_
		coverAll:
			{212 to: 215. 222 to: 224}
		evaluating: [
			receiver7
				put:
					(#_coverageTracker29825833_
						cover: (217 to: 220)
						declaredAt: (11 to: 14)
						by: aCar)
				at:
					(#_coverageTracker29825833_
						cover: (226 to: 240)
						declaredAt: (53 to: 67)
						by: distanceInTrack) ]
		thatSends: #put:at:
		to: receiver7 ] value.! !
!Behavior method!
hamiltonCar
	#_coverageTracker29825846_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29825846_
		coverAll:
			{17 to: 29}
		by: FormulaOneCar.
	#_coverageTracker29825846_
		coverAll:
			{31 to: 39}
		evaluating: [
			receiver1 drivenBy:
				(#_coverageTracker29825846_
					coverAll:
						{41 to: 49}
					byLiteralOrPseudoVariable: #Hamilton) ]
		thatSends: #drivenBy:
		to: receiver1 ] value.! !
!Behavior method!
darGolpeDeTaladro
	#_coverageTracker29825863_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825863_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825863_
		coverAll:
			{28 to: 35}
		evaluating: [ receiver1 sinMecha ]
		thatSends: #sinMecha
		to: receiver1 ] value.
	#_coverageTracker29825863_
		coverAll:
			{37 to: 43}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker29825863_
					coverAll:
						{46 to: 49}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825863_
					coverAll:
						{51 to: 56}
					evaluating: [
						receiver2 error:
							(#_coverageTracker29825863_
								coverAll:
									{58 to: 76}
								byLiteralOrPseudoVariable: 'No puede perforar') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	#_coverageTracker29825863_
		cover: (110 to: 133)
		declaredAt: (82 to: 105)
		by:
			(vecesQueGolpeoCapaActual _ [ | receiver4 |
			receiver4 _ #_coverageTracker29825863_
				cover: (82 to: 105)
				declaredAt: (82 to: 105)
				by: vecesQueGolpeoCapaActual.
			#_coverageTracker29825863_
				coverAll:
					{135 to: 135}
				evaluating: [
					receiver4 +
						(#_coverageTracker29825863_
							coverAll:
								{137 to: 137}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #+
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ [ | receiver5 |
	receiver5 _ #_coverageTracker29825863_
		coverAll:
			{153 to: 156}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825863_
		coverAll:
			{158 to: 177}
		evaluating: [ receiver5 capaDeSueloInmediata ]
		thatSends: #capaDeSueloInmediata
		to: receiver5 ] value.
	#_coverageTracker29825863_
		coverAll:
			{179 to: 184. 191 to: 199}
		evaluating: [
			receiver6
				puede:
					(#_coverageTracker29825863_
						coverAll:
							{186 to: 189}
						byLiteralOrPseudoVariable: self)
				cavarCon:
					(#_coverageTracker29825863_
						cover: (201 to: 211)
						declaredAt: (201 to: 211)
						by: mechaPuesta) ]
		thatSends: #puede:cavarCon:
		to: receiver6 ] value.! !
!Behavior method!
activateTurbo
	#_coverageTracker29825873_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29825873_
		cover: (17 to: 27)
		declaredAt: (17 to: 27)
		by: turboStatus.
	#_coverageTracker29825873_
		coverAll:
			{29 to: 37}
		evaluating: [
			receiver1 activeOn:
				(#_coverageTracker29825873_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #activeOn:
		to: receiver1 ] value.! !
!Behavior method!
initializeOf: aLength
	#_coverageTracker29825880_ markAsExecuted.
	#_coverageTracker29825880_
		cover: (26 to: 29)
		declaredAt: (26 to: 29)
		by:
			(cars _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825880_
				coverAll:
					{33 to: 42}
				by: Dictionary.
			#_coverageTracker29825880_
				coverAll:
					{44 to: 46}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker29825880_
		cover: (50 to: 55)
		declaredAt: (50 to: 55)
		by:
			(length _ #_coverageTracker29825880_
				cover: (59 to: 65)
				declaredAt: (15 to: 21)
				by: aLength).! !
!Behavior method!
arenoso
	#_coverageTracker29825882_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29825882_
		coverAll:
			{12 to: 18}
		by: Arenoso.
	#_coverageTracker29825882_
		coverAll:
			{20 to: 22}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29825882_
		coverAll:
			{24 to: 33}
		evaluating: [ receiver2 initialize ]
		thatSends: #initialize
		to: receiver2 ] value.! !
!Behavior method!
corsario: aCorsario buryTreasureAt: aPosition at: island
	#_coverageTracker29825886_ markAsExecuted.! !
!Behavior method!
activateTurboTo: aCarToActivateTurboTo
	| positionOfCarAhead |
	#_coverageTracker29825899_ markAsExecuted.
	#_coverageTracker29825899_
		cover: (67 to: 84)
		declaredAt: (44 to: 61)
		by:
			(positionOfCarAhead _ [ | receiver3 |
			receiver3 _ #_coverageTracker29825899_
				coverAll:
					{88 to: 91}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825899_
				coverAll:
					{96 to: 116. 143 to: 149}
				evaluating: [
					receiver3
						positionOfCarAheadOf:
							(#_coverageTracker29825899_
								cover: (118 to: 138)
								declaredAt: (18 to: 38)
								by: aCarToActivateTurboTo)
						ifNone: [
							[ | receiver2 |
							receiver2 _ #_coverageTracker29825899_
								coverAll:
									{152 to: 155}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29825899_
								coverAll:
									{157 to: 162}
								evaluating: [
									receiver2 error:
										[ | receiver1 |
										receiver1 _ #_coverageTracker29825899_
											coverAll:
												{164 to: 169}
											by: Sector.
										#_coverageTracker29825899_
											coverAll:
												{171 to: 219}
											evaluating: [ receiver1 cannotActivateTurboWhenNoCarAheadErrorDescription ]
											thatSends: #cannotActivateTurboWhenNoCarAheadErrorDescription
											to: receiver1 ] value ]
								thatSends: #error:
								to: receiver2 ] value ]]
				thatSends: #positionOfCarAheadOf:ifNone:
				to: receiver3 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker29825899_
		coverAll:
			{228 to: 231}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825899_
		coverAll:
			{236 to: 265. 291 to: 301}
		evaluating: [
			receiver4
				assertDriverIsOneSecondOrLess:
					(#_coverageTracker29825899_
						cover: (267 to: 287)
						declaredAt: (18 to: 38)
						by: aCarToActivateTurboTo)
				ofDriverAt:
					(#_coverageTracker29825899_
						cover: (303 to: 320)
						declaredAt: (44 to: 61)
						by: positionOfCarAhead) ]
		thatSends: #assertDriverIsOneSecondOrLess:ofDriverAt:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker29825899_
		cover: (325 to: 345)
		declaredAt: (18 to: 38)
		by: aCarToActivateTurboTo.
	#_coverageTracker29825899_
		coverAll:
			{347 to: 376}
		evaluating: [ receiver5 activateTurboInSectorWithTurbo ]
		thatSends: #activateTurboInSectorWithTurbo
		to: receiver5 ] value.! !
!Behavior method!
initialize
	#_coverageTracker29825923_ markAsExecuted.
	#_coverageTracker29825923_
		cover: (13 to: 18)
		declaredAt: (13 to: 18)
		by:
			(altura _ #_coverageTracker29825923_
				coverAll:
					{23 to: 23}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker29825923_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(valor _ #_coverageTracker29825923_
				coverAll:
					{36 to: 36}
				byLiteralOrPseudoVariable: 7).! !
!Behavior method!
= unaCapaDeSuelo
	#_coverageTracker29825927_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29825927_
		cover: (21 to: 34)
		declaredAt: (3 to: 16)
		by: unaCapaDeSuelo.
	#_coverageTracker29825927_
		coverAll:
			{36 to: 44}
		evaluating: [
			receiver2 isKindOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825927_
					coverAll:
						{46 to: 49}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825927_
					coverAll:
						{51 to: 55}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value ]
		thatSends: #isKindOf:
		to: receiver2 ] value.! !
!Behavior method!
canMoveCorsario: aCorsario to: aPosition at: island
	#_coverageTracker29825931_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29825931_
		cover: (56 to: 64)
		declaredAt: (18 to: 26)
		by: aCorsario.
	#_coverageTracker29825931_
		coverAll:
			{66 to: 81}
		evaluating: [
			receiver1 drawDirectionTo:
				(#_coverageTracker29825931_
					cover: (83 to: 91)
					declaredAt: (32 to: 40)
					by: aPosition) ]
		thatSends: #drawDirectionTo:
		to: receiver1 ] value.
	^ #_coverageTracker29825931_
		coverAll:
			{97 to: 100}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
estaVacia
	#_coverageTracker29825933_ markAsExecuted.
	^ #_coverageTracker29825933_
		coverAll:
			{16 to: 19}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
transformarCapaEnArenoso
	#_coverageTracker29825937_ markAsExecuted.
	#_coverageTracker29825937_
		cover: (52 to: 69)
		declaredAt: (27 to: 44)
		by:
			(capasDeSueloDebajo _ [ | cascadeReceiver |
			cascadeReceiver _ [ | receiver2 |
			receiver2 _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825937_
				cover: (27 to: 44)
				declaredAt: (27 to: 44)
				by: capasDeSueloDebajo.
			#_coverageTracker29825937_
				coverAll:
					{71 to: 81}
				evaluating: [ receiver1 allButFirst ]
				thatSends: #allButFirst
				to: receiver1 ] value.
			#_coverageTracker29825937_
				coverAll:
					{83 to: 101}
				evaluating: [ receiver2 asOrderedCollection ]
				thatSends: #asOrderedCollection
				to: receiver2 ] value.
			[ | receiver4 |
			receiver4 _ cascadeReceiver.
			#_coverageTracker29825937_
				coverAll:
					{106 to: 114}
				evaluating: [
					receiver4 addFirst:
						[ | receiver3 |
						receiver3 _ #_coverageTracker29825937_
							coverAll:
								{116 to: 126}
							by: CapaDeSuelo.
						#_coverageTracker29825937_
							coverAll:
								{128 to: 134}
							evaluating: [ receiver3 arenoso ]
							thatSends: #arenoso
							to: receiver3 ] value ]
				thatSends: #addFirst:
				to: receiver4 ] value.
			[ | receiver5 |
			receiver5 _ cascadeReceiver.
			#_coverageTracker29825937_
				coverAll:
					{140 to: 147}
				evaluating: [ receiver5 yourself ]
				thatSends: #yourself
				to: receiver5 ] value ] value).! !
!Behavior method!
deactiveTurboWhenDeactivated
	#_coverageTracker29825957_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29825957_
		coverAll:
			{33 to: 36}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825957_
		coverAll:
			{38 to: 43}
		evaluating: [
			receiver2 error:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29825957_
					coverAll:
						{45 to: 48}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29825957_
					coverAll:
						{50 to: 88}
					evaluating: [ receiver1 turboAlreadydeActivatedErrorDescription ]
					thatSends: #turboAlreadydeActivatedErrorDescription
					to: receiver1 ] value ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
setAltura: unaAltura
	#_coverageTracker29825959_ markAsExecuted.
	#_coverageTracker29825959_
		cover: (24 to: 29)
		declaredAt: (24 to: 29)
		by:
			(altura _ #_coverageTracker29825959_
				cover: (34 to: 42)
				declaredAt: (12 to: 20)
				by: unaAltura).! !
!Behavior method!
traveledDistance
	#_coverageTracker29825966_ markAsExecuted.
	^ #_coverageTracker29825966_
		cover: (22 to: 37)
		declaredAt: (22 to: 37)
		by: traveledDistance.! !
!Behavior method!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength
	| sector outside car |
	#_coverageTracker29825970_ markAsExecuted.
	#_coverageTracker29825970_
		cover: (90 to: 95)
		declaredAt: (65 to: 70)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29825970_
				coverAll:
					{99 to: 102}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825970_
				coverAll:
					{104 to: 127}
				evaluating: [ receiver1 tenKilometersTurboSector ]
				thatSends: #tenKilometersTurboSector
				to: receiver1 ] value).
	#_coverageTracker29825970_
		cover: (131 to: 137)
		declaredAt: (73 to: 79)
		by:
			(outside _ [ | receiver4 |
			receiver4 _ [ | receiver2 |
			receiver2 _ #_coverageTracker29825970_
				cover: (141 to: 146)
				declaredAt: (65 to: 70)
				by: sector.
			#_coverageTracker29825970_
				coverAll:
					{148 to: 153}
				evaluating: [ receiver2 length ]
				thatSends: #length
				to: receiver2 ] value.
			#_coverageTracker29825970_
				coverAll:
					{155 to: 155}
				evaluating: [
					receiver4 +
						[ | receiver3 |
						receiver3 _ #_coverageTracker29825970_
							coverAll:
								{158 to: 158}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker29825970_
							coverAll:
								{160 to: 160}
							evaluating: [
								receiver3 *
									(#_coverageTracker29825970_
										coverAll:
											{162 to: 171}
										by: millimeter) ]
							thatSends: #*
							to: receiver3 ] value ]
				thatSends: #+
				to: receiver4 ] value).
	#_coverageTracker29825970_
		cover: (176 to: 178)
		declaredAt: (81 to: 83)
		by:
			(car _ [ | receiver5 |
			receiver5 _ #_coverageTracker29825970_
				coverAll:
					{182 to: 185}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29825970_
				coverAll:
					{187 to: 199}
				evaluating: [ receiver5 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver5 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker29825970_
		coverAll:
			{205 to: 208}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29825970_
		coverAll:
			{213 to: 219. 256 to: 261. 271 to: 286}
		evaluating: [
			receiver12
				should: [
					[ | receiver6 |
					receiver6 _ #_coverageTracker29825970_
						cover: (223 to: 228)
						declaredAt: (65 to: 70)
						by: sector.
					#_coverageTracker29825970_
						coverAll:
							{230 to: 233. 239 to: 241}
						evaluating: [
							receiver6
								put:
									(#_coverageTracker29825970_
										cover: (235 to: 237)
										declaredAt: (81 to: 83)
										by: car)
								at:
									(#_coverageTracker29825970_
										cover: (243 to: 249)
										declaredAt: (73 to: 79)
										by: outside) ]
						thatSends: #put:at:
						to: receiver6 ] value ]
				raise:
					(#_coverageTracker29825970_
						coverAll:
							{263 to: 267}
						by: Error)
				withExceptionDo: [ :error |
					[ | receiver9 |
					receiver9 _ #_coverageTracker29825970_
						coverAll:
							{302 to: 305}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825970_
						coverAll:
							{307 to: 313. 354 to: 360}
						evaluating: [
							receiver9
								assert:
									[ | receiver7 |
									receiver7 _ #_coverageTracker29825970_
										coverAll:
											{315 to: 320}
										by: Sector.
									#_coverageTracker29825970_
										coverAll:
											{322 to: 352}
										evaluating: [ receiver7 cannotPlacedCarErrorDescription ]
										thatSends: #cannotPlacedCarErrorDescription
										to: receiver7 ] value
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker29825970_
										cover: (362 to: 366)
										declaredAt: (291 to: 295)
										by: error.
									#_coverageTracker29825970_
										coverAll:
											{368 to: 378}
										evaluating: [ receiver8 messageText ]
										thatSends: #messageText
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker29825970_
						coverAll:
							{384 to: 387}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29825970_
						coverAll:
							{389 to: 393}
						evaluating: [
							receiver11 deny:
								[ | receiver10 |
								receiver10 _ #_coverageTracker29825970_
									cover: (396 to: 401)
									declaredAt: (65 to: 70)
									by: sector.
								#_coverageTracker29825970_
									coverAll:
										{403 to: 411}
									evaluating: [
										receiver10 includes:
											(#_coverageTracker29825970_
												cover: (413 to: 415)
												declaredAt: (81 to: 83)
												by: car) ]
									thatSends: #includes:
									to: receiver10 ] value ]
						thatSends: #deny:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
estaRota
	#_coverageTracker29826003_ markAsExecuted.
	^ #_coverageTracker29826003_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
test03CarCannotActivateTurboInNonTurboSector
	| car sector |
	#_coverageTracker29826008_ markAsExecuted.
	#_coverageTracker29826008_
		cover: (65 to: 70)
		declaredAt: (54 to: 59)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826008_
				coverAll:
					{74 to: 77}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826008_
				coverAll:
					{79 to: 105}
				evaluating: [ receiver1 tenKilomentersNoTurboSector ]
				thatSends: #tenKilomentersNoTurboSector
				to: receiver1 ] value).
	#_coverageTracker29826008_
		cover: (109 to: 111)
		declaredAt: (50 to: 52)
		by:
			(car _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826008_
				coverAll:
					{115 to: 118}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826008_
				coverAll:
					{120 to: 132}
				evaluating: [ receiver2 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker29826008_
		cover: (138 to: 143)
		declaredAt: (54 to: 59)
		by: sector.
	#_coverageTracker29826008_
		coverAll:
			{145 to: 155}
		evaluating: [
			receiver3 atStartPut:
				(#_coverageTracker29826008_
					cover: (157 to: 159)
					declaredAt: (50 to: 52)
					by: car) ]
		thatSends: #atStartPut:
		to: receiver3 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29826008_
		coverAll:
			{165 to: 168}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826008_
		coverAll:
			{170 to: 176. 202 to: 207. 217 to: 232}
		evaluating: [
			receiver10
				should: [
					[ | receiver4 |
					receiver4 _ #_coverageTracker29826008_
						cover: (180 to: 182)
						declaredAt: (50 to: 52)
						by: car.
					#_coverageTracker29826008_
						coverAll:
							{184 to: 196}
						evaluating: [ receiver4 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver4 ] value ]
				raise:
					(#_coverageTracker29826008_
						coverAll:
							{209 to: 213}
						by: Error)
				withExceptionDo: [ :error |
					[ | receiver7 |
					receiver7 _ #_coverageTracker29826008_
						coverAll:
							{248 to: 251}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29826008_
						coverAll:
							{253 to: 259. 300 to: 306}
						evaluating: [
							receiver7
								assert:
									[ | receiver5 |
									receiver5 _ #_coverageTracker29826008_
										coverAll:
											{261 to: 266}
										by: Sector.
									#_coverageTracker29826008_
										coverAll:
											{268 to: 298}
										evaluating: [ receiver5 turboNotAllowedErrorDescription ]
										thatSends: #turboNotAllowedErrorDescription
										to: receiver5 ] value
								equals:
									[ | receiver6 |
									receiver6 _ #_coverageTracker29826008_
										cover: (308 to: 312)
										declaredAt: (237 to: 241)
										by: error.
									#_coverageTracker29826008_
										coverAll:
											{314 to: 324}
										evaluating: [ receiver6 messageText ]
										thatSends: #messageText
										to: receiver6 ] value ]
						thatSends: #assert:equals:
						to: receiver7 ] value.
					[ | receiver9 |
					receiver9 _ #_coverageTracker29826008_
						coverAll:
							{330 to: 333}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29826008_
						coverAll:
							{335 to: 339}
						evaluating: [
							receiver9 deny:
								[ | receiver8 |
								receiver8 _ #_coverageTracker29826008_
									cover: (341 to: 343)
									declaredAt: (50 to: 52)
									by: car.
								#_coverageTracker29826008_
									coverAll:
										{345 to: 360}
									evaluating: [ receiver8 isTurboActivated ]
									thatSends: #isTurboActivated
									to: receiver8 ] value ]
						thatSends: #deny:
						to: receiver9 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver10 ] value.! !
!Behavior method!
corsario: aCorsario buryTreasureAt: aPosition at: island
	#_coverageTracker29826035_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826035_
		cover: (61 to: 69)
		declaredAt: (11 to: 19)
		by: aCorsario.
	#_coverageTracker29826035_
		coverAll:
			{71 to: 89}
		evaluating: [
			receiver1 drawTreasureMarkAt:
				(#_coverageTracker29826035_
					cover: (91 to: 99)
					declaredAt: (37 to: 45)
					by: aPosition) ]
		thatSends: #drawTreasureMarkAt:
		to: receiver1 ] value.! !
!Behavior method!
turboNotAllowedErrorDescription
	#_coverageTracker29826044_ markAsExecuted.
	^ #_coverageTracker29826044_
		coverAll:
			{38 to: 71}
		byLiteralOrPseudoVariable: 'Turbo not allowed in this Sector'.! !
!Behavior method!
cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription
	#_coverageTracker29826047_ markAsExecuted.
	^ #_coverageTracker29826047_
		coverAll:
			{77 to: 141}
		byLiteralOrPseudoVariable: 'Cannot activate Turbo when opponent is more than 1 second ahead'.! !
!Behavior method!
scan
	#_coverageTracker29826051_ markAsExecuted.
	^ #_coverageTracker29826051_
		cover: (15 to: 19)
		declaredAt: (15 to: 19)
		by: valor.! !
!Behavior method!
esAptaEnConcretoPara: unaExcavadora
	#_coverageTracker29826056_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826056_
		cover: (46 to: 58)
		declaredAt: (23 to: 35)
		by: unaExcavadora.
	#_coverageTracker29826056_
		coverAll:
			{60 to: 89}
		evaluating: [ receiver1 cavarCapaConcretaConMechaWidia ]
		thatSends: #cavarCapaConcretaConMechaWidia
		to: receiver1 ] value.! !
!Behavior method!
test22ThirdTurboSpeedsByFivePercent
	#_coverageTracker29826071_ markAsExecuted.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29826071_
		coverAll:
			{39 to: 42}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826071_
		coverAll:
			{47 to: 60. 88 to: 93}
		evaluating: [
			receiver8
				assertSpeedIs:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker29826071_
						coverAll:
							{62 to: 64}
						byLiteralOrPseudoVariable: 105.
					#_coverageTracker29826071_
						coverAll:
							{66 to: 66}
						evaluating: [
							receiver1 *
								(#_coverageTracker29826071_
									coverAll:
										{68 to: 76}
									by: kilometer) ]
						thatSends: #*
						to: receiver1 ] value.
					#_coverageTracker29826071_
						coverAll:
							{78 to: 78}
						evaluating: [
							receiver2 /
								(#_coverageTracker29826071_
									coverAll:
										{80 to: 83}
									by: hour) ]
						thatSends: #/
						to: receiver2 ] value
				after: [ :turboAvailableCar |
					[ | cascadeReceiver |
					cascadeReceiver _ #_coverageTracker29826071_
						cover: (118 to: 134)
						declaredAt: (98 to: 114)
						by: turboAvailableCar.
					[ | receiver3 |
					receiver3 _ cascadeReceiver.
					#_coverageTracker29826071_
						coverAll:
							{136 to: 148}
						evaluating: [ receiver3 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver3 ] value.
					[ | receiver4 |
					receiver4 _ cascadeReceiver.
					#_coverageTracker29826071_
						coverAll:
							{151 to: 165}
						evaluating: [ receiver4 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver4 ] value.
					[ | receiver5 |
					receiver5 _ cascadeReceiver.
					#_coverageTracker29826071_
						coverAll:
							{168 to: 180}
						evaluating: [ receiver5 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver5 ] value.
					[ | receiver6 |
					receiver6 _ cascadeReceiver.
					#_coverageTracker29826071_
						coverAll:
							{183 to: 197}
						evaluating: [ receiver6 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver6 ] value.
					[ | receiver7 |
					receiver7 _ cascadeReceiver.
					#_coverageTracker29826071_
						coverAll:
							{200 to: 212}
						evaluating: [ receiver7 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver7 ] value ] value ]]
		thatSends: #assertSpeedIs:after:
		to: receiver8 ] value.! !
!Behavior method!
activateTurboInSectorWithTurbo
	#_coverageTracker29826091_ markAsExecuted.
	#_coverageTracker29826091_
		cover: (49 to: 59)
		declaredAt: (35 to: 45)
		by:
			(turboStatus _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826091_
				cover: (35 to: 45)
				declaredAt: (35 to: 45)
				by: turboStatus.
			#_coverageTracker29826091_
				coverAll:
					{61 to: 64}
				evaluating: [ receiver1 next ]
				thatSends: #next
				to: receiver1 ] value).! !
!Behavior method!
isEmptyAt: aPosition
	#_coverageTracker29826096_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826096_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826096_
		coverAll:
			{31 to: 40}
		evaluating: [
			receiver1 hasTreeAt:
				(#_coverageTracker29826096_
					cover: (42 to: 50)
					declaredAt: (12 to: 20)
					by: aPosition) ]
		thatSends: #hasTreeAt:
		to: receiver1 ] value.
	#_coverageTracker29826096_
		coverAll:
			{53 to: 55}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
cannotPlacedCarErrorDescription
	#_coverageTracker29826112_ markAsExecuted.
	^ #_coverageTracker29826112_
		coverAll:
			{37 to: 78}
		byLiteralOrPseudoVariable: 'Driver can not be placed outside section'.! !
!Behavior method!
put: aCar at: aPosition
	| accumulatedLength |
	#_coverageTracker29826118_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826118_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826118_
		coverAll:
			{57 to: 76}
		evaluating: [
			receiver1 assertCanPlaceCarAt:
				(#_coverageTracker29826118_
					cover: (78 to: 86)
					declaredAt: (15 to: 23)
					by: aPosition) ]
		thatSends: #assertCanPlaceCarAt:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826118_
		coverAll:
			{91 to: 94}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826118_
		coverAll:
			{96 to: 102}
		evaluating: [
			receiver2 remove:
				(#_coverageTracker29826118_
					cover: (104 to: 107)
					declaredAt: (6 to: 9)
					by: aCar) ]
		thatSends: #remove:
		to: receiver2 ] value.
	#_coverageTracker29826118_
		cover: (111 to: 127)
		declaredAt: (29 to: 45)
		by:
			(accumulatedLength _ [ | receiver3 |
			receiver3 _ #_coverageTracker29826118_
				coverAll:
					{131 to: 131}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker29826118_
				coverAll:
					{133 to: 133}
				evaluating: [
					receiver3 *
						(#_coverageTracker29826118_
							coverAll:
								{135 to: 143}
							by: kilometer) ]
				thatSends: #*
				to: receiver3 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker29826118_
		cover: (147 to: 153)
		declaredAt: (147 to: 153)
		by: sectors.
	#_coverageTracker29826118_
		coverAll:
			{155 to: 157}
		evaluating: [
			receiver12 do: [ :sector |
				[ | receiver9 |
				receiver9 _ [ | receiver6 |
				receiver6 _ #_coverageTracker29826118_
					cover: (173 to: 181)
					declaredAt: (15 to: 23)
					by: aPosition.
				#_coverageTracker29826118_
					coverAll:
						{183 to: 184}
					evaluating: [
						receiver6 <=
							[ | receiver5 |
							receiver5 _ #_coverageTracker29826118_
								cover: (187 to: 203)
								declaredAt: (29 to: 45)
								by: accumulatedLength.
							#_coverageTracker29826118_
								coverAll:
									{205 to: 205}
								evaluating: [
									receiver5 +
										[ | receiver4 |
										receiver4 _ #_coverageTracker29826118_
											cover: (208 to: 213)
											declaredAt: (162 to: 167)
											by: sector.
										#_coverageTracker29826118_
											coverAll:
												{215 to: 220}
											evaluating: [ receiver4 length ]
											thatSends: #length
											to: receiver4 ] value ]
								thatSends: #+
								to: receiver5 ] value ]
					thatSends: #<=
					to: receiver6 ] value.
				#_coverageTracker29826118_
					coverAll:
						{223 to: 229}
					evaluating: [ receiver9 ifTrue: [ ^ [ | receiver8 |
							receiver8 _ #_coverageTracker29826118_
								cover: (234 to: 239)
								declaredAt: (162 to: 167)
								by: sector.
							#_coverageTracker29826118_
								coverAll:
									{241 to: 244. 251 to: 253}
								evaluating: [
									receiver8
										put:
											(#_coverageTracker29826118_
												cover: (246 to: 249)
												declaredAt: (6 to: 9)
												by: aCar)
										at:
											[ | receiver7 |
											receiver7 _ #_coverageTracker29826118_
												cover: (255 to: 263)
												declaredAt: (15 to: 23)
												by: aPosition.
											#_coverageTracker29826118_
												coverAll:
													{265 to: 265}
												evaluating: [
													receiver7 -
														(#_coverageTracker29826118_
															cover: (267 to: 283)
															declaredAt: (29 to: 45)
															by: accumulatedLength) ]
												thatSends: #-
												to: receiver7 ] value ]
								thatSends: #put:at:
								to: receiver8 ] value ]]
					thatSends: #ifTrue:
					to: receiver9 ] value.
				#_coverageTracker29826118_
					cover: (309 to: 325)
					declaredAt: (29 to: 45)
					by:
						(accumulatedLength _ [ | receiver11 |
						receiver11 _ #_coverageTracker29826118_
							cover: (289 to: 305)
							declaredAt: (29 to: 45)
							by: accumulatedLength.
						#_coverageTracker29826118_
							coverAll:
								{327 to: 327}
							evaluating: [
								receiver11 +
									[ | receiver10 |
									receiver10 _ #_coverageTracker29826118_
										cover: (329 to: 334)
										declaredAt: (162 to: 167)
										by: sector.
									#_coverageTracker29826118_
										coverAll:
											{336 to: 341}
										evaluating: [ receiver10 length ]
										thatSends: #length
										to: receiver10 ] value ]
							thatSends: #+
							to: receiver11 ] value) ]]
		thatSends: #do:
		to: receiver12 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29826118_
		coverAll:
			{349 to: 352}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826118_
		coverAll:
			{354 to: 376}
		evaluating: [
			receiver13 shouldNotHappenBecause:
				(#_coverageTracker29826118_
					coverAll:
						{378 to: 398}
					byLiteralOrPseudoVariable: #assertCanPlaceCarAt:) ]
		thatSends: #shouldNotHappenBecause:
		to: receiver13 ] value.! !
!Behavior method!
activeOn: aFormulaOneCar
	#_coverageTracker29826142_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826142_
		cover: (31 to: 44)
		declaredAt: (11 to: 24)
		by: aFormulaOneCar.
	#_coverageTracker29826142_
		coverAll:
			{46 to: 69}
		evaluating: [ receiver1 activeTurboWhenActivated ]
		thatSends: #activeTurboWhenActivated
		to: receiver1 ] value.! !
!Behavior method!
canMoveTo: aPosition in: terrain at: island
	#_coverageTracker29826156_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826156_
		cover: (50 to: 56)
		declaredAt: (26 to: 32)
		by: terrain.
	#_coverageTracker29826156_
		coverAll:
			{58 to: 76. 83 to: 85. 97 to: 99}
		evaluating: [
			receiver1
				canMoveFilibustero:
					(#_coverageTracker29826156_
						coverAll:
							{78 to: 81}
						byLiteralOrPseudoVariable: self)
				to:
					(#_coverageTracker29826156_
						cover: (87 to: 95)
						declaredAt: (12 to: 20)
						by: aPosition)
				at:
					(#_coverageTracker29826156_
						cover: (101 to: 106)
						declaredAt: (38 to: 43)
						by: island) ]
		thatSends: #canMoveFilibustero:to:at:
		to: receiver1 ] value.! !
!Behavior method!
hasTreasureMark
	#_coverageTracker29826161_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826161_
		cover: (21 to: 40)
		declaredAt: (21 to: 40)
		by: treasureMarkPosition.
	#_coverageTracker29826161_
		coverAll:
			{42 to: 47}
		evaluating: [ receiver1 notNil ]
		thatSends: #notNil
		to: receiver1 ] value.! !
!Behavior method!
next
	#_coverageTracker29826167_ markAsExecuted.
	^ #_coverageTracker29826167_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: next.! !
!Behavior method!
canMoveFilibustero: aFilibustero to: aPosition at: island
	#_coverageTracker29826171_ markAsExecuted.
	^ #_coverageTracker29826171_
		coverAll:
			{64 to: 67}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
isActivated
	#_coverageTracker29826172_ markAsExecuted.
	^ #_coverageTracker29826172_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
conMechaRota
	#_coverageTracker29826174_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826174_
		cover: (17 to: 27)
		declaredAt: (17 to: 27)
		by: mechaPuesta.
	#_coverageTracker29826174_
		coverAll:
			{29 to: 36}
		evaluating: [ receiver1 estaRota ]
		thatSends: #estaRota
		to: receiver1 ] value.! !
!Behavior method!
aCaptainIWasMeantToBe
	#_coverageTracker29826176_ markAsExecuted.
	#_coverageTracker29826176_
		cover: (25 to: 28)
		declaredAt: (25 to: 28)
		by:
			(rank _ #_coverageTracker29826176_
				coverAll:
					{33 to: 40}
				byLiteralOrPseudoVariable: #Captain).! !
!Behavior method!
crewAt: aPosition
	#_coverageTracker29826178_ markAsExecuted.
	#_coverageTracker29826178_
		cover: (21 to: 26)
		declaredAt: (21 to: 26)
		by:
			(crewAt _ #_coverageTracker29826178_
				cover: (31 to: 39)
				declaredAt: (9 to: 17)
				by: aPosition).! !
!Behavior method!
traveledDistance: aDistance
	#_coverageTracker29826181_ markAsExecuted.
	#_coverageTracker29826181_
		cover: (31 to: 46)
		declaredAt: (31 to: 46)
		by:
			(traveledDistance _ #_coverageTracker29826181_
				cover: (50 to: 58)
				declaredAt: (19 to: 27)
				by: aDistance).! !
!Behavior method!
length
	#_coverageTracker29826185_ markAsExecuted.
	^ #_coverageTracker29826185_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by: length.! !
!Behavior method!
test21SecondTurboSpeedsByTenPercent
	#_coverageTracker29826199_ markAsExecuted.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29826199_
		coverAll:
			{39 to: 42}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826199_
		coverAll:
			{47 to: 60. 88 to: 93}
		evaluating: [
			receiver6
				assertSpeedIs:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker29826199_
						coverAll:
							{62 to: 64}
						byLiteralOrPseudoVariable: 110.
					#_coverageTracker29826199_
						coverAll:
							{66 to: 66}
						evaluating: [
							receiver1 *
								(#_coverageTracker29826199_
									coverAll:
										{68 to: 76}
									by: kilometer) ]
						thatSends: #*
						to: receiver1 ] value.
					#_coverageTracker29826199_
						coverAll:
							{78 to: 78}
						evaluating: [
							receiver2 /
								(#_coverageTracker29826199_
									coverAll:
										{80 to: 83}
									by: hour) ]
						thatSends: #/
						to: receiver2 ] value
				after: [ :turboAvailableCar |
					[ | cascadeReceiver |
					cascadeReceiver _ #_coverageTracker29826199_
						cover: (118 to: 134)
						declaredAt: (98 to: 114)
						by: turboAvailableCar.
					[ | receiver3 |
					receiver3 _ cascadeReceiver.
					#_coverageTracker29826199_
						coverAll:
							{136 to: 148}
						evaluating: [ receiver3 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver3 ] value.
					[ | receiver4 |
					receiver4 _ cascadeReceiver.
					#_coverageTracker29826199_
						coverAll:
							{151 to: 165}
						evaluating: [ receiver4 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver4 ] value.
					[ | receiver5 |
					receiver5 _ cascadeReceiver.
					#_coverageTracker29826199_
						coverAll:
							{168 to: 180}
						evaluating: [ receiver5 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver5 ] value ] value ]]
		thatSends: #assertSpeedIs:after:
		to: receiver6 ] value.! !
!Behavior method!
initializeWith: anIsland crewStartsAt: aPosition
	#_coverageTracker29826205_ markAsExecuted.
	#_coverageTracker29826205_
		cover: (52 to: 57)
		declaredAt: (52 to: 57)
		by:
			(island _ #_coverageTracker29826205_
				cover: (62 to: 69)
				declaredAt: (17 to: 24)
				by: anIsland).
	#_coverageTracker29826205_
		cover: (73 to: 85)
		declaredAt: (73 to: 85)
		by:
			(startPosition _ #_coverageTracker29826205_
				cover: (90 to: 98)
				declaredAt: (40 to: 48)
				by: aPosition).
	#_coverageTracker29826205_
		cover: (102 to: 106)
		declaredAt: (102 to: 106)
		by:
			(steps _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826205_
				coverAll:
					{111 to: 127}
				by: OrderedCollection.
			#_coverageTracker29826205_
				coverAll:
					{129 to: 131}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors
	| track |
	#_coverageTracker29826229_ markAsExecuted.
	#_coverageTracker29826229_
		cover: (66 to: 70)
		declaredAt: (55 to: 59)
		by:
			(track _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826229_
				coverAll:
					{74 to: 77}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826229_
				coverAll:
					{79 to: 93}
				evaluating: [ receiver1 twoSectorsTrack ]
				thatSends: #twoSectorsTrack
				to: receiver1 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker29826229_
		coverAll:
			{99 to: 102}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826229_
		coverAll:
			{104 to: 110. 127 to: 133}
		evaluating: [
			receiver4
				assert:
					[ | receiver2 |
					receiver2 _ #_coverageTracker29826229_
						coverAll:
							{112 to: 113}
						byLiteralOrPseudoVariable: 30.
					#_coverageTracker29826229_
						coverAll:
							{115 to: 115}
						evaluating: [
							receiver2 *
								(#_coverageTracker29826229_
									coverAll:
										{117 to: 125}
									by: kilometer) ]
						thatSends: #*
						to: receiver2 ] value
				equals:
					[ | receiver3 |
					receiver3 _ #_coverageTracker29826229_
						cover: (136 to: 140)
						declaredAt: (55 to: 59)
						by: track.
					#_coverageTracker29826229_
						coverAll:
							{142 to: 147}
						evaluating: [ receiver3 length ]
						thatSends: #length
						to: receiver3 ] value ]
		thatSends: #assert:equals:
		to: receiver4 ] value.! !
!Behavior method!
next
	#_coverageTracker29826235_ markAsExecuted.
	^ #_coverageTracker29826235_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: next.! !
!Behavior method!
esAptaEnTierraPara: unaExcavadora
	#_coverageTracker29826249_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826249_
		cover: (44 to: 56)
		declaredAt: (21 to: 33)
		by: unaExcavadora.
	#_coverageTracker29826249_
		coverAll:
			{58 to: 74}
		evaluating: [ receiver1 pasarAProximaCapa ]
		thatSends: #pasarAProximaCapa
		to: receiver1 ] value.! !
!Behavior method!
withTurboAvailableCarDo: aTurboAvailableCarBlock
	| schumacher hamilton sector |
	#_coverageTracker29826255_ markAsExecuted.
	#_coverageTracker29826255_
		cover: (86 to: 91)
		declaredAt: (74 to: 79)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826255_
				coverAll:
					{95 to: 98}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826255_
				coverAll:
					{100 to: 130}
				evaluating: [ receiver1 twentyFourKilometersTurboSector ]
				thatSends: #twentyFourKilometersTurboSector
				to: receiver1 ] value).
	#_coverageTracker29826255_
		cover: (136 to: 145)
		declaredAt: (54 to: 63)
		by:
			(schumacher _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826255_
				coverAll:
					{149 to: 152}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826255_
				coverAll:
					{154 to: 166}
				evaluating: [ receiver2 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver2 ] value).
	#_coverageTracker29826255_
		cover: (170 to: 177)
		declaredAt: (65 to: 72)
		by:
			(hamilton _ [ | receiver3 |
			receiver3 _ #_coverageTracker29826255_
				coverAll:
					{181 to: 184}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826255_
				coverAll:
					{186 to: 196}
				evaluating: [ receiver3 hamiltonCar ]
				thatSends: #hamiltonCar
				to: receiver3 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29826255_
		cover: (202 to: 211)
		declaredAt: (54 to: 63)
		by: schumacher.
	#_coverageTracker29826255_
		coverAll:
			{213 to: 218}
		evaluating: [
			receiver6 speed:
				[ | receiver5 |
				receiver5 _ [ | receiver4 |
				receiver4 _ #_coverageTracker29826255_
					coverAll:
						{220 to: 222}
					byLiteralOrPseudoVariable: 100.
				#_coverageTracker29826255_
					coverAll:
						{224 to: 224}
					evaluating: [
						receiver4 *
							(#_coverageTracker29826255_
								coverAll:
									{226 to: 234}
								by: kilometer) ]
					thatSends: #*
					to: receiver4 ] value.
				#_coverageTracker29826255_
					coverAll:
						{236 to: 236}
					evaluating: [
						receiver5 /
							(#_coverageTracker29826255_
								coverAll:
									{238 to: 241}
								by: hour) ]
					thatSends: #/
					to: receiver5 ] value ]
		thatSends: #speed:
		to: receiver6 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker29826255_
		cover: (245 to: 252)
		declaredAt: (65 to: 72)
		by: hamilton.
	#_coverageTracker29826255_
		coverAll:
			{254 to: 259}
		evaluating: [
			receiver9 speed:
				[ | receiver8 |
				receiver8 _ [ | receiver7 |
				receiver7 _ #_coverageTracker29826255_
					coverAll:
						{261 to: 263}
					byLiteralOrPseudoVariable: 100.
				#_coverageTracker29826255_
					coverAll:
						{265 to: 265}
					evaluating: [
						receiver7 *
							(#_coverageTracker29826255_
								coverAll:
									{267 to: 275}
								by: kilometer) ]
					thatSends: #*
					to: receiver7 ] value.
				#_coverageTracker29826255_
					coverAll:
						{277 to: 277}
					evaluating: [
						receiver8 /
							(#_coverageTracker29826255_
								coverAll:
									{279 to: 282}
								by: hour) ]
					thatSends: #/
					to: receiver8 ] value ]
		thatSends: #speed:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29826255_
		cover: (288 to: 293)
		declaredAt: (74 to: 79)
		by: sector.
	#_coverageTracker29826255_
		coverAll:
			{295 to: 298. 311 to: 313}
		evaluating: [
			receiver11
				put:
					(#_coverageTracker29826255_
						cover: (300 to: 309)
						declaredAt: (54 to: 63)
						by: schumacher)
				at:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29826255_
						coverAll:
							{315 to: 319}
						byLiteralOrPseudoVariable: 12.99.
					#_coverageTracker29826255_
						coverAll:
							{321 to: 321}
						evaluating: [
							receiver10 *
								(#_coverageTracker29826255_
									coverAll:
										{323 to: 331}
									by: kilometer) ]
						thatSends: #*
						to: receiver10 ] value ]
		thatSends: #put:at:
		to: receiver11 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29826255_
		cover: (335 to: 340)
		declaredAt: (74 to: 79)
		by: sector.
	#_coverageTracker29826255_
		coverAll:
			{342 to: 345. 356 to: 358}
		evaluating: [
			receiver13
				put:
					(#_coverageTracker29826255_
						cover: (347 to: 354)
						declaredAt: (65 to: 72)
						by: hamilton)
				at:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29826255_
						coverAll:
							{360 to: 361}
						byLiteralOrPseudoVariable: 13.
					#_coverageTracker29826255_
						coverAll:
							{363 to: 363}
						evaluating: [
							receiver12 *
								(#_coverageTracker29826255_
									coverAll:
										{365 to: 373}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value ]
		thatSends: #put:at:
		to: receiver13 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker29826255_
		cover: (379 to: 401)
		declaredAt: (26 to: 48)
		by: aTurboAvailableCarBlock.
	#_coverageTracker29826255_
		coverAll:
			{403 to: 408}
		evaluating: [
			receiver14 value:
				(#_coverageTracker29826255_
					cover: (410 to: 419)
					declaredAt: (54 to: 63)
					by: schumacher) ]
		thatSends: #value:
		to: receiver14 ] value.! !
!Behavior method!
lastPosition
	#_coverageTracker29826294_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29826294_
		cover: (17 to: 21)
		declaredAt: (17 to: 21)
		by: steps.
	#_coverageTracker29826294_
		coverAll:
			{23 to: 29. 45 to: 49}
		evaluating: [
			receiver2
				inject:
					(#_coverageTracker29826294_
						cover: (31 to: 43)
						declaredAt: (31 to: 43)
						by: startPosition)
				into: [ :lastPosition :step |
					[ | receiver1 |
					receiver1 _ #_coverageTracker29826294_
						cover: (75 to: 86)
						declaredAt: (54 to: 65)
						by: lastPosition.
					#_coverageTracker29826294_
						coverAll:
							{88 to: 88}
						evaluating: [
							receiver1 +
								(#_coverageTracker29826294_
									cover: (90 to: 93)
									declaredAt: (68 to: 71)
									by: step) ]
						thatSends: #+
						to: receiver1 ] value ]]
		thatSends: #inject:into:
		to: receiver2 ] value.! !
!Behavior method!
put: aCar at: aPosition
	#_coverageTracker29826309_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826309_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826309_
		coverAll:
			{33 to: 52}
		evaluating: [
			receiver1 assertValidPosition:
				(#_coverageTracker29826309_
					cover: (54 to: 62)
					declaredAt: (15 to: 23)
					by: aPosition) ]
		thatSends: #assertValidPosition:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826309_
		cover: (68 to: 71)
		declaredAt: (68 to: 71)
		by: cars.
	#_coverageTracker29826309_
		coverAll:
			{73 to: 75. 82 to: 85}
		evaluating: [
			receiver2
				at:
					(#_coverageTracker29826309_
						cover: (77 to: 80)
						declaredAt: (6 to: 9)
						by: aCar)
				put:
					(#_coverageTracker29826309_
						cover: (87 to: 95)
						declaredAt: (15 to: 23)
						by: aPosition) ]
		thatSends: #at:put:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29826309_
		cover: (99 to: 102)
		declaredAt: (6 to: 9)
		by: aCar.
	#_coverageTracker29826309_
		coverAll:
			{104 to: 112}
		evaluating: [
			receiver3 atSector:
				(#_coverageTracker29826309_
					coverAll:
						{114 to: 117}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #atSector:
		to: receiver3 ] value.! !
!Behavior method!
searchTreasureIn: island with: aMap
	#_coverageTracker29826317_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826317_
		cover: (39 to: 42)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29826317_
		coverAll:
			{44 to: 44}
		evaluating: [
			receiver1 =
				(#_coverageTracker29826317_
					coverAll:
						{46 to: 58}
					byLiteralOrPseudoVariable: #SimplePirate) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker29826317_
		coverAll:
			{60 to: 66}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker29826317_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826317_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver2 error:
							(#_coverageTracker29826317_
								coverAll:
									{82 to: 104}
								byLiteralOrPseudoVariable: 'I am a simple pirate!!') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ [ | receiver4 |
	receiver4 _ #_coverageTracker29826317_
		cover: (110 to: 113)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29826317_
		coverAll:
			{115 to: 115}
		evaluating: [
			receiver4 =
				(#_coverageTracker29826317_
					coverAll:
						{117 to: 124}
					byLiteralOrPseudoVariable: #Captain) ]
		thatSends: #=
		to: receiver4 ] value.
	#_coverageTracker29826317_
		coverAll:
			{126 to: 132}
		evaluating: [ receiver5 ifTrue: [ ^ #_coverageTracker29826317_
					coverAll:
						{138 to: 141}
					byLiteralOrPseudoVariable: true ]]
		thatSends: #ifTrue:
		to: receiver5 ] value.! !
!Behavior method!
canMoveTo: aPosition in: terrain at: island
	#_coverageTracker29826342_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826342_
		cover: (50 to: 56)
		declaredAt: (26 to: 32)
		by: terrain.
	#_coverageTracker29826342_
		coverAll:
			{58 to: 73. 80 to: 82. 94 to: 96}
		evaluating: [
			receiver1
				canMoveCorsario:
					(#_coverageTracker29826342_
						coverAll:
							{75 to: 78}
						byLiteralOrPseudoVariable: self)
				to:
					(#_coverageTracker29826342_
						cover: (84 to: 92)
						declaredAt: (12 to: 20)
						by: aPosition)
				at:
					(#_coverageTracker29826342_
						cover: (98 to: 103)
						declaredAt: (38 to: 43)
						by: island) ]
		thatSends: #canMoveCorsario:to:at:
		to: receiver1 ] value.! !
!Behavior method!
test16ACarSpeedingShouldMoveAfterSomeTime
	| grandPrix verstappen sectors |
	#_coverageTracker29826359_ markAsExecuted.
	#_coverageTracker29826359_
		cover: (81 to: 90)
		declaredAt: (57 to: 66)
		by:
			(verstappen _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826359_
				coverAll:
					{94 to: 97}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826359_
				coverAll:
					{99 to: 111}
				evaluating: [ receiver1 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver1 ] value).
	[ | receiver4 |
	receiver4 _ #_coverageTracker29826359_
		cover: (115 to: 124)
		declaredAt: (57 to: 66)
		by: verstappen.
	#_coverageTracker29826359_
		coverAll:
			{126 to: 131}
		evaluating: [
			receiver4 speed:
				[ | receiver3 |
				receiver3 _ [ | receiver2 |
				receiver2 _ #_coverageTracker29826359_
					coverAll:
						{133 to: 133}
					byLiteralOrPseudoVariable: 0.
				#_coverageTracker29826359_
					coverAll:
						{134 to: 134}
					evaluating: [
						receiver2 *
							(#_coverageTracker29826359_
								coverAll:
									{136 to: 144}
								by: kilometer) ]
					thatSends: #*
					to: receiver2 ] value.
				#_coverageTracker29826359_
					coverAll:
						{146 to: 146}
					evaluating: [
						receiver3 /
							(#_coverageTracker29826359_
								coverAll:
									{148 to: 151}
								by: hour) ]
					thatSends: #/
					to: receiver3 ] value ]
		thatSends: #speed:
		to: receiver4 ] value.
	#_coverageTracker29826359_
		cover: (157 to: 163)
		declaredAt: (68 to: 74)
		by:
			(sectors _ [ | receiver5 |
			receiver5 _ #_coverageTracker29826359_
				coverAll:
					{167 to: 170}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826359_
				coverAll:
					{172 to: 181}
				evaluating: [ receiver5 twoSectors ]
				thatSends: #twoSectors
				to: receiver5 ] value).
	#_coverageTracker29826359_
		cover: (187 to: 195)
		declaredAt: (47 to: 55)
		by:
			(grandPrix _ [ | receiver8 |
			receiver8 _ #_coverageTracker29826359_
				coverAll:
					{199 to: 207}
				by: GrandPrix.
			#_coverageTracker29826359_
				coverAll:
					{212 to: 214. 247 to: 254. 262 to: 266}
				evaluating: [
					receiver8
						on:
							[ | receiver6 |
							receiver6 _ #_coverageTracker29826359_
								coverAll:
									{217 to: 221}
								by: Track.
							#_coverageTracker29826359_
								coverAll:
									{223 to: 234}
								evaluating: [
									receiver6 withSectors:
										(#_coverageTracker29826359_
											cover: (236 to: 242)
											declaredAt: (68 to: 74)
											by: sectors) ]
								thatSends: #withSectors:
								to: receiver6 ] value
						running:
							(#_coverageTracker29826359_
								coverAll:
									{256 to: 258}
								byLiteralOrPseudoVariable: 100)
						with:
							[ | receiver7 |
							receiver7 _ #_coverageTracker29826359_
								coverAll:
									{269 to: 271}
								by: Set.
							#_coverageTracker29826359_
								coverAll:
									{273 to: 277}
								evaluating: [
									receiver7 with:
										(#_coverageTracker29826359_
											cover: (279 to: 288)
											declaredAt: (57 to: 66)
											by: verstappen) ]
								thatSends: #with:
								to: receiver7 ] value ]
				thatSends: #on:running:with:
				to: receiver8 ] value).
	[ | receiver10 |
	receiver10 _ #_coverageTracker29826359_
		cover: (295 to: 303)
		declaredAt: (47 to: 55)
		by: grandPrix.
	#_coverageTracker29826359_
		coverAll:
			{305 to: 308. 321 to: 323}
		evaluating: [
			receiver10
				put:
					(#_coverageTracker29826359_
						cover: (310 to: 319)
						declaredAt: (57 to: 66)
						by: verstappen)
				at:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29826359_
						coverAll:
							{325 to: 325}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker29826359_
						coverAll:
							{327 to: 327}
						evaluating: [
							receiver9 *
								(#_coverageTracker29826359_
									coverAll:
										{329 to: 337}
									by: kilometer) ]
						thatSends: #*
						to: receiver9 ] value ]
		thatSends: #put:at:
		to: receiver10 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29826359_
		cover: (341 to: 350)
		declaredAt: (57 to: 66)
		by: verstappen.
	#_coverageTracker29826359_
		coverAll:
			{352 to: 357}
		evaluating: [
			receiver13 speed:
				[ | receiver12 |
				receiver12 _ [ | receiver11 |
				receiver11 _ #_coverageTracker29826359_
					coverAll:
						{359 to: 361}
					byLiteralOrPseudoVariable: 300.
				#_coverageTracker29826359_
					coverAll:
						{363 to: 363}
					evaluating: [
						receiver11 *
							(#_coverageTracker29826359_
								coverAll:
									{365 to: 373}
								by: kilometer) ]
					thatSends: #*
					to: receiver11 ] value.
				#_coverageTracker29826359_
					coverAll:
						{375 to: 375}
					evaluating: [
						receiver12 /
							(#_coverageTracker29826359_
								coverAll:
									{377 to: 380}
								by: hour) ]
					thatSends: #/
					to: receiver12 ] value ]
		thatSends: #speed:
		to: receiver13 ] value.
	[ | receiver15 |
	receiver15 _ #_coverageTracker29826359_
		cover: (384 to: 392)
		declaredAt: (47 to: 55)
		by: grandPrix.
	#_coverageTracker29826359_
		coverAll:
			{394 to: 401}
		evaluating: [
			receiver15 advance:
				[ | receiver14 |
				receiver14 _ #_coverageTracker29826359_
					coverAll:
						{403 to: 403}
					byLiteralOrPseudoVariable: 1.
				#_coverageTracker29826359_
					coverAll:
						{405 to: 405}
					evaluating: [
						receiver14 *
							(#_coverageTracker29826359_
								coverAll:
									{407 to: 410}
								by: hour) ]
					thatSends: #*
					to: receiver14 ] value ]
		thatSends: #advance:
		to: receiver15 ] value.
	[ | receiver18 |
	receiver18 _ #_coverageTracker29826359_
		coverAll:
			{416 to: 419}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826359_
		coverAll:
			{421 to: 427. 445 to: 451}
		evaluating: [
			receiver18
				assert:
					[ | receiver16 |
					receiver16 _ #_coverageTracker29826359_
						coverAll:
							{429 to: 431}
						byLiteralOrPseudoVariable: 300.
					#_coverageTracker29826359_
						coverAll:
							{433 to: 433}
						evaluating: [
							receiver16 *
								(#_coverageTracker29826359_
									coverAll:
										{435 to: 443}
									by: kilometer) ]
						thatSends: #*
						to: receiver16 ] value
				equals:
					[ | receiver17 |
					receiver17 _ #_coverageTracker29826359_
						cover: (454 to: 462)
						declaredAt: (47 to: 55)
						by: grandPrix.
					#_coverageTracker29826359_
						coverAll:
							{464 to: 474}
						evaluating: [
							receiver17 locationOf:
								(#_coverageTracker29826359_
									cover: (476 to: 485)
									declaredAt: (57 to: 66)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver17 ] value ]
		thatSends: #assert:equals:
		to: receiver18 ] value.! !
!Behavior method!
clearTerrainAt: aPosition
	#_coverageTracker29826398_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826398_
		cover: (29 to: 35)
		declaredAt: (29 to: 35)
		by: treesAt.
	#_coverageTracker29826398_
		coverAll:
			{37 to: 43. 55 to: 63}
		evaluating: [
			receiver1
				remove:
					(#_coverageTracker29826398_
						cover: (45 to: 53)
						declaredAt: (17 to: 25)
						by: aPosition)
				ifAbsent: [ ]]
		thatSends: #remove:ifAbsent:
		to: receiver1 ] value.! !
!Behavior method!
cannotPlacedCarErrorDescription
	#_coverageTracker29826407_ markAsExecuted.
	^ #_coverageTracker29826407_
		coverAll:
			{37 to: 67}
		byLiteralOrPseudoVariable: 'Car cannot be placed in track'.! !
!Behavior method!
test18GrandPrixKnowsSectorOfCarAfterSomeTime
	| grandPrix verstappen sectors |
	#_coverageTracker29826427_ markAsExecuted.
	#_coverageTracker29826427_
		cover: (84 to: 93)
		declaredAt: (60 to: 69)
		by:
			(verstappen _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826427_
				coverAll:
					{97 to: 100}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826427_
				coverAll:
					{102 to: 114}
				evaluating: [ receiver1 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver1 ] value).
	#_coverageTracker29826427_
		cover: (120 to: 126)
		declaredAt: (71 to: 77)
		by:
			(sectors _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826427_
				coverAll:
					{130 to: 133}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826427_
				coverAll:
					{135 to: 144}
				evaluating: [ receiver2 twoSectors ]
				thatSends: #twoSectors
				to: receiver2 ] value).
	#_coverageTracker29826427_
		cover: (150 to: 158)
		declaredAt: (50 to: 58)
		by:
			(grandPrix _ [ | receiver5 |
			receiver5 _ #_coverageTracker29826427_
				coverAll:
					{162 to: 170}
				by: GrandPrix.
			#_coverageTracker29826427_
				coverAll:
					{175 to: 177. 210 to: 217. 225 to: 229}
				evaluating: [
					receiver5
						on:
							[ | receiver3 |
							receiver3 _ #_coverageTracker29826427_
								coverAll:
									{180 to: 184}
								by: Track.
							#_coverageTracker29826427_
								coverAll:
									{186 to: 197}
								evaluating: [
									receiver3 withSectors:
										(#_coverageTracker29826427_
											cover: (199 to: 205)
											declaredAt: (71 to: 77)
											by: sectors) ]
								thatSends: #withSectors:
								to: receiver3 ] value
						running:
							(#_coverageTracker29826427_
								coverAll:
									{219 to: 221}
								byLiteralOrPseudoVariable: 100)
						with:
							[ | receiver4 |
							receiver4 _ #_coverageTracker29826427_
								coverAll:
									{232 to: 234}
								by: Set.
							#_coverageTracker29826427_
								coverAll:
									{236 to: 240}
								evaluating: [
									receiver4 with:
										(#_coverageTracker29826427_
											cover: (242 to: 251)
											declaredAt: (60 to: 69)
											by: verstappen) ]
								thatSends: #with:
								to: receiver4 ] value ]
				thatSends: #on:running:with:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker29826427_
		cover: (259 to: 267)
		declaredAt: (50 to: 58)
		by: grandPrix.
	#_coverageTracker29826427_
		coverAll:
			{269 to: 272. 285 to: 287}
		evaluating: [
			receiver7
				put:
					(#_coverageTracker29826427_
						cover: (274 to: 283)
						declaredAt: (60 to: 69)
						by: verstappen)
				at:
					[ | receiver6 |
					receiver6 _ #_coverageTracker29826427_
						coverAll:
							{289 to: 289}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker29826427_
						coverAll:
							{291 to: 291}
						evaluating: [
							receiver6 *
								(#_coverageTracker29826427_
									coverAll:
										{293 to: 301}
									by: kilometer) ]
						thatSends: #*
						to: receiver6 ] value ]
		thatSends: #put:at:
		to: receiver7 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29826427_
		cover: (307 to: 316)
		declaredAt: (60 to: 69)
		by: verstappen.
	#_coverageTracker29826427_
		coverAll:
			{318 to: 323}
		evaluating: [
			receiver10 speed:
				[ | receiver9 |
				receiver9 _ [ | receiver8 |
				receiver8 _ #_coverageTracker29826427_
					coverAll:
						{325 to: 325}
					byLiteralOrPseudoVariable: 5.
				#_coverageTracker29826427_
					coverAll:
						{327 to: 327}
					evaluating: [
						receiver8 *
							(#_coverageTracker29826427_
								coverAll:
									{329 to: 337}
								by: kilometer) ]
					thatSends: #*
					to: receiver8 ] value.
				#_coverageTracker29826427_
					coverAll:
						{339 to: 339}
					evaluating: [
						receiver9 /
							(#_coverageTracker29826427_
								coverAll:
									{341 to: 344}
								by: hour) ]
					thatSends: #/
					to: receiver9 ] value
			":)" ]
		thatSends: #speed:
		to: receiver10 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker29826427_
		cover: (353 to: 361)
		declaredAt: (50 to: 58)
		by: grandPrix.
	#_coverageTracker29826427_
		coverAll:
			{363 to: 370}
		evaluating: [
			receiver12 advance:
				[ | receiver11 |
				receiver11 _ #_coverageTracker29826427_
					coverAll:
						{372 to: 372}
					byLiteralOrPseudoVariable: 1.
				#_coverageTracker29826427_
					coverAll:
						{374 to: 374}
					evaluating: [
						receiver11 *
							(#_coverageTracker29826427_
								coverAll:
									{376 to: 379}
								by: hour) ]
					thatSends: #*
					to: receiver11 ] value ]
		thatSends: #advance:
		to: receiver12 ] value.
	[ | receiver15 |
	receiver15 _ #_coverageTracker29826427_
		coverAll:
			{385 to: 388}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826427_
		coverAll:
			{390 to: 396. 412 to: 418}
		evaluating: [
			receiver15
				assert:
					[ | receiver13 |
					receiver13 _ #_coverageTracker29826427_
						coverAll:
							{398 to: 398}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826427_
						coverAll:
							{400 to: 400}
						evaluating: [
							receiver13 *
								(#_coverageTracker29826427_
									coverAll:
										{402 to: 410}
									by: kilometer) ]
						thatSends: #*
						to: receiver13 ] value
				equals:
					[ | receiver14 |
					receiver14 _ #_coverageTracker29826427_
						cover: (421 to: 429)
						declaredAt: (50 to: 58)
						by: grandPrix.
					#_coverageTracker29826427_
						coverAll:
							{431 to: 441}
						evaluating: [
							receiver14 locationOf:
								(#_coverageTracker29826427_
									cover: (443 to: 452)
									declaredAt: (60 to: 69)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver14 ] value ]
		thatSends: #assert:equals:
		to: receiver15 ] value.
	[ | receiver18 |
	receiver18 _ #_coverageTracker29826427_
		coverAll:
			{458 to: 461}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826427_
		coverAll:
			{463 to: 469. 485 to: 491}
		evaluating: [
			receiver18
				assert:
					[ | receiver16 |
					receiver16 _ #_coverageTracker29826427_
						cover: (471 to: 477)
						declaredAt: (71 to: 77)
						by: sectors.
					#_coverageTracker29826427_
						coverAll:
							{479 to: 483}
						evaluating: [ receiver16 first ]
						thatSends: #first
						to: receiver16 ] value
				equals:
					[ | receiver17 |
					receiver17 _ #_coverageTracker29826427_
						cover: (494 to: 502)
						declaredAt: (50 to: 58)
						by: grandPrix.
					#_coverageTracker29826427_
						coverAll:
							{504 to: 512}
						evaluating: [
							receiver17 sectorOf:
								(#_coverageTracker29826427_
									cover: (514 to: 523)
									declaredAt: (60 to: 69)
									by: verstappen) ]
						thatSends: #sectorOf:
						to: receiver17 ] value ]
		thatSends: #assert:equals:
		to: receiver18 ] value.! !
!Behavior method!
positionOf: aCar
	| accumulatedLength |
	#_coverageTracker29826495_ markAsExecuted.
	#_coverageTracker29826495_
		cover: (45 to: 61)
		declaredAt: (22 to: 38)
		by:
			(accumulatedLength _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826495_
				coverAll:
					{65 to: 65}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker29826495_
				coverAll:
					{67 to: 67}
				evaluating: [
					receiver1 *
						(#_coverageTracker29826495_
							coverAll:
								{69 to: 77}
							by: kilometer) ]
				thatSends: #*
				to: receiver1 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker29826495_
		cover: (83 to: 89)
		declaredAt: (83 to: 89)
		by: sectors.
	#_coverageTracker29826495_
		coverAll:
			{91 to: 93}
		evaluating: [
			receiver8 do: [ :sector |
				[ | receiver5 |
				receiver5 _ [ | receiver2 |
				receiver2 _ #_coverageTracker29826495_
					cover: (110 to: 115)
					declaredAt: (98 to: 103)
					by: sector.
				#_coverageTracker29826495_
					coverAll:
						{117 to: 125}
					evaluating: [
						receiver2 includes:
							(#_coverageTracker29826495_
								cover: (127 to: 130)
								declaredAt: (13 to: 16)
								by: aCar) ]
					thatSends: #includes:
					to: receiver2 ] value.
				#_coverageTracker29826495_
					coverAll:
						{133 to: 139}
					evaluating: [ receiver5 ifTrue: [ ^ [ | receiver4 |
							receiver4 _ #_coverageTracker29826495_
								cover: (145 to: 161)
								declaredAt: (22 to: 38)
								by: accumulatedLength.
							#_coverageTracker29826495_
								coverAll:
									{163 to: 163}
								evaluating: [
									receiver4 +
										[ | receiver3 |
										receiver3 _ #_coverageTracker29826495_
											cover: (166 to: 171)
											declaredAt: (98 to: 103)
											by: sector.
										#_coverageTracker29826495_
											coverAll:
												{173 to: 183}
											evaluating: [
												receiver3 positionOf:
													(#_coverageTracker29826495_
														cover: (185 to: 188)
														declaredAt: (13 to: 16)
														by: aCar) ]
											thatSends: #positionOf:
											to: receiver3 ] value ]
								thatSends: #+
								to: receiver4 ] value ]]
					thatSends: #ifTrue:
					to: receiver5 ] value.
				#_coverageTracker29826495_
					cover: (215 to: 231)
					declaredAt: (22 to: 38)
					by:
						(accumulatedLength _ [ | receiver7 |
						receiver7 _ #_coverageTracker29826495_
							cover: (195 to: 211)
							declaredAt: (22 to: 38)
							by: accumulatedLength.
						#_coverageTracker29826495_
							coverAll:
								{233 to: 233}
							evaluating: [
								receiver7 +
									[ | receiver6 |
									receiver6 _ #_coverageTracker29826495_
										cover: (235 to: 240)
										declaredAt: (98 to: 103)
										by: sector.
									#_coverageTracker29826495_
										coverAll:
											{242 to: 247}
										evaluating: [ receiver6 length ]
										thatSends: #length
										to: receiver6 ] value ]
							thatSends: #+
							to: receiver7 ] value) ]]
		thatSends: #do:
		to: receiver8 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29826495_
		coverAll:
			{255 to: 258}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826495_
		coverAll:
			{260 to: 265}
		evaluating: [
			receiver10 error:
				[ | receiver9 |
				receiver9 _ #_coverageTracker29826495_
					coverAll:
						{267 to: 270}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826495_
					coverAll:
						{272 to: 298}
					evaluating: [ receiver9 carNotFoundErrorDescription ]
					thatSends: #carNotFoundErrorDescription
					to: receiver9 ] value ]
		thatSends: #error:
		to: receiver10 ] value.! !
!Behavior method!
isActivated
	#_coverageTracker29826518_ markAsExecuted.
	^ #_coverageTracker29826518_
		coverAll:
			{17 to: 21}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength
	| track car outside |
	#_coverageTracker29826523_ markAsExecuted.
	#_coverageTracker29826523_
		cover: (87 to: 91)
		declaredAt: (64 to: 68)
		by:
			(track _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826523_
				coverAll:
					{95 to: 98}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826523_
				coverAll:
					{100 to: 114}
				evaluating: [ receiver1 twoSectorsTrack ]
				thatSends: #twoSectorsTrack
				to: receiver1 ] value).
	#_coverageTracker29826523_
		cover: (118 to: 124)
		declaredAt: (74 to: 80)
		by:
			(outside _ [ | receiver4 |
			receiver4 _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826523_
				cover: (128 to: 132)
				declaredAt: (64 to: 68)
				by: track.
			#_coverageTracker29826523_
				coverAll:
					{134 to: 139}
				evaluating: [ receiver2 length ]
				thatSends: #length
				to: receiver2 ] value.
			#_coverageTracker29826523_
				coverAll:
					{141 to: 141}
				evaluating: [
					receiver4 +
						[ | receiver3 |
						receiver3 _ #_coverageTracker29826523_
							coverAll:
								{144 to: 144}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker29826523_
							coverAll:
								{146 to: 146}
							evaluating: [
								receiver3 *
									(#_coverageTracker29826523_
										coverAll:
											{148 to: 157}
										by: millimeter) ]
							thatSends: #*
							to: receiver3 ] value ]
				thatSends: #+
				to: receiver4 ] value).
	#_coverageTracker29826523_
		cover: (162 to: 164)
		declaredAt: (70 to: 72)
		by:
			(car _ [ | receiver5 |
			receiver5 _ #_coverageTracker29826523_
				coverAll:
					{168 to: 171}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826523_
				coverAll:
					{173 to: 185}
				evaluating: [ receiver5 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver5 ] value).
	[ | receiver12 |
	receiver12 _ #_coverageTracker29826523_
		coverAll:
			{191 to: 194}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826523_
		coverAll:
			{196 to: 202. 238 to: 243. 253 to: 268}
		evaluating: [
			receiver12
				should: [
					[ | receiver6 |
					receiver6 _ #_coverageTracker29826523_
						cover: (206 to: 210)
						declaredAt: (64 to: 68)
						by: track.
					#_coverageTracker29826523_
						coverAll:
							{212 to: 215. 221 to: 223}
						evaluating: [
							receiver6
								put:
									(#_coverageTracker29826523_
										cover: (217 to: 219)
										declaredAt: (70 to: 72)
										by: car)
								at:
									(#_coverageTracker29826523_
										cover: (225 to: 231)
										declaredAt: (74 to: 80)
										by: outside) ]
						thatSends: #put:at:
						to: receiver6 ] value ]
				raise:
					(#_coverageTracker29826523_
						coverAll:
							{245 to: 249}
						by: Error)
				withExceptionDo: [ :error |
					[ | receiver9 |
					receiver9 _ #_coverageTracker29826523_
						coverAll:
							{284 to: 287}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29826523_
						coverAll:
							{289 to: 295. 335 to: 341}
						evaluating: [
							receiver9
								assert:
									[ | receiver7 |
									receiver7 _ #_coverageTracker29826523_
										coverAll:
											{297 to: 301}
										by: Track.
									#_coverageTracker29826523_
										coverAll:
											{303 to: 333}
										evaluating: [ receiver7 cannotPlacedCarErrorDescription ]
										thatSends: #cannotPlacedCarErrorDescription
										to: receiver7 ] value
								equals:
									[ | receiver8 |
									receiver8 _ #_coverageTracker29826523_
										cover: (343 to: 347)
										declaredAt: (273 to: 277)
										by: error.
									#_coverageTracker29826523_
										coverAll:
											{349 to: 359}
										evaluating: [ receiver8 messageText ]
										thatSends: #messageText
										to: receiver8 ] value ]
						thatSends: #assert:equals:
						to: receiver9 ] value.
					[ | receiver11 |
					receiver11 _ #_coverageTracker29826523_
						coverAll:
							{365 to: 368}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29826523_
						coverAll:
							{370 to: 374}
						evaluating: [
							receiver11 deny:
								[ | receiver10 |
								receiver10 _ #_coverageTracker29826523_
									cover: (377 to: 381)
									declaredAt: (64 to: 68)
									by: track.
								#_coverageTracker29826523_
									coverAll:
										{383 to: 391}
									evaluating: [
										receiver10 includes:
											(#_coverageTracker29826523_
												cover: (393 to: 395)
												declaredAt: (70 to: 72)
												by: car) ]
									thatSends: #includes:
									to: receiver10 ] value ]
						thatSends: #deny:
						to: receiver11 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver12 ] value.! !
!Behavior method!
runningInGrandPrix: aGrandPrix
	#_coverageTracker29826586_ markAsExecuted.
	#_coverageTracker29826586_
		cover: (35 to: 43)
		declaredAt: (35 to: 43)
		by:
			(grandPrix _ #_coverageTracker29826586_
				cover: (47 to: 56)
				declaredAt: (21 to: 30)
				by: aGrandPrix).! !
!Behavior method!
atStartPut: aCar
	#_coverageTracker29826588_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826588_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826588_
		coverAll:
			{26 to: 29. 36 to: 38}
		evaluating: [
			receiver2
				put:
					(#_coverageTracker29826588_
						cover: (31 to: 34)
						declaredAt: (13 to: 16)
						by: aCar)
				at:
					[ | receiver1 |
					receiver1 _ #_coverageTracker29826588_
						coverAll:
							{40 to: 40}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker29826588_
						coverAll:
							{41 to: 41}
						evaluating: [
							receiver1 *
								(#_coverageTracker29826588_
									coverAll:
										{42 to: 50}
									by: kilometer) ]
						thatSends: #*
						to: receiver1 ] value ]
		thatSends: #put:at:
		to: receiver2 ] value.! !
!Behavior method!
assertSueloValido: capasDeSueloAExcavar
	#_coverageTracker29826596_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826596_
		cover: (44 to: 63)
		declaredAt: (20 to: 39)
		by: capasDeSueloAExcavar.
	#_coverageTracker29826596_
		coverAll:
			{65 to: 65}
		evaluating: [ receiver1 m ]
		thatSends: #m
		to: receiver1 ] value.
	#_coverageTracker29826596_
		coverAll:
			{67 to: 74}
		evaluating: [
			receiver4 ifFalse: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker29826596_
					coverAll:
						{78 to: 81}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826596_
					coverAll:
						{83 to: 88}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker29826596_
								coverAll:
									{90 to: 93}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29826596_
								coverAll:
									{95 to: 129}
								evaluating: [ receiver2 tipoDeSueloInvalidoErrorDescription ]
								thatSends: #tipoDeSueloInvalidoErrorDescription
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifFalse:
		to: receiver4 ] value.! !
!Behavior method!
withSectors: sectors
	#_coverageTracker29826614_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826614_
		coverAll:
			{24 to: 27}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826614_
		coverAll:
			{29 to: 43}
		evaluating: [
			receiver1 assertNotEmpty:
				(#_coverageTracker29826614_
					cover: (45 to: 51)
					declaredAt: (14 to: 20)
					by: sectors) ]
		thatSends: #assertNotEmpty:
		to: receiver1 ] value.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker29826614_
		coverAll:
			{59 to: 62}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826614_
		coverAll:
			{64 to: 66}
		evaluating: [ receiver2 new ]
		thatSends: #new
		to: receiver2 ] value.
	#_coverageTracker29826614_
		coverAll:
			{68 to: 89}
		evaluating: [
			receiver3 initializeWithSectors:
				(#_coverageTracker29826614_
					cover: (91 to: 97)
					declaredAt: (14 to: 20)
					by: sectors) ]
		thatSends: #initializeWithSectors:
		to: receiver3 ] value.! !
!Behavior method!
deactiveOn: aFormulaOneCar
	#_coverageTracker29826620_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826620_
		cover: (33 to: 46)
		declaredAt: (13 to: 26)
		by: aFormulaOneCar.
	#_coverageTracker29826620_
		coverAll:
			{48 to: 73}
		evaluating: [ receiver1 deactiveTurboWhenActivated ]
		thatSends: #deactiveTurboWhenActivated
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker29826632_ markAsExecuted.
	#_coverageTracker29826632_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by:
			(rank _ #_coverageTracker29826632_
				coverAll:
					{22 to: 28}
				byLiteralOrPseudoVariable: #NoRank).! !
!Behavior method!
sinResistencia
	#_coverageTracker29826635_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826635_
		cover: (18 to: 28)
		declaredAt: (18 to: 28)
		by: resistencia.
	#_coverageTracker29826635_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 =
				(#_coverageTracker29826635_
					coverAll:
						{31 to: 32}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
test25CanNotDeactivateTurboWhenIsDeactivated
	#_coverageTracker29826639_ markAsExecuted.
	[ | receiver5 |
	receiver5 _ #_coverageTracker29826639_
		coverAll:
			{48 to: 51}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826639_
		coverAll:
			{53 to: 76}
		evaluating: [
			receiver5 withTurboAvailableCarDo: [ :turboAvailableCar |
				[ | receiver4 |
				receiver4 _ #_coverageTracker29826639_
					coverAll:
						{105 to: 108}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826639_
					coverAll:
						{114 to: 120. 163 to: 168. 203 to: 218}
					evaluating: [
						receiver4
							should: [
								[ | receiver1 |
								receiver1 _ #_coverageTracker29826639_
									cover: (124 to: 140)
									declaredAt: (81 to: 97)
									by: turboAvailableCar.
								#_coverageTracker29826639_
									coverAll:
										{142 to: 156}
									evaluating: [ receiver1 deactivateTurbo ]
									thatSends: #deactivateTurbo
									to: receiver1 ] value ]
							raise:
								[ | receiver2 |
								receiver2 _ #_coverageTracker29826639_
									coverAll:
										{170 to: 174}
									by: Error.
								#_coverageTracker29826639_
									coverAll:
										{176 to: 176}
									evaluating: [
										receiver2 -
											(#_coverageTracker29826639_
												coverAll:
													{178 to: 197}
												by: MessageNotUnderstood) ]
									thatSends: #-
									to: receiver2 ] value
							withMessageText:
								[ | receiver3 |
								receiver3 _ #_coverageTracker29826639_
									cover: (220 to: 236)
									declaredAt: (81 to: 97)
									by: turboAvailableCar.
								#_coverageTracker29826639_
									coverAll:
										{238 to: 276}
									evaluating: [ receiver3 turboAlreadydeActivatedErrorDescription ]
									thatSends: #turboAlreadydeActivatedErrorDescription
									to: receiver3 ] value ]
					thatSends: #should:raise:withMessageText:
					to: receiver4 ] value ]]
		thatSends: #withTurboAvailableCarDo:
		to: receiver5 ] value.! !
!Behavior method!
initializeSized: size treesAt: treesPositions digsAt: digsPositions
	#_coverageTracker29826665_ markAsExecuted.
	#_coverageTracker29826665_
		cover: (71 to: 79)
		declaredAt: (71 to: 79)
		by:
			(boardSize _ #_coverageTracker29826665_
				cover: (84 to: 87)
				declaredAt: (18 to: 21)
				by: size).
	#_coverageTracker29826665_
		cover: (91 to: 97)
		declaredAt: (91 to: 97)
		by:
			(treesAt _ #_coverageTracker29826665_
				cover: (102 to: 115)
				declaredAt: (32 to: 45)
				by: treesPositions).
	#_coverageTracker29826665_
		cover: (119 to: 124)
		declaredAt: (119 to: 124)
		by:
			(digsAt _ #_coverageTracker29826665_
				cover: (129 to: 141)
				declaredAt: (55 to: 67)
				by: digsPositions).! !
!Behavior method!
cavarCapaConcretaConMechaDiamante
	#_coverageTracker29826671_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826671_
		cover: (36 to: 59)
		declaredAt: (36 to: 59)
		by: vecesQueGolpeoCapaActual.
	#_coverageTracker29826671_
		coverAll:
			{61 to: 64}
		evaluating: [ receiver1 even ]
		thatSends: #even
		to: receiver1 ] value.
	#_coverageTracker29826671_
		coverAll:
			{66 to: 72}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ [ | receiver2 |
				receiver2 _ #_coverageTracker29826671_
					coverAll:
						{76 to: 79}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826671_
					coverAll:
						{81 to: 100}
					evaluating: [ receiver2 capaDeSueloInmediata ]
					thatSends: #capaDeSueloInmediata
					to: receiver2 ] value.
				#_coverageTracker29826671_
					coverAll:
						{102 to: 126}
					evaluating: [ receiver3 bajaUnDecimoDeResistencia ]
					thatSends: #bajaUnDecimoDeResistencia
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver6 |
	receiver6 _ [ | receiver5 |
	receiver5 _ #_coverageTracker29826671_
		coverAll:
			{132 to: 135}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826671_
		coverAll:
			{137 to: 156}
		evaluating: [ receiver5 capaDeSueloInmediata ]
		thatSends: #capaDeSueloInmediata
		to: receiver5 ] value.
	#_coverageTracker29826671_
		coverAll:
			{159 to: 172}
		evaluating: [ receiver6 sinResistencia ]
		thatSends: #sinResistencia
		to: receiver6 ] value.
	#_coverageTracker29826671_
		coverAll:
			{174 to: 180}
		evaluating: [ receiver8 ifTrue: [ ^ [ | receiver7 |
				receiver7 _ #_coverageTracker29826671_
					coverAll:
						{185 to: 188}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29826671_
					coverAll:
						{190 to: 213}
					evaluating: [ receiver7 transformarCapaEnArenoso ]
					thatSends: #transformarCapaEnArenoso
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	^ #_coverageTracker29826671_
		cover: (219 to: 242)
		declaredAt: (36 to: 59)
		by: vecesQueGolpeoCapaActual.! !
!Behavior method!
test12CarCannotBeInMoreThanOneSectorAtATime
	| sectors track car |
	#_coverageTracker29826701_ markAsExecuted.
	#_coverageTracker29826701_
		cover: (72 to: 78)
		declaredAt: (49 to: 55)
		by:
			(sectors _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826701_
				coverAll:
					{82 to: 85}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826701_
				coverAll:
					{87 to: 96}
				evaluating: [ receiver1 twoSectors ]
				thatSends: #twoSectors
				to: receiver1 ] value).
	#_coverageTracker29826701_
		cover: (102 to: 106)
		declaredAt: (57 to: 61)
		by:
			(track _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826701_
				coverAll:
					{110 to: 114}
				by: Track.
			#_coverageTracker29826701_
				coverAll:
					{116 to: 127}
				evaluating: [
					receiver2 withSectors:
						(#_coverageTracker29826701_
							cover: (129 to: 135)
							declaredAt: (49 to: 55)
							by: sectors) ]
				thatSends: #withSectors:
				to: receiver2 ] value).
	#_coverageTracker29826701_
		cover: (139 to: 141)
		declaredAt: (63 to: 65)
		by:
			(car _ [ | receiver3 |
			receiver3 _ #_coverageTracker29826701_
				coverAll:
					{145 to: 148}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826701_
				coverAll:
					{150 to: 162}
				evaluating: [ receiver3 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker29826701_
		cover: (167 to: 171)
		declaredAt: (57 to: 61)
		by: track.
	#_coverageTracker29826701_
		coverAll:
			{173 to: 176. 182 to: 184}
		evaluating: [
			receiver5
				put:
					(#_coverageTracker29826701_
						cover: (178 to: 180)
						declaredAt: (63 to: 65)
						by: car)
				at:
					[ | receiver4 |
					receiver4 _ #_coverageTracker29826701_
						coverAll:
							{186 to: 186}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826701_
						coverAll:
							{188 to: 188}
						evaluating: [
							receiver4 *
								(#_coverageTracker29826701_
									coverAll:
										{190 to: 198}
									by: kilometer) ]
						thatSends: #*
						to: receiver4 ] value ]
		thatSends: #put:at:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker29826701_
		cover: (202 to: 206)
		declaredAt: (57 to: 61)
		by: track.
	#_coverageTracker29826701_
		coverAll:
			{208 to: 211. 217 to: 219}
		evaluating: [
			receiver7
				put:
					(#_coverageTracker29826701_
						cover: (213 to: 215)
						declaredAt: (63 to: 65)
						by: car)
				at:
					[ | receiver6 |
					receiver6 _ #_coverageTracker29826701_
						coverAll:
							{221 to: 222}
						byLiteralOrPseudoVariable: 15.
					#_coverageTracker29826701_
						coverAll:
							{224 to: 224}
						evaluating: [
							receiver6 *
								(#_coverageTracker29826701_
									coverAll:
										{226 to: 234}
									by: kilometer) ]
						thatSends: #*
						to: receiver6 ] value ]
		thatSends: #put:at:
		to: receiver7 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29826701_
		coverAll:
			{240 to: 243}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826701_
		coverAll:
			{245 to: 251. 268 to: 274}
		evaluating: [
			receiver10
				assert:
					[ | receiver8 |
					receiver8 _ #_coverageTracker29826701_
						cover: (253 to: 259)
						declaredAt: (49 to: 55)
						by: sectors.
					#_coverageTracker29826701_
						coverAll:
							{261 to: 266}
						evaluating: [ receiver8 second ]
						thatSends: #second
						to: receiver8 ] value
				equals:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29826701_
						cover: (277 to: 281)
						declaredAt: (57 to: 61)
						by: track.
					#_coverageTracker29826701_
						coverAll:
							{283 to: 291}
						evaluating: [
							receiver9 sectorOf:
								(#_coverageTracker29826701_
									cover: (293 to: 295)
									declaredAt: (63 to: 65)
									by: car) ]
						thatSends: #sectorOf:
						to: receiver9 ] value ]
		thatSends: #assert:equals:
		to: receiver10 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29826701_
		coverAll:
			{300 to: 303}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826701_
		coverAll:
			{305 to: 309}
		evaluating: [
			receiver13 deny:
				[ | receiver12 |
				receiver12 _ [ | receiver11 |
				receiver11 _ #_coverageTracker29826701_
					cover: (312 to: 318)
					declaredAt: (49 to: 55)
					by: sectors.
				#_coverageTracker29826701_
					coverAll:
						{320 to: 324}
					evaluating: [ receiver11 first ]
					thatSends: #first
					to: receiver11 ] value.
				#_coverageTracker29826701_
					coverAll:
						{326 to: 334}
					evaluating: [
						receiver12 includes:
							(#_coverageTracker29826701_
								cover: (336 to: 338)
								declaredAt: (63 to: 65)
								by: car) ]
					thatSends: #includes:
					to: receiver12 ] value ]
		thatSends: #deny:
		to: receiver13 ] value.
	[ | receiver16 |
	receiver16 _ #_coverageTracker29826701_
		coverAll:
			{343 to: 346}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826701_
		coverAll:
			{348 to: 354}
		evaluating: [
			receiver16 assert:
				[ | receiver15 |
				receiver15 _ [ | receiver14 |
				receiver14 _ #_coverageTracker29826701_
					cover: (357 to: 363)
					declaredAt: (49 to: 55)
					by: sectors.
				#_coverageTracker29826701_
					coverAll:
						{365 to: 370}
					evaluating: [ receiver14 second ]
					thatSends: #second
					to: receiver14 ] value.
				#_coverageTracker29826701_
					coverAll:
						{372 to: 380}
					evaluating: [
						receiver15 includes:
							(#_coverageTracker29826701_
								cover: (382 to: 384)
								declaredAt: (63 to: 65)
								by: car) ]
					thatSends: #includes:
					to: receiver15 ] value ]
		thatSends: #assert:
		to: receiver16 ] value.! !
!Behavior method!
hasTreeAt: aPosition
	#_coverageTracker29826772_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826772_
		cover: (26 to: 32)
		declaredAt: (26 to: 32)
		by: treesAt.
	#_coverageTracker29826772_
		coverAll:
			{34 to: 42}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker29826772_
					cover: (44 to: 52)
					declaredAt: (12 to: 20)
					by: aPosition) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
noEsPosibleCavarCapaArenosaConMechaDiamante
	#_coverageTracker29826789_ markAsExecuted.
	#_coverageTracker29826789_
		cover: (50 to: 60)
		declaredAt: (50 to: 60)
		by:
			(mechaPuesta _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826789_
				coverAll:
					{65 to: 68}
				by: Rota.
			#_coverageTracker29826789_
				coverAll:
					{70 to: 72}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826789_
		coverAll:
			{81 to: 84}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826789_
		coverAll:
			{86 to: 91}
		evaluating: [
			receiver2 error:
				(#_coverageTracker29826789_
					coverAll:
						{93 to: 103}
					byLiteralOrPseudoVariable: 'Se rompió') ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
test01MovingCrewToTreePlaceDoesNotMove
	#_coverageTracker29826798_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29826798_
		cover: (43 to: 47)
		declaredAt: (43 to: 47)
		by: crew1.
	#_coverageTracker29826798_
		coverAll:
			{49 to: 55}
		evaluating: [
			receiver1 moveTo:
				(#_coverageTracker29826798_
					cover: (57 to: 69)
					declaredAt: (57 to: 69)
					by: treePosition1) ]
		thatSends: #moveTo:
		to: receiver1 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29826798_
		coverAll:
			{75 to: 78}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826798_
		coverAll:
			{80 to: 84}
		evaluating: [
			receiver3 deny:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29826798_
					cover: (87 to: 93)
					declaredAt: (87 to: 93)
					by: island1.
				#_coverageTracker29826798_
					coverAll:
						{95 to: 104}
					evaluating: [
						receiver2 hasCrewAt:
							(#_coverageTracker29826798_
								cover: (106 to: 118)
								declaredAt: (57 to: 69)
								by: treePosition1) ]
					thatSends: #hasCrewAt:
					to: receiver2 ] value ]
		thatSends: #deny:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker29826798_
		coverAll:
			{123 to: 126}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826798_
		coverAll:
			{128 to: 134}
		evaluating: [
			receiver5 assert:
				[ | receiver4 |
				receiver4 _ #_coverageTracker29826798_
					cover: (137 to: 143)
					declaredAt: (87 to: 93)
					by: island1.
				#_coverageTracker29826798_
					coverAll:
						{145 to: 154}
					evaluating: [
						receiver4 hasCrewAt:
							(#_coverageTracker29826798_
								cover: (156 to: 168)
								declaredAt: (156 to: 168)
								by: crewPosition1) ]
					thatSends: #hasCrewAt:
					to: receiver4 ] value ]
		thatSends: #assert:
		to: receiver5 ] value.! !
!Behavior method!
turboNotAllowedWithRainTiresErrorMessage
	#_coverageTracker29826823_ markAsExecuted.
	^ #_coverageTracker29826823_
		coverAll:
			{46 to: 80}
		byLiteralOrPseudoVariable: 'Turbo not allowed with rain tires'.! !
!Behavior method!
hasCrewAt: aPosition
	#_coverageTracker29826825_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826825_
		cover: (26 to: 31)
		declaredAt: (26 to: 31)
		by: crewAt.
	#_coverageTracker29826825_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver1 =
				(#_coverageTracker29826825_
					cover: (35 to: 43)
					declaredAt: (12 to: 20)
					by: aPosition) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
ponerMechaSoft
	#_coverageTracker29826828_ markAsExecuted.
	#_coverageTracker29826828_
		cover: (17 to: 27)
		declaredAt: (17 to: 27)
		by:
			(mechaPuesta _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826828_
				coverAll:
					{32 to: 35}
				by: Soft.
			#_coverageTracker29826828_
				coverAll:
					{37 to: 39}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
on: aTrack running: aNumberOfLaps with: aCollectionOfCars
	#_coverageTracker29826844_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826844_
		coverAll:
			{62 to: 65}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826844_
		coverAll:
			{67 to: 69}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29826844_
		coverAll:
			{71 to: 90. 99 to: 114. 130 to: 137}
		evaluating: [
			receiver2
				initializeWithTrack:
					(#_coverageTracker29826844_
						cover: (92 to: 97)
						declaredAt: (5 to: 10)
						by: aTrack)
				andNumberOfLaps:
					(#_coverageTracker29826844_
						cover: (116 to: 128)
						declaredAt: (21 to: 33)
						by: aNumberOfLaps)
				andCars:
					(#_coverageTracker29826844_
						cover: (139 to: 155)
						declaredAt: (41 to: 57)
						by: aCollectionOfCars) ]
		thatSends: #initializeWithTrack:andNumberOfLaps:andCars:
		to: receiver2 ] value.! !
!Behavior method!
esAptaEnArenosoPara: unaExcavadora
	#_coverageTracker29826849_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826849_
		cover: (43 to: 55)
		declaredAt: (22 to: 34)
		by: unaExcavadora.
	#_coverageTracker29826849_
		coverAll:
			{57 to: 73}
		evaluating: [ receiver1 pasarAProximaCapa ]
		thatSends: #pasarAProximaCapa
		to: receiver1 ] value.! !
!Behavior method!
of: island crewStartsAt: aPosition
	#_coverageTracker29826865_ markAsExecuted.
	#_coverageTracker29826865_
		coverAll:
			{41 to: 44}
		byLiteralOrPseudoVariable: self.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ self.
	#_coverageTracker29826865_
		coverAll:
			{46 to: 48}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29826865_
		coverAll:
			{50 to: 64. 73 to: 85}
		evaluating: [
			receiver2
				initializeWith:
					(#_coverageTracker29826865_
						cover: (66 to: 71)
						declaredAt: (5 to: 10)
						by: island)
				crewStartsAt:
					(#_coverageTracker29826865_
						cover: (87 to: 95)
						declaredAt: (26 to: 34)
						by: aPosition) ]
		thatSends: #initializeWith:crewStartsAt:
		to: receiver2 ] value.! !
!Behavior method!
lengthMustBePositiveErrorDescription
	#_coverageTracker29826874_ markAsExecuted.
	^ #_coverageTracker29826874_
		coverAll:
			{42 to: 66}
		byLiteralOrPseudoVariable: 'Length must be positive'.! !
!Behavior method!
sectorOf: aCar
	#_coverageTracker29826876_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker29826876_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826876_
		coverAll:
			{25 to: 33. 40 to: 46}
		evaluating: [
			receiver3
				sectorOf:
					(#_coverageTracker29826876_
						cover: (35 to: 38)
						declaredAt: (11 to: 14)
						by: aCar)
				ifNone: [
					[ | receiver2 |
					receiver2 _ #_coverageTracker29826876_
						coverAll:
							{50 to: 53}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29826876_
						coverAll:
							{55 to: 60}
						evaluating: [
							receiver2 error:
								[ | receiver1 |
								receiver1 _ #_coverageTracker29826876_
									coverAll:
										{62 to: 65}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker29826876_
									coverAll:
										{67 to: 93}
									evaluating: [ receiver1 carNotFoundErrorDescription ]
									thatSends: #carNotFoundErrorDescription
									to: receiver1 ] value ]
						thatSends: #error:
						to: receiver2 ] value ]]
		thatSends: #sectorOf:ifNone:
		to: receiver3 ] value.! !
!Behavior method!
speedingRatio
	#_coverageTracker29826892_ markAsExecuted.
	^ #_coverageTracker29826892_
		cover: (21 to: 33)
		declaredAt: (21 to: 33)
		by: speedingRatio.! !
!Behavior method!
noEsPosibleCavarCapaConcretaConMechaSoft
	#_coverageTracker29826895_ markAsExecuted.
	#_coverageTracker29826895_
		cover: (44 to: 54)
		declaredAt: (44 to: 54)
		by:
			(mechaPuesta _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826895_
				coverAll:
					{59 to: 62}
				by: Rota.
			#_coverageTracker29826895_
				coverAll:
					{64 to: 66}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826895_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826895_
		coverAll:
			{78 to: 83}
		evaluating: [
			receiver2 error:
				(#_coverageTracker29826895_
					coverAll:
						{85 to: 95}
					byLiteralOrPseudoVariable: 'Se rompió') ]
		thatSends: #error:
		to: receiver2 ] value.! !
!Behavior method!
carNotFoundErrorDescription
	#_coverageTracker29826901_ markAsExecuted.
	^ #_coverageTracker29826901_
		coverAll:
			{33 to: 47}
		byLiteralOrPseudoVariable: 'Car not found'.! !
!Behavior method!
aCaptainIWasMeantToBe
	#_coverageTracker29826901_ markAsExecuted.
	#_coverageTracker29826901_
		cover: (25 to: 28)
		declaredAt: (25 to: 28)
		by:
			(rank _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826901_
				coverAll:
					{33 to: 39}
				by: Captain.
			#_coverageTracker29826901_
				coverAll:
					{41 to: 43}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
terrainAt: aPosition
	#_coverageTracker29826911_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29826911_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826911_
		coverAll:
			{30 to: 39}
		evaluating: [
			receiver1 hasTreeAt:
				(#_coverageTracker29826911_
					cover: (41 to: 49)
					declaredAt: (12 to: 20)
					by: aPosition) ]
		thatSends: #hasTreeAt:
		to: receiver1 ] value.
	#_coverageTracker29826911_
		coverAll:
			{53 to: 59}
		evaluating: [ receiver3 ifTrue: [ ^ [ | receiver2 |
				receiver2 _ #_coverageTracker29826911_
					coverAll:
						{63 to: 66}
					by: Tree.
				#_coverageTracker29826911_
					coverAll:
						{68 to: 70}
					evaluating: [ receiver2 new ]
					thatSends: #new
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver6 |
	receiver6 _ [ | receiver4 |
	receiver4 _ #_coverageTracker29826911_
		coverAll:
			{77 to: 80}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826911_
		coverAll:
			{82 to: 94}
		evaluating: [
			receiver4 isDiggableAt:
				(#_coverageTracker29826911_
					cover: (96 to: 104)
					declaredAt: (12 to: 20)
					by: aPosition) ]
		thatSends: #isDiggableAt:
		to: receiver4 ] value.
	#_coverageTracker29826911_
		coverAll:
			{108 to: 114}
		evaluating: [ receiver6 ifTrue: [ ^ [ | receiver5 |
				receiver5 _ #_coverageTracker29826911_
					coverAll:
						{118 to: 125}
					by: Diggable.
				#_coverageTracker29826911_
					coverAll:
						{127 to: 129}
					evaluating: [ receiver5 new ]
					thatSends: #new
					to: receiver5 ] value ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.
	^ [ | receiver7 |
	receiver7 _ #_coverageTracker29826911_
		coverAll:
			{136 to: 140}
		by: Empty.
	#_coverageTracker29826911_
		coverAll:
			{142 to: 144}
		evaluating: [ receiver7 new ]
		thatSends: #new
		to: receiver7 ] value.! !
!Behavior method!
test02MovingCrewToTreePlaceFilibusteroRemovesTree
	#_coverageTracker29826932_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826932_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826932_
		coverAll:
			{58 to: 62}
		evaluating: [
			receiver2 deny:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29826932_
					cover: (65 to: 71)
					declaredAt: (65 to: 71)
					by: island1.
				#_coverageTracker29826932_
					coverAll:
						{73 to: 82}
					evaluating: [
						receiver1 isEmptyAt:
							(#_coverageTracker29826932_
								cover: (84 to: 96)
								declaredAt: (84 to: 96)
								by: treePosition1) ]
					thatSends: #isEmptyAt:
					to: receiver1 ] value ]
		thatSends: #deny:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29826932_
		cover: (106 to: 110)
		declaredAt: (106 to: 110)
		by: crew1.
	#_coverageTracker29826932_
		coverAll:
			{112 to: 118}
		evaluating: [
			receiver3 moveTo:
				(#_coverageTracker29826932_
					cover: (120 to: 132)
					declaredAt: (84 to: 96)
					by: treePosition1) ]
		thatSends: #moveTo:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker29826932_
		coverAll:
			{137 to: 140}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826932_
		coverAll:
			{142 to: 148}
		evaluating: [
			receiver5 assert:
				[ | receiver4 |
				receiver4 _ #_coverageTracker29826932_
					cover: (151 to: 157)
					declaredAt: (65 to: 71)
					by: island1.
				#_coverageTracker29826932_
					coverAll:
						{159 to: 168}
					evaluating: [
						receiver4 isEmptyAt:
							(#_coverageTracker29826932_
								cover: (170 to: 182)
								declaredAt: (84 to: 96)
								by: treePosition1) ]
					thatSends: #isEmptyAt:
					to: receiver4 ] value ]
		thatSends: #assert:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker29826932_
		coverAll:
			{189 to: 192}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826932_
		coverAll:
			{194 to: 198}
		evaluating: [
			receiver7 deny:
				[ | receiver6 |
				receiver6 _ #_coverageTracker29826932_
					cover: (201 to: 207)
					declaredAt: (65 to: 71)
					by: island1.
				#_coverageTracker29826932_
					coverAll:
						{209 to: 218}
					evaluating: [
						receiver6 hasCrewAt:
							(#_coverageTracker29826932_
								cover: (220 to: 232)
								declaredAt: (84 to: 96)
								by: treePosition1) ]
					thatSends: #hasCrewAt:
					to: receiver6 ] value ]
		thatSends: #deny:
		to: receiver7 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker29826932_
		coverAll:
			{237 to: 240}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826932_
		coverAll:
			{242 to: 248}
		evaluating: [
			receiver9 assert:
				[ | receiver8 |
				receiver8 _ #_coverageTracker29826932_
					cover: (251 to: 257)
					declaredAt: (65 to: 71)
					by: island1.
				#_coverageTracker29826932_
					coverAll:
						{259 to: 268}
					evaluating: [
						receiver8 hasCrewAt:
							(#_coverageTracker29826932_
								cover: (270 to: 282)
								declaredAt: (270 to: 282)
								by: crewPosition1) ]
					thatSends: #hasCrewAt:
					to: receiver8 ] value ]
		thatSends: #assert:
		to: receiver9 ] value.! !
!Behavior method!
remove: aCar
	| currentSector |
	#_coverageTracker29826950_ markAsExecuted.
	#_coverageTracker29826950_
		cover: (38 to: 50)
		declaredAt: (19 to: 31)
		by:
			(currentSector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29826950_
				coverAll:
					{54 to: 57}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826950_
				coverAll:
					{59 to: 67. 74 to: 80}
				evaluating: [
					receiver1
						sectorOf:
							(#_coverageTracker29826950_
								cover: (69 to: 72)
								declaredAt: (9 to: 12)
								by: aCar)
						ifNone: [ ^ #_coverageTracker29826950_
								coverAll:
									{86 to: 89}
								byLiteralOrPseudoVariable: self ]]
				thatSends: #sectorOf:ifNone:
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker29826950_
		cover: (95 to: 107)
		declaredAt: (19 to: 31)
		by: currentSector.
	#_coverageTracker29826950_
		coverAll:
			{109 to: 115}
		evaluating: [
			receiver2 remove:
				(#_coverageTracker29826950_
					cover: (117 to: 120)
					declaredAt: (9 to: 12)
					by: aCar) ]
		thatSends: #remove:
		to: receiver2 ] value.! !
!Behavior method!
carAtPosition: positionOfDriver
	#_coverageTracker29826960_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29826960_
		cover: (36 to: 39)
		declaredAt: (36 to: 39)
		by: cars.
	#_coverageTracker29826960_
		coverAll:
			{41 to: 51}
		evaluating: [
			receiver1 keyAtValue:
				(#_coverageTracker29826960_
					cover: (53 to: 68)
					declaredAt: (16 to: 31)
					by: positionOfDriver) ]
		thatSends: #keyAtValue:
		to: receiver1 ] value.! !
!Behavior method!
test14TwoCarsCanBeAtTheSameDistanceFromStart
	| grandPrix hamilton verstappen |
	#_coverageTracker29826977_ markAsExecuted.
	#_coverageTracker29826977_
		cover: (85 to: 93)
		declaredAt: (50 to: 58)
		by:
			(grandPrix _ [ | receiver2 |
			receiver2 _ #_coverageTracker29826977_
				coverAll:
					{97 to: 105}
				by: GrandPrix.
			#_coverageTracker29826977_
				coverAll:
					{110 to: 112. 136 to: 143}
				evaluating: [
					receiver2
						on:
							[ | receiver1 |
							receiver1 _ #_coverageTracker29826977_
								coverAll:
									{114 to: 117}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29826977_
								coverAll:
									{119 to: 132}
								evaluating: [ receiver1 oneSectorTrack ]
								thatSends: #oneSectorTrack
								to: receiver1 ] value
						running:
							(#_coverageTracker29826977_
								coverAll:
									{145 to: 147}
								byLiteralOrPseudoVariable: 100) ]
				thatSends: #on:running:
				to: receiver2 ] value).
	#_coverageTracker29826977_
		cover: (153 to: 162)
		declaredAt: (69 to: 78)
		by:
			(verstappen _ [ | receiver3 |
			receiver3 _ #_coverageTracker29826977_
				coverAll:
					{166 to: 169}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826977_
				coverAll:
					{171 to: 183}
				evaluating: [ receiver3 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver3 ] value).
	#_coverageTracker29826977_
		cover: (187 to: 194)
		declaredAt: (60 to: 67)
		by:
			(hamilton _ [ | receiver4 |
			receiver4 _ #_coverageTracker29826977_
				coverAll:
					{198 to: 201}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29826977_
				coverAll:
					{203 to: 213}
				evaluating: [ receiver4 hamiltonCar ]
				thatSends: #hamiltonCar
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29826977_
		cover: (220 to: 228)
		declaredAt: (50 to: 58)
		by: grandPrix.
	#_coverageTracker29826977_
		coverAll:
			{230 to: 233. 246 to: 248}
		evaluating: [
			receiver6
				put:
					(#_coverageTracker29826977_
						cover: (235 to: 244)
						declaredAt: (69 to: 78)
						by: verstappen)
				at:
					[ | receiver5 |
					receiver5 _ #_coverageTracker29826977_
						coverAll:
							{250 to: 250}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826977_
						coverAll:
							{252 to: 252}
						evaluating: [
							receiver5 *
								(#_coverageTracker29826977_
									coverAll:
										{254 to: 262}
									by: kilometer) ]
						thatSends: #*
						to: receiver5 ] value ]
		thatSends: #put:at:
		to: receiver6 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29826977_
		cover: (266 to: 274)
		declaredAt: (50 to: 58)
		by: grandPrix.
	#_coverageTracker29826977_
		coverAll:
			{276 to: 279. 290 to: 292}
		evaluating: [
			receiver8
				put:
					(#_coverageTracker29826977_
						cover: (281 to: 288)
						declaredAt: (60 to: 67)
						by: hamilton)
				at:
					[ | receiver7 |
					receiver7 _ #_coverageTracker29826977_
						coverAll:
							{294 to: 294}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826977_
						coverAll:
							{296 to: 296}
						evaluating: [
							receiver7 *
								(#_coverageTracker29826977_
									coverAll:
										{298 to: 306}
									by: kilometer) ]
						thatSends: #*
						to: receiver7 ] value ]
		thatSends: #put:at:
		to: receiver8 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29826977_
		coverAll:
			{312 to: 315}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826977_
		coverAll:
			{317 to: 323. 339 to: 345}
		evaluating: [
			receiver11
				assert:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29826977_
						coverAll:
							{325 to: 325}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826977_
						coverAll:
							{327 to: 327}
						evaluating: [
							receiver9 *
								(#_coverageTracker29826977_
									coverAll:
										{329 to: 337}
									by: kilometer) ]
						thatSends: #*
						to: receiver9 ] value
				equals:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29826977_
						cover: (348 to: 356)
						declaredAt: (50 to: 58)
						by: grandPrix.
					#_coverageTracker29826977_
						coverAll:
							{358 to: 368}
						evaluating: [
							receiver10 locationOf:
								(#_coverageTracker29826977_
									cover: (370 to: 379)
									declaredAt: (69 to: 78)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver10 ] value ]
		thatSends: #assert:equals:
		to: receiver11 ] value.
	[ | receiver14 |
	receiver14 _ #_coverageTracker29826977_
		coverAll:
			{385 to: 388}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29826977_
		coverAll:
			{390 to: 396. 413 to: 419}
		evaluating: [
			receiver14
				assert:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29826977_
						coverAll:
							{399 to: 399}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29826977_
						coverAll:
							{401 to: 401}
						evaluating: [
							receiver12 *
								(#_coverageTracker29826977_
									coverAll:
										{403 to: 411}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value
				equals:
					[ | receiver13 |
					receiver13 _ #_coverageTracker29826977_
						cover: (422 to: 430)
						declaredAt: (50 to: 58)
						by: grandPrix.
					#_coverageTracker29826977_
						coverAll:
							{432 to: 442}
						evaluating: [
							receiver13 locationOf:
								(#_coverageTracker29826977_
									cover: (444 to: 451)
									declaredAt: (60 to: 67)
									by: hamilton) ]
						thatSends: #locationOf:
						to: receiver13 ] value ]
		thatSends: #assert:equals:
		to: receiver14 ] value.! !
!Behavior method!
initializeWith: anIsland pirates: aPirates at: aPosition
	#_coverageTracker29827023_ markAsExecuted.
	#_coverageTracker29827023_
		cover: (60 to: 65)
		declaredAt: (60 to: 65)
		by:
			(island _ #_coverageTracker29827023_
				cover: (70 to: 77)
				declaredAt: (17 to: 24)
				by: anIsland).
	#_coverageTracker29827023_
		cover: (81 to: 87)
		declaredAt: (81 to: 87)
		by:
			(pirates _ #_coverageTracker29827023_
				cover: (92 to: 99)
				declaredAt: (35 to: 42)
				by: aPirates).
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827023_
		cover: (105 to: 110)
		declaredAt: (60 to: 65)
		by: island.
	#_coverageTracker29827023_
		coverAll:
			{112 to: 118}
		evaluating: [
			receiver1 crewAt:
				(#_coverageTracker29827023_
					cover: (120 to: 128)
					declaredAt: (48 to: 56)
					by: aPosition) ]
		thatSends: #crewAt:
		to: receiver1 ] value.! !
!Behavior method!
ponerMechaDiamante
	#_coverageTracker29827039_ markAsExecuted.
	#_coverageTracker29827039_
		cover: (21 to: 31)
		declaredAt: (21 to: 31)
		by:
			(mechaPuesta _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827039_
				coverAll:
					{36 to: 43}
				by: Diamante.
			#_coverageTracker29827039_
				coverAll:
					{45 to: 47}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
assertNotEmpty: sectors
	#_coverageTracker29827042_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827042_
		cover: (29 to: 35)
		declaredAt: (17 to: 23)
		by: sectors.
	#_coverageTracker29827042_
		coverAll:
			{37 to: 43}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker29827042_
		coverAll:
			{45 to: 51}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker29827042_
					coverAll:
						{55 to: 58}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29827042_
					coverAll:
						{60 to: 65}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker29827042_
								coverAll:
									{67 to: 70}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29827042_
								coverAll:
									{72 to: 102}
								evaluating: [ receiver2 mustHaveSectorsErrorDescription ]
								thatSends: #mustHaveSectorsErrorDescription
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.! !
!Behavior method!
scan
	#_coverageTracker29827068_ markAsExecuted.
	^ #_coverageTracker29827068_
		cover: (16 to: 20)
		declaredAt: (16 to: 20)
		by: valor.! !
!Behavior method!
verstappenCar
	#_coverageTracker29827070_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827070_
		coverAll:
			{19 to: 31}
		by: FormulaOneCar.
	#_coverageTracker29827070_
		coverAll:
			{33 to: 41}
		evaluating: [
			receiver1 drivenBy:
				(#_coverageTracker29827070_
					coverAll:
						{43 to: 53}
					byLiteralOrPseudoVariable: #Verstappen) ]
		thatSends: #drivenBy:
		to: receiver1 ] value.! !
!Behavior method!
test04CarCannotActivateTurboWhenNoCarAhead
	| schumacher hamilton sector |
	#_coverageTracker29827089_ markAsExecuted.
	#_coverageTracker29827089_
		cover: (80 to: 85)
		declaredAt: (68 to: 73)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827089_
				coverAll:
					{89 to: 92}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827089_
				coverAll:
					{94 to: 120}
				evaluating: [ receiver1 twentyKilometersTurboSector ]
				thatSends: #twentyKilometersTurboSector
				to: receiver1 ] value).
	#_coverageTracker29827089_
		cover: (126 to: 135)
		declaredAt: (48 to: 57)
		by:
			(schumacher _ [ | receiver2 |
			receiver2 _ #_coverageTracker29827089_
				coverAll:
					{139 to: 142}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827089_
				coverAll:
					{144 to: 156}
				evaluating: [ receiver2 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver2 ] value).
	#_coverageTracker29827089_
		cover: (160 to: 167)
		declaredAt: (59 to: 66)
		by:
			(hamilton _ [ | receiver3 |
			receiver3 _ #_coverageTracker29827089_
				coverAll:
					{171 to: 174}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827089_
				coverAll:
					{176 to: 186}
				evaluating: [ receiver3 hamiltonCar ]
				thatSends: #hamiltonCar
				to: receiver3 ] value).
	[ | receiver5 |
	receiver5 _ #_coverageTracker29827089_
		cover: (192 to: 197)
		declaredAt: (68 to: 73)
		by: sector.
	#_coverageTracker29827089_
		coverAll:
			{199 to: 202. 215 to: 217}
		evaluating: [
			receiver5
				put:
					(#_coverageTracker29827089_
						cover: (204 to: 213)
						declaredAt: (48 to: 57)
						by: schumacher)
				at:
					[ | receiver4 |
					receiver4 _ #_coverageTracker29827089_
						coverAll:
							{219 to: 220}
						byLiteralOrPseudoVariable: 12.
					#_coverageTracker29827089_
						coverAll:
							{222 to: 222}
						evaluating: [
							receiver4 *
								(#_coverageTracker29827089_
									coverAll:
										{224 to: 232}
									by: kilometer) ]
						thatSends: #*
						to: receiver4 ] value ]
		thatSends: #put:at:
		to: receiver5 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker29827089_
		cover: (236 to: 241)
		declaredAt: (68 to: 73)
		by: sector.
	#_coverageTracker29827089_
		coverAll:
			{243 to: 246. 257 to: 259}
		evaluating: [
			receiver7
				put:
					(#_coverageTracker29827089_
						cover: (248 to: 255)
						declaredAt: (59 to: 66)
						by: hamilton)
				at:
					[ | receiver6 |
					receiver6 _ #_coverageTracker29827089_
						coverAll:
							{261 to: 262}
						byLiteralOrPseudoVariable: 13.
					#_coverageTracker29827089_
						coverAll:
							{264 to: 264}
						evaluating: [
							receiver6 *
								(#_coverageTracker29827089_
									coverAll:
										{266 to: 274}
									by: kilometer) ]
						thatSends: #*
						to: receiver6 ] value ]
		thatSends: #put:at:
		to: receiver7 ] value.
	[ | receiver15 |
	receiver15 _ #_coverageTracker29827089_
		coverAll:
			{280 to: 283}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827089_
		coverAll:
			{288 to: 294. 324 to: 329. 362 to: 377}
		evaluating: [
			receiver15
				should: [
					[ | receiver8 |
					receiver8 _ #_coverageTracker29827089_
						cover: (298 to: 305)
						declaredAt: (59 to: 66)
						by: hamilton.
					#_coverageTracker29827089_
						coverAll:
							{307 to: 319}
						evaluating: [ receiver8 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver8 ] value ]
				raise:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29827089_
						coverAll:
							{331 to: 335}
						by: Error.
					#_coverageTracker29827089_
						coverAll:
							{337 to: 337}
						evaluating: [
							receiver9 -
								(#_coverageTracker29827089_
									coverAll:
										{339 to: 358}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver9 ] value
				withExceptionDo: [ :exception |
					[ | receiver12 |
					receiver12 _ #_coverageTracker29827089_
						coverAll:
							{396 to: 399}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29827089_
						coverAll:
							{401 to: 407. 466 to: 472}
						evaluating: [
							receiver12
								assert:
									[ | receiver10 |
									receiver10 _ #_coverageTracker29827089_
										coverAll:
											{409 to: 414}
										by: Sector.
									#_coverageTracker29827089_
										coverAll:
											{416 to: 464}
										evaluating: [ receiver10 cannotActivateTurboWhenNoCarAheadErrorDescription ]
										thatSends: #cannotActivateTurboWhenNoCarAheadErrorDescription
										to: receiver10 ] value
								equals:
									[ | receiver11 |
									receiver11 _ #_coverageTracker29827089_
										cover: (474 to: 482)
										declaredAt: (381 to: 389)
										by: exception.
									#_coverageTracker29827089_
										coverAll:
											{484 to: 494}
										evaluating: [ receiver11 messageText ]
										thatSends: #messageText
										to: receiver11 ] value ]
						thatSends: #assert:equals:
						to: receiver12 ] value.
					[ | receiver14 |
					receiver14 _ #_coverageTracker29827089_
						coverAll:
							{501 to: 504}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29827089_
						coverAll:
							{506 to: 510}
						evaluating: [
							receiver14 deny:
								[ | receiver13 |
								receiver13 _ #_coverageTracker29827089_
									cover: (512 to: 519)
									declaredAt: (59 to: 66)
									by: hamilton.
								#_coverageTracker29827089_
									coverAll:
										{521 to: 536}
									evaluating: [ receiver13 isTurboActivated ]
									thatSends: #isTurboActivated
									to: receiver13 ] value ]
						thatSends: #deny:
						to: receiver14 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver15 ] value.! !
!Behavior method!
length
	#_coverageTracker29827142_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827142_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: track.
	#_coverageTracker29827142_
		coverAll:
			{18 to: 23}
		evaluating: [ receiver1 length ]
		thatSends: #length
		to: receiver1 ] value.
	#_coverageTracker29827142_
		coverAll:
			{25 to: 25}
		evaluating: [
			receiver2 *
				(#_coverageTracker29827142_
					cover: (27 to: 38)
					declaredAt: (27 to: 38)
					by: numberOfLaps) ]
		thatSends: #*
		to: receiver2 ] value.! !
!Behavior method!
test23AfterThridTurbo_TurboIsExhausted
	#_coverageTracker29827149_ markAsExecuted.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29827149_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827149_
		coverAll:
			{50 to: 63. 91 to: 96}
		evaluating: [
			receiver10
				assertSpeedIs:
					[ | receiver2 |
					receiver2 _ [ | receiver1 |
					receiver1 _ #_coverageTracker29827149_
						coverAll:
							{65 to: 67}
						byLiteralOrPseudoVariable: 100.
					#_coverageTracker29827149_
						coverAll:
							{69 to: 69}
						evaluating: [
							receiver1 *
								(#_coverageTracker29827149_
									coverAll:
										{71 to: 79}
									by: kilometer) ]
						thatSends: #*
						to: receiver1 ] value.
					#_coverageTracker29827149_
						coverAll:
							{81 to: 81}
						evaluating: [
							receiver2 /
								(#_coverageTracker29827149_
									coverAll:
										{83 to: 86}
									by: hour) ]
						thatSends: #/
						to: receiver2 ] value
				after: [ :turboAvailableCar |
					[ | cascadeReceiver |
					cascadeReceiver _ #_coverageTracker29827149_
						cover: (121 to: 137)
						declaredAt: (101 to: 117)
						by: turboAvailableCar.
					[ | receiver3 |
					receiver3 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{139 to: 151}
						evaluating: [ receiver3 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver3 ] value.
					[ | receiver4 |
					receiver4 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{154 to: 168}
						evaluating: [ receiver4 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver4 ] value.
					[ | receiver5 |
					receiver5 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{171 to: 183}
						evaluating: [ receiver5 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver5 ] value.
					[ | receiver6 |
					receiver6 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{186 to: 200}
						evaluating: [ receiver6 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver6 ] value.
					[ | receiver7 |
					receiver7 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{203 to: 215}
						evaluating: [ receiver7 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver7 ] value.
					[ | receiver8 |
					receiver8 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{218 to: 232}
						evaluating: [ receiver8 deactivateTurbo ]
						thatSends: #deactivateTurbo
						to: receiver8 ] value.
					[ | receiver9 |
					receiver9 _ cascadeReceiver.
					#_coverageTracker29827149_
						coverAll:
							{235 to: 247}
						evaluating: [ receiver9 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver9 ] value ] value ]]
		thatSends: #assertSpeedIs:after:
		to: receiver10 ] value.! !
!Behavior method!
tierra
	#_coverageTracker29827174_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827174_
		coverAll:
			{11 to: 16}
		by: Tierra.
	#_coverageTracker29827174_
		coverAll:
			{18 to: 20}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29827174_
		coverAll:
			{22 to: 31}
		evaluating: [ receiver2 initialize ]
		thatSends: #initialize
		to: receiver2 ] value.! !
!Behavior method!
canMoveFilibustero: aFilibustero to: aPosition at: island
	#_coverageTracker29827180_ markAsExecuted.
	^ #_coverageTracker29827180_
		coverAll:
			{64 to: 67}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
locationOf: aCar
	#_coverageTracker29827189_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827189_
		cover: (22 to: 25)
		declaredAt: (13 to: 16)
		by: aCar.
	#_coverageTracker29827189_
		coverAll:
			{27 to: 42}
		evaluating: [ receiver1 traveledDistance ]
		thatSends: #traveledDistance
		to: receiver1 ] value.! !
!Behavior method!
initializeWithSectors: aSectors
	#_coverageTracker29827191_ markAsExecuted.
	#_coverageTracker29827191_
		cover: (35 to: 41)
		declaredAt: (35 to: 41)
		by:
			(sectors _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827191_
				cover: (45 to: 52)
				declaredAt: (24 to: 31)
				by: aSectors.
			#_coverageTracker29827191_
				coverAll:
					{54 to: 57}
				evaluating: [ receiver1 copy ]
				thatSends: #copy
				to: receiver1 ] value).! !
!Behavior method!
activeTurboWhenDeactivated
	#_coverageTracker29827206_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827206_
		cover: (31 to: 43)
		declaredAt: (31 to: 43)
		by: currentSector.
	#_coverageTracker29827206_
		coverAll:
			{45 to: 60}
		evaluating: [
			receiver1 activateTurboTo:
				(#_coverageTracker29827206_
					coverAll:
						{62 to: 65}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #activateTurboTo:
		to: receiver1 ] value.! !
!Behavior method!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure
	| sortedPositions carToActivateTurboToPosition |
	#_coverageTracker29827211_ markAsExecuted.
	#_coverageTracker29827211_
		cover: (124 to: 151)
		declaredAt: (90 to: 117)
		by:
			(carToActivateTurboToPosition _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827211_
				cover: (155 to: 158)
				declaredAt: (155 to: 158)
				by: cars.
			#_coverageTracker29827211_
				coverAll:
					{160 to: 162}
				evaluating: [
					receiver1 at:
						(#_coverageTracker29827211_
							cover: (164 to: 182)
							declaredAt: (23 to: 41)
							by: aCarToActiveTurboTo) ]
				thatSends: #at:
				to: receiver1 ] value).
	#_coverageTracker29827211_
		cover: (186 to: 200)
		declaredAt: (74 to: 88)
		by:
			(sortedPositions _ [ | cascadeReceiver |
			cascadeReceiver _ [ | receiver2 |
			receiver2 _ #_coverageTracker29827211_
				cover: (204 to: 207)
				declaredAt: (155 to: 158)
				by: cars.
			#_coverageTracker29827211_
				coverAll:
					{209 to: 226}
				evaluating: [ receiver2 asSortedCollection ]
				thatSends: #asSortedCollection
				to: receiver2 ] value.
			[ | receiver3 |
			receiver3 _ cascadeReceiver.
			#_coverageTracker29827211_
				coverAll:
					{228 to: 234}
				evaluating: [
					receiver3 remove:
						(#_coverageTracker29827211_
							cover: (236 to: 263)
							declaredAt: (90 to: 117)
							by: carToActivateTurboToPosition) ]
				thatSends: #remove:
				to: receiver3 ] value.
			[ | receiver4 |
			receiver4 _ cascadeReceiver.
			#_coverageTracker29827211_
				coverAll:
					{266 to: 273}
				evaluating: [ receiver4 yourself ]
				thatSends: #yourself
				to: receiver4 ] value ] value).
	^ [ | receiver6 |
	receiver6 _ #_coverageTracker29827211_
		cover: (282 to: 296)
		declaredAt: (74 to: 88)
		by: sortedPositions.
	#_coverageTracker29827211_
		coverAll:
			{301 to: 307. 368 to: 374}
		evaluating: [
			receiver6
				detect: [ :aPosition |
					[ | receiver5 |
					receiver5 _ #_coverageTracker29827211_
						cover: (323 to: 331)
						declaredAt: (311 to: 319)
						by: aPosition.
					#_coverageTracker29827211_
						coverAll:
							{333 to: 333}
						evaluating: [
							receiver5 >
								(#_coverageTracker29827211_
									cover: (335 to: 362)
									declaredAt: (90 to: 117)
									by: carToActivateTurboToPosition) ]
						thatSends: #>
						to: receiver5 ] value ]
				ifNone:
					(#_coverageTracker29827211_
						cover: (376 to: 393)
						declaredAt: (51 to: 68)
						by: alternativeClosure) ]
		thatSends: #detect:ifNone:
		to: receiver6 ] value.! !
!Behavior method!
deactiveOn: aFormulaOneCar
	#_coverageTracker29827239_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827239_
		cover: (33 to: 46)
		declaredAt: (13 to: 26)
		by: aFormulaOneCar.
	#_coverageTracker29827239_
		coverAll:
			{48 to: 75}
		evaluating: [ receiver1 deactiveTurboWhenDeactivated ]
		thatSends: #deactiveTurboWhenDeactivated
		to: receiver1 ] value.! !
!Behavior method!
remove: aCar
	#_coverageTracker29827267_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827267_
		cover: (17 to: 20)
		declaredAt: (17 to: 20)
		by: cars.
	#_coverageTracker29827267_
		coverAll:
			{22 to: 31. 38 to: 46}
		evaluating: [
			receiver1
				removeKey:
					(#_coverageTracker29827267_
						cover: (33 to: 36)
						declaredAt: (9 to: 12)
						by: aCar)
				ifAbsent: [ ]]
		thatSends: #removeKey:ifAbsent:
		to: receiver1 ] value.! !
!Behavior method!
test17GrandPrixKnowsSectorOfCar
	| grandPrix verstappen sectors |
	#_coverageTracker29827294_ markAsExecuted.
	#_coverageTracker29827294_
		cover: (71 to: 80)
		declaredAt: (47 to: 56)
		by:
			(verstappen _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827294_
				coverAll:
					{84 to: 87}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827294_
				coverAll:
					{89 to: 101}
				evaluating: [ receiver1 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver1 ] value).
	#_coverageTracker29827294_
		cover: (107 to: 113)
		declaredAt: (58 to: 64)
		by:
			(sectors _ [ | receiver2 |
			receiver2 _ #_coverageTracker29827294_
				coverAll:
					{117 to: 120}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827294_
				coverAll:
					{122 to: 131}
				evaluating: [ receiver2 twoSectors ]
				thatSends: #twoSectors
				to: receiver2 ] value).
	#_coverageTracker29827294_
		cover: (137 to: 145)
		declaredAt: (37 to: 45)
		by:
			(grandPrix _ [ | receiver5 |
			receiver5 _ #_coverageTracker29827294_
				coverAll:
					{149 to: 157}
				by: GrandPrix.
			#_coverageTracker29827294_
				coverAll:
					{162 to: 164. 197 to: 204. 212 to: 216}
				evaluating: [
					receiver5
						on:
							[ | receiver3 |
							receiver3 _ #_coverageTracker29827294_
								coverAll:
									{167 to: 171}
								by: Track.
							#_coverageTracker29827294_
								coverAll:
									{173 to: 184}
								evaluating: [
									receiver3 withSectors:
										(#_coverageTracker29827294_
											cover: (186 to: 192)
											declaredAt: (58 to: 64)
											by: sectors) ]
								thatSends: #withSectors:
								to: receiver3 ] value
						running:
							(#_coverageTracker29827294_
								coverAll:
									{206 to: 208}
								byLiteralOrPseudoVariable: 100)
						with:
							[ | receiver4 |
							receiver4 _ #_coverageTracker29827294_
								coverAll:
									{219 to: 221}
								by: Set.
							#_coverageTracker29827294_
								coverAll:
									{223 to: 227}
								evaluating: [
									receiver4 with:
										(#_coverageTracker29827294_
											cover: (229 to: 238)
											declaredAt: (47 to: 56)
											by: verstappen) ]
								thatSends: #with:
								to: receiver4 ] value ]
				thatSends: #on:running:with:
				to: receiver5 ] value).
	[ | receiver7 |
	receiver7 _ #_coverageTracker29827294_
		cover: (246 to: 254)
		declaredAt: (37 to: 45)
		by: grandPrix.
	#_coverageTracker29827294_
		coverAll:
			{256 to: 259. 272 to: 274}
		evaluating: [
			receiver7
				put:
					(#_coverageTracker29827294_
						cover: (261 to: 270)
						declaredAt: (47 to: 56)
						by: verstappen)
				at:
					[ | receiver6 |
					receiver6 _ #_coverageTracker29827294_
						coverAll:
							{276 to: 276}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29827294_
						coverAll:
							{278 to: 278}
						evaluating: [
							receiver6 *
								(#_coverageTracker29827294_
									coverAll:
										{280 to: 288}
									by: kilometer) ]
						thatSends: #*
						to: receiver6 ] value ]
		thatSends: #put:at:
		to: receiver7 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29827294_
		coverAll:
			{294 to: 297}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827294_
		coverAll:
			{299 to: 305. 321 to: 327}
		evaluating: [
			receiver10
				assert:
					[ | receiver8 |
					receiver8 _ #_coverageTracker29827294_
						coverAll:
							{307 to: 307}
						byLiteralOrPseudoVariable: 5.
					#_coverageTracker29827294_
						coverAll:
							{309 to: 309}
						evaluating: [
							receiver8 *
								(#_coverageTracker29827294_
									coverAll:
										{311 to: 319}
									by: kilometer) ]
						thatSends: #*
						to: receiver8 ] value
				equals:
					[ | receiver9 |
					receiver9 _ #_coverageTracker29827294_
						cover: (330 to: 338)
						declaredAt: (37 to: 45)
						by: grandPrix.
					#_coverageTracker29827294_
						coverAll:
							{340 to: 350}
						evaluating: [
							receiver9 locationOf:
								(#_coverageTracker29827294_
									cover: (352 to: 361)
									declaredAt: (47 to: 56)
									by: verstappen) ]
						thatSends: #locationOf:
						to: receiver9 ] value ]
		thatSends: #assert:equals:
		to: receiver10 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29827294_
		coverAll:
			{367 to: 370}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827294_
		coverAll:
			{372 to: 378. 394 to: 400}
		evaluating: [
			receiver13
				assert:
					[ | receiver11 |
					receiver11 _ #_coverageTracker29827294_
						cover: (380 to: 386)
						declaredAt: (58 to: 64)
						by: sectors.
					#_coverageTracker29827294_
						coverAll:
							{388 to: 392}
						evaluating: [ receiver11 first ]
						thatSends: #first
						to: receiver11 ] value
				equals:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29827294_
						cover: (403 to: 411)
						declaredAt: (37 to: 45)
						by: grandPrix.
					#_coverageTracker29827294_
						coverAll:
							{413 to: 421}
						evaluating: [
							receiver12 sectorOf:
								(#_coverageTracker29827294_
									cover: (423 to: 432)
									declaredAt: (47 to: 56)
									by: verstappen) ]
						thatSends: #sectorOf:
						to: receiver12 ] value ]
		thatSends: #assert:equals:
		to: receiver13 ] value.! !
!Behavior method!
bucanero: aBucanero buryTreasureAt: aPosition at: island
	#_coverageTracker29827344_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827344_
		cover: (64 to: 69)
		declaredAt: (51 to: 56)
		by: island.
	#_coverageTracker29827344_
		coverAll:
			{71 to: 88}
		evaluating: [
			receiver1 receiveTreasureAt:
				(#_coverageTracker29827344_
					cover: (90 to: 98)
					declaredAt: (37 to: 45)
					by: aPosition) ]
		thatSends: #receiveTreasureAt:
		to: receiver1 ] value.! !
!Behavior method!
speeding: aSpeedingRatio next: aNext
	#_coverageTracker29827359_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827359_
		coverAll:
			{43 to: 46}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827359_
		coverAll:
			{48 to: 50}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29827359_
		coverAll:
			{52 to: 70. 87 to: 91}
		evaluating: [
			receiver2
				initializeSpeeding:
					(#_coverageTracker29827359_
						cover: (72 to: 85)
						declaredAt: (11 to: 24)
						by: aSpeedingRatio)
				next:
					(#_coverageTracker29827359_
						cover: (93 to: 97)
						declaredAt: (32 to: 36)
						by: aNext) ]
		thatSends: #initializeSpeeding:next:
		to: receiver2 ] value.! !
!Behavior method!
at: anIsland composedBy: aCrew at: aPosition
	#_coverageTracker29827365_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827365_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827365_
		coverAll:
			{55 to: 57}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker29827365_
		coverAll:
			{59 to: 73. 84 to: 91. 99 to: 101}
		evaluating: [
			receiver2
				initializeWith:
					(#_coverageTracker29827365_
						cover: (75 to: 82)
						declaredAt: (5 to: 12)
						by: anIsland)
				pirates:
					(#_coverageTracker29827365_
						cover: (93 to: 97)
						declaredAt: (26 to: 30)
						by: aCrew)
				at:
					(#_coverageTracker29827365_
						cover: (103 to: 111)
						declaredAt: (36 to: 44)
						by: aPosition) ]
		thatSends: #initializeWith:pirates:at:
		to: receiver2 ] value.! !
!Behavior method!
assertCanPlaceCarAt: aPosition
	#_coverageTracker29827376_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver2 |
	receiver2 _ #_coverageTracker29827376_
		cover: (36 to: 44)
		declaredAt: (22 to: 30)
		by: aPosition.
	#_coverageTracker29827376_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 >
				[ | receiver1 |
				receiver1 _ #_coverageTracker29827376_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29827376_
					coverAll:
						{53 to: 58}
					evaluating: [ receiver1 length ]
					thatSends: #length
					to: receiver1 ] value ]
		thatSends: #>
		to: receiver2 ] value.
	#_coverageTracker29827376_
		coverAll:
			{60 to: 66}
		evaluating: [
			receiver6 ifTrue: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker29827376_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29827376_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver5 error:
							[ | receiver4 |
							receiver4 _ [ | receiver3 |
							receiver3 _ #_coverageTracker29827376_
								coverAll:
									{82 to: 85}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker29827376_
								coverAll:
									{87 to: 91}
								evaluating: [ receiver3 class ]
								thatSends: #class
								to: receiver3 ] value.
							#_coverageTracker29827376_
								coverAll:
									{93 to: 123}
								evaluating: [ receiver4 cannotPlacedCarErrorDescription ]
								thatSends: #cannotPlacedCarErrorDescription
								to: receiver4 ] value ]
					thatSends: #error:
					to: receiver5 ] value ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.! !
!Behavior method!
searchTreasureIn: island with: aMap
	#_coverageTracker29827395_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827395_
		cover: (40 to: 43)
		declaredAt: (40 to: 43)
		by: rank.
	#_coverageTracker29827395_
		coverAll:
			{45 to: 62. 69 to: 71. 80 to: 84}
		evaluating: [
			receiver1
				searchTreasureFor:
					(#_coverageTracker29827395_
						coverAll:
							{64 to: 67}
						byLiteralOrPseudoVariable: self)
				at:
					(#_coverageTracker29827395_
						cover: (73 to: 78)
						declaredAt: (19 to: 24)
						by: island)
				with:
					(#_coverageTracker29827395_
						cover: (86 to: 89)
						declaredAt: (32 to: 35)
						by: aMap) ]
		thatSends: #searchTreasureFor:at:with:
		to: receiver1 ] value.! !
!Behavior method!
simplePirateErrorDescription
	#_coverageTracker29827404_ markAsExecuted.
	^ #_coverageTracker29827404_
		coverAll:
			{34 to: 56}
		byLiteralOrPseudoVariable: 'I am a simple pirate!!'.! !
!Behavior method!
initializeExhaustedTurbo
	#_coverageTracker29827405_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827405_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827405_
		coverAll:
			{34 to: 52. 56 to: 60}
		evaluating: [
			receiver1
				initializeSpeeding:
					(#_coverageTracker29827405_
						coverAll:
							{54 to: 54}
						byLiteralOrPseudoVariable: 1)
				next:
					(#_coverageTracker29827405_
						coverAll:
							{62 to: 65}
						byLiteralOrPseudoVariable: self) ]
		thatSends: #initializeSpeeding:next:
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker29827419_ markAsExecuted.
	#_coverageTracker29827419_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by:
			(rank _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827419_
				coverAll:
					{22 to: 33}
				by: SimplePirate.
			#_coverageTracker29827419_
				coverAll:
					{35 to: 37}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
puede: unaExcavadora cavarCon: suMechaActual
	#_coverageTracker29827422_ markAsExecuted.
	self.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827422_
		cover: (56 to: 68)
		declaredAt: (32 to: 44)
		by: suMechaActual.
	#_coverageTracker29827422_
		coverAll:
			{70 to: 90}
		evaluating: [
			receiver1 esAptaEnConcretoPara:
				(#_coverageTracker29827422_
					cover: (92 to: 104)
					declaredAt: (8 to: 20)
					by: unaExcavadora) ]
		thatSends: #esAptaEnConcretoPara:
		to: receiver1 ] value.! !
!Behavior method!
esAptaEnTierraPara: unaExcavadora
	#_coverageTracker29827426_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827426_
		cover: (44 to: 56)
		declaredAt: (21 to: 33)
		by: unaExcavadora.
	#_coverageTracker29827426_
		coverAll:
			{58 to: 85}
		evaluating: [ receiver1 cavarCapaTierraConMechaWidia ]
		thatSends: #cavarCapaTierraConMechaWidia
		to: receiver1 ] value.! !
!Behavior method!
nextStep: step
	#_coverageTracker29827441_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827441_
		cover: (20 to: 24)
		declaredAt: (20 to: 24)
		by: steps.
	#_coverageTracker29827441_
		coverAll:
			{26 to: 29}
		evaluating: [
			receiver1 add:
				(#_coverageTracker29827441_
					cover: (31 to: 34)
					declaredAt: (11 to: 14)
					by: step) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
canMoveBucanero: aBucanero to: aPosition at: island
	#_coverageTracker29827446_ markAsExecuted.
	^ #_coverageTracker29827446_
		coverAll:
			{59 to: 62}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
searchTreasureIn: island with: aMap
	#_coverageTracker29827454_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker29827454_
		cover: (39 to: 42)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29827454_
		coverAll:
			{44 to: 44}
		evaluating: [
			receiver1 =
				(#_coverageTracker29827454_
					coverAll:
						{46 to: 58}
					byLiteralOrPseudoVariable: #SimplePirate) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker29827454_
		coverAll:
			{60 to: 66}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker29827454_
					coverAll:
						{70 to: 73}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker29827454_
					coverAll:
						{75 to: 80}
					evaluating: [
						receiver2 error:
							(#_coverageTracker29827454_
								coverAll:
									{82 to: 104}
								byLiteralOrPseudoVariable: 'I am a simple pirate!!') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver5 |
	receiver5 _ [ | receiver4 |
	receiver4 _ #_coverageTracker29827454_
		cover: (110 to: 113)
		declaredAt: (39 to: 42)
		by: rank.
	#_coverageTracker29827454_
		coverAll:
			{115 to: 115}
		evaluating: [
			receiver4 =
				(#_coverageTracker29827454_
					coverAll:
						{117 to: 124}
					byLiteralOrPseudoVariable: #Captain) ]
		thatSends: #=
		to: receiver4 ] value.
	#_coverageTracker29827454_
		coverAll:
			{126 to: 132}
		evaluating: [ receiver5 ifTrue: [ ^ #_coverageTracker29827454_
					coverAll:
						{138 to: 141}
					byLiteralOrPseudoVariable: true ]]
		thatSends: #ifTrue:
		to: receiver5 ] value.! !
!Behavior method!
bucanero: aBucanero buryTreasureAt: aPosition at: island
	#_coverageTracker29827475_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827475_
		coverAll:
			{62 to: 65}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827475_
		coverAll:
			{67 to: 72}
		evaluating: [
			receiver1 error:
				(#_coverageTracker29827475_
					coverAll:
						{74 to: 116}
					byLiteralOrPseudoVariable: 'Arrgh!! I cannot dig this type of terrain!!') ]
		thatSends: #error:
		to: receiver1 ] value.! !
!Behavior method!
startPosition
	#_coverageTracker29827478_ markAsExecuted.
	^ #_coverageTracker29827478_
		cover: (19 to: 31)
		declaredAt: (19 to: 31)
		by: startPosition.! !
!Behavior method!
initialize
	#_coverageTracker29827483_ markAsExecuted.
	#_coverageTracker29827483_
		cover: (18 to: 23)
		declaredAt: (18 to: 23)
		by:
			(altura _ #_coverageTracker29827483_
				coverAll:
					{28 to: 28}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker29827483_
		cover: (37 to: 41)
		declaredAt: (37 to: 41)
		by:
			(valor _ #_coverageTracker29827483_
				coverAll:
					{46 to: 47}
				byLiteralOrPseudoVariable: 10).! !
!Behavior method!
schumacherCar
	#_coverageTracker29827486_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827486_
		coverAll:
			{19 to: 31}
		by: FormulaOneCar.
	#_coverageTracker29827486_
		coverAll:
			{33 to: 41}
		evaluating: [
			receiver1 drivenBy:
				(#_coverageTracker29827486_
					coverAll:
						{43 to: 53}
					byLiteralOrPseudoVariable: #Schumacher) ]
		thatSends: #drivenBy:
		to: receiver1 ] value.! !
!Behavior method!
calcularProfundidadDelSuelo
	#_coverageTracker29827502_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker29827502_
		cover: (31 to: 48)
		declaredAt: (31 to: 48)
		by: capasDeSueloDebajo.
	#_coverageTracker29827502_
		coverAll:
			{50 to: 56. 60 to: 64}
		evaluating: [
			receiver3
				inject:
					(#_coverageTracker29827502_
						coverAll:
							{58 to: 58}
						byLiteralOrPseudoVariable: 0)
				into: [ :alturaDeCapas :capa |
					[ | receiver2 |
					receiver2 _ #_coverageTracker29827502_
						cover: (91 to: 103)
						declaredAt: (69 to: 81)
						by: alturaDeCapas.
					#_coverageTracker29827502_
						coverAll:
							{104 to: 104}
						evaluating: [
							receiver2 +
								[ | receiver1 |
								receiver1 _ #_coverageTracker29827502_
									cover: (107 to: 110)
									declaredAt: (84 to: 87)
									by: capa.
								#_coverageTracker29827502_
									coverAll:
										{112 to: 117}
									evaluating: [ receiver1 altura ]
									thatSends: #altura
									to: receiver1 ] value ]
						thatSends: #+
						to: receiver2 ] value ]]
		thatSends: #inject:into:
		to: receiver3 ] value.! !
!Behavior method!
test06CrewCanBuryTreasureIfBucaneroCanDig
	#_coverageTracker29827509_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker29827509_
		cover: (45 to: 49)
		declaredAt: (45 to: 49)
		by: crew1.
	#_coverageTracker29827509_
		coverAll:
			{51 to: 57}
		evaluating: [
			receiver2 moveTo:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29827509_
					coverAll:
						{59 to: 59}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29827509_
					coverAll:
						{60 to: 60}
					evaluating: [
						receiver1 @
							(#_coverageTracker29827509_
								coverAll:
									{61 to: 61}
								byLiteralOrPseudoVariable: 1) ]
					thatSends: #@
					to: receiver1 ] value ]
		thatSends: #moveTo:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29827509_
		cover: (65 to: 69)
		declaredAt: (45 to: 49)
		by: crew1.
	#_coverageTracker29827509_
		coverAll:
			{71 to: 85}
		evaluating: [
			receiver4 buryTreasureAt:
				[ | receiver3 |
				receiver3 _ #_coverageTracker29827509_
					coverAll:
						{87 to: 87}
					byLiteralOrPseudoVariable: 2.
				#_coverageTracker29827509_
					coverAll:
						{88 to: 88}
					evaluating: [
						receiver3 @
							(#_coverageTracker29827509_
								coverAll:
									{89 to: 89}
								byLiteralOrPseudoVariable: 2) ]
					thatSends: #@
					to: receiver3 ] value ]
		thatSends: #buryTreasureAt:
		to: receiver4 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker29827509_
		coverAll:
			{95 to: 98}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827509_
		coverAll:
			{100 to: 106}
		evaluating: [
			receiver6 assert:
				[ | receiver5 |
				receiver5 _ #_coverageTracker29827509_
					cover: (108 to: 111)
					declaredAt: (108 to: 111)
					by: map1.
				#_coverageTracker29827509_
					coverAll:
						{113 to: 127}
					evaluating: [ receiver5 hasTreasureMark ]
					thatSends: #hasTreasureMark
					to: receiver5 ] value ]
		thatSends: #assert:
		to: receiver6 ] value.! !
!Behavior method!
esAptaEnArenosoPara: unaExcavadora
	#_coverageTracker29827517_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827517_
		cover: (43 to: 55)
		declaredAt: (22 to: 34)
		by: unaExcavadora.
	#_coverageTracker29827517_
		coverAll:
			{57 to: 73}
		evaluating: [ receiver1 pasarAProximaCapa ]
		thatSends: #pasarAProximaCapa
		to: receiver1 ] value.! !
!Behavior method!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar
	| schumacher hamilton sector |
	#_coverageTracker29827541_ markAsExecuted.
	#_coverageTracker29827541_
		cover: (101 to: 106)
		declaredAt: (89 to: 94)
		by:
			(sector _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827541_
				coverAll:
					{110 to: 113}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827541_
				coverAll:
					{115 to: 145}
				evaluating: [ receiver1 twentyFourKilometersTurboSector ]
				thatSends: #twentyFourKilometersTurboSector
				to: receiver1 ] value).
	#_coverageTracker29827541_
		cover: (151 to: 160)
		declaredAt: (69 to: 78)
		by:
			(schumacher _ [ | receiver2 |
			receiver2 _ #_coverageTracker29827541_
				coverAll:
					{164 to: 167}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827541_
				coverAll:
					{169 to: 181}
				evaluating: [ receiver2 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver2 ] value).
	#_coverageTracker29827541_
		cover: (185 to: 192)
		declaredAt: (80 to: 87)
		by:
			(hamilton _ [ | receiver3 |
			receiver3 _ #_coverageTracker29827541_
				coverAll:
					{196 to: 199}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827541_
				coverAll:
					{201 to: 211}
				evaluating: [ receiver3 hamiltonCar ]
				thatSends: #hamiltonCar
				to: receiver3 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29827541_
		cover: (217 to: 226)
		declaredAt: (69 to: 78)
		by: schumacher.
	#_coverageTracker29827541_
		coverAll:
			{228 to: 233}
		evaluating: [
			receiver6 speed:
				[ | receiver5 |
				receiver5 _ [ | receiver4 |
				receiver4 _ #_coverageTracker29827541_
					coverAll:
						{235 to: 237}
					byLiteralOrPseudoVariable: 300.
				#_coverageTracker29827541_
					coverAll:
						{239 to: 239}
					evaluating: [
						receiver4 *
							(#_coverageTracker29827541_
								coverAll:
									{241 to: 249}
								by: kilometer) ]
					thatSends: #*
					to: receiver4 ] value.
				#_coverageTracker29827541_
					coverAll:
						{251 to: 251}
					evaluating: [
						receiver5 /
							(#_coverageTracker29827541_
								coverAll:
									{253 to: 256}
								by: hour) ]
					thatSends: #/
					to: receiver5 ] value ]
		thatSends: #speed:
		to: receiver6 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker29827541_
		cover: (260 to: 267)
		declaredAt: (80 to: 87)
		by: hamilton.
	#_coverageTracker29827541_
		coverAll:
			{269 to: 274}
		evaluating: [
			receiver9 speed:
				[ | receiver8 |
				receiver8 _ [ | receiver7 |
				receiver7 _ #_coverageTracker29827541_
					coverAll:
						{276 to: 278}
					byLiteralOrPseudoVariable: 300.
				#_coverageTracker29827541_
					coverAll:
						{280 to: 280}
					evaluating: [
						receiver7 *
							(#_coverageTracker29827541_
								coverAll:
									{282 to: 290}
								by: kilometer) ]
					thatSends: #*
					to: receiver7 ] value.
				#_coverageTracker29827541_
					coverAll:
						{292 to: 292}
					evaluating: [
						receiver8 /
							(#_coverageTracker29827541_
								coverAll:
									{294 to: 297}
								by: hour) ]
					thatSends: #/
					to: receiver8 ] value ]
		thatSends: #speed:
		to: receiver9 ] value.
	[ | receiver11 |
	receiver11 _ #_coverageTracker29827541_
		cover: (303 to: 308)
		declaredAt: (89 to: 94)
		by: sector.
	#_coverageTracker29827541_
		coverAll:
			{310 to: 313. 326 to: 328}
		evaluating: [
			receiver11
				put:
					(#_coverageTracker29827541_
						cover: (315 to: 324)
						declaredAt: (69 to: 78)
						by: schumacher)
				at:
					[ | receiver10 |
					receiver10 _ #_coverageTracker29827541_
						coverAll:
							{330 to: 333}
						byLiteralOrPseudoVariable: 12.9.
					#_coverageTracker29827541_
						coverAll:
							{335 to: 335}
						evaluating: [
							receiver10 *
								(#_coverageTracker29827541_
									coverAll:
										{337 to: 345}
									by: kilometer) ]
						thatSends: #*
						to: receiver10 ] value ]
		thatSends: #put:at:
		to: receiver11 ] value.
	[ | receiver13 |
	receiver13 _ #_coverageTracker29827541_
		cover: (349 to: 354)
		declaredAt: (89 to: 94)
		by: sector.
	#_coverageTracker29827541_
		coverAll:
			{356 to: 359. 370 to: 372}
		evaluating: [
			receiver13
				put:
					(#_coverageTracker29827541_
						cover: (361 to: 368)
						declaredAt: (80 to: 87)
						by: hamilton)
				at:
					[ | receiver12 |
					receiver12 _ #_coverageTracker29827541_
						coverAll:
							{374 to: 375}
						byLiteralOrPseudoVariable: 13.
					#_coverageTracker29827541_
						coverAll:
							{377 to: 377}
						evaluating: [
							receiver12 *
								(#_coverageTracker29827541_
									coverAll:
										{379 to: 387}
									by: kilometer) ]
						thatSends: #*
						to: receiver12 ] value ]
		thatSends: #put:at:
		to: receiver13 ] value.
	[ | receiver21 |
	receiver21 _ #_coverageTracker29827541_
		coverAll:
			{393 to: 396}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827541_
		coverAll:
			{398 to: 404. 435 to: 440. 474 to: 489}
		evaluating: [
			receiver21
				should: [
					[ | receiver14 |
					receiver14 _ #_coverageTracker29827541_
						cover: (407 to: 416)
						declaredAt: (69 to: 78)
						by: schumacher.
					#_coverageTracker29827541_
						coverAll:
							{418 to: 430}
						evaluating: [ receiver14 activateTurbo ]
						thatSends: #activateTurbo
						to: receiver14 ] value ]
				raise:
					[ | receiver15 |
					receiver15 _ #_coverageTracker29827541_
						coverAll:
							{442 to: 446}
						by: Error.
					#_coverageTracker29827541_
						coverAll:
							{448 to: 448}
						evaluating: [
							receiver15 -
								(#_coverageTracker29827541_
									coverAll:
										{450 to: 469}
									by: MessageNotUnderstood) ]
						thatSends: #-
						to: receiver15 ] value
				withExceptionDo: [ :error |
					[ | receiver18 |
					receiver18 _ #_coverageTracker29827541_
						coverAll:
							{505 to: 508}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29827541_
						coverAll:
							{515 to: 521. 606 to: 612}
						evaluating: [
							receiver18
								assert:
									[ | receiver16 |
									receiver16 _ #_coverageTracker29827541_
										coverAll:
											{523 to: 528}
										by: Sector.
									#_coverageTracker29827541_
										coverAll:
											{530 to: 599}
										evaluating: [ receiver16 cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ]
										thatSends: #cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription
										to: receiver16 ] value
								equals:
									[ | receiver17 |
									receiver17 _ #_coverageTracker29827541_
										cover: (614 to: 618)
										declaredAt: (494 to: 498)
										by: error.
									#_coverageTracker29827541_
										coverAll:
											{620 to: 630}
										evaluating: [ receiver17 messageText ]
										thatSends: #messageText
										to: receiver17 ] value ]
						thatSends: #assert:equals:
						to: receiver18 ] value.
					[ | receiver20 |
					receiver20 _ #_coverageTracker29827541_
						coverAll:
							{636 to: 639}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker29827541_
						coverAll:
							{641 to: 645}
						evaluating: [
							receiver20 deny:
								[ | receiver19 |
								receiver19 _ #_coverageTracker29827541_
									cover: (647 to: 656)
									declaredAt: (69 to: 78)
									by: schumacher.
								#_coverageTracker29827541_
									coverAll:
										{658 to: 673}
									evaluating: [ receiver19 isTurboActivated ]
									thatSends: #isTurboActivated
									to: receiver19 ] value ]
						thatSends: #deny:
						to: receiver20 ] value ]]
		thatSends: #should:raise:withExceptionDo:
		to: receiver21 ] value.! !
!Behavior method!
canMoveFilibustero: aFilibustero to: aPosition at: island
	#_coverageTracker29827657_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827657_
		cover: (61 to: 66)
		declaredAt: (52 to: 57)
		by: island.
	#_coverageTracker29827657_
		coverAll:
			{68 to: 82}
		evaluating: [
			receiver1 clearTerrainAt:
				(#_coverageTracker29827657_
					cover: (84 to: 92)
					declaredAt: (38 to: 46)
					by: aPosition) ]
		thatSends: #clearTerrainAt:
		to: receiver1 ] value.
	^ #_coverageTracker29827657_
		coverAll:
			{97 to: 101}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
twentyKilometersNoTurboSector
	#_coverageTracker29827664_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29827664_
		coverAll:
			{35 to: 47}
		by: NoTurboSector.
	#_coverageTracker29827664_
		coverAll:
			{49 to: 51}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29827664_
					coverAll:
						{53 to: 54}
					byLiteralOrPseudoVariable: 20.
				#_coverageTracker29827664_
					coverAll:
						{56 to: 56}
					evaluating: [
						receiver1 *
							(#_coverageTracker29827664_
								coverAll:
									{58 to: 66}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
searchTreasureFor: aPirate at: anIsland with: aMap
	#_coverageTracker29827688_ markAsExecuted.
	^ #_coverageTracker29827688_
		coverAll:
			{58 to: 61}
		byLiteralOrPseudoVariable: true.! !
!Behavior method!
of: aLength
	#_coverageTracker29827691_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker29827691_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827691_
		coverAll:
			{22 to: 41}
		evaluating: [
			receiver1 assertIsValidLength:
				(#_coverageTracker29827691_
					cover: (43 to: 49)
					declaredAt: (5 to: 11)
					by: aLength) ]
		thatSends: #assertIsValidLength:
		to: receiver1 ] value.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker29827691_
		coverAll:
			{59 to: 62}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827691_
		coverAll:
			{64 to: 66}
		evaluating: [ receiver2 new ]
		thatSends: #new
		to: receiver2 ] value.
	#_coverageTracker29827691_
		coverAll:
			{68 to: 80}
		evaluating: [
			receiver3 initializeOf:
				(#_coverageTracker29827691_
					cover: (82 to: 88)
					declaredAt: (5 to: 11)
					by: aLength) ]
		thatSends: #initializeOf:
		to: receiver3 ] value.! !
!Behavior method!
puede: unaExcavadora cavarCon: suMechaActual
	#_coverageTracker29827703_ markAsExecuted.
	self.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827703_
		cover: (56 to: 68)
		declaredAt: (32 to: 44)
		by: suMechaActual.
	#_coverageTracker29827703_
		coverAll:
			{70 to: 88}
		evaluating: [
			receiver1 esAptaEnTierraPara:
				(#_coverageTracker29827703_
					cover: (90 to: 102)
					declaredAt: (8 to: 20)
					by: unaExcavadora) ]
		thatSends: #esAptaEnTierraPara:
		to: receiver1 ] value.! !
!Behavior method!
stepsSize
	#_coverageTracker29827717_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827717_
		cover: (15 to: 19)
		declaredAt: (15 to: 19)
		by: steps.
	#_coverageTracker29827717_
		coverAll:
			{21 to: 24}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
twentyKilometersTurboSector
	#_coverageTracker29827721_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker29827721_
		coverAll:
			{33 to: 43}
		by: TurboSector.
	#_coverageTracker29827721_
		coverAll:
			{45 to: 47}
		evaluating: [
			receiver2 of:
				[ | receiver1 |
				receiver1 _ #_coverageTracker29827721_
					coverAll:
						{49 to: 50}
					byLiteralOrPseudoVariable: 20.
				#_coverageTracker29827721_
					coverAll:
						{52 to: 52}
					evaluating: [
						receiver1 *
							(#_coverageTracker29827721_
								coverAll:
									{54 to: 62}
								by: kilometer) ]
					thatSends: #*
					to: receiver1 ] value ]
		thatSends: #of:
		to: receiver2 ] value.! !
!Behavior method!
firstTurboActivated
	#_coverageTracker29827735_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 _ #_coverageTracker29827735_
		coverAll:
			{25 to: 38}
		by: TurboActivated.
	#_coverageTracker29827735_
		coverAll:
			{44 to: 52. 63 to: 67}
		evaluating: [
			receiver7
				speeding:
					[ | receiver1 |
					receiver1 _ #_coverageTracker29827735_
						coverAll:
							{54 to: 55}
						byLiteralOrPseudoVariable: 12.
					#_coverageTracker29827735_
						coverAll:
							{56 to: 56}
						evaluating: [
							receiver1 /
								(#_coverageTracker29827735_
									coverAll:
										{57 to: 58}
									byLiteralOrPseudoVariable: 10) ]
						thatSends: #/
						to: receiver1 ] value
				next:
					[ | receiver6 |
					receiver6 _ #_coverageTracker29827735_
						coverAll:
							{70 to: 83}
						by: TurboActivated.
					#_coverageTracker29827735_
						coverAll:
							{89 to: 97. 109 to: 113}
						evaluating: [
							receiver6
								speeding:
									[ | receiver2 |
									receiver2 _ #_coverageTracker29827735_
										coverAll:
											{99 to: 100}
										byLiteralOrPseudoVariable: 11.
									#_coverageTracker29827735_
										coverAll:
											{101 to: 101}
										evaluating: [
											receiver2 /
												(#_coverageTracker29827735_
													coverAll:
														{102 to: 103}
													byLiteralOrPseudoVariable: 10) ]
										thatSends: #/
										to: receiver2 ] value
								next:
									[ | receiver5 |
									receiver5 _ #_coverageTracker29827735_
										coverAll:
											{116 to: 129}
										by: TurboActivated.
									#_coverageTracker29827735_
										coverAll:
											{136 to: 144. 159 to: 163}
										evaluating: [
											receiver5
												speeding:
													[ | receiver3 |
													receiver3 _ #_coverageTracker29827735_
														coverAll:
															{146 to: 148}
														byLiteralOrPseudoVariable: 105.
													#_coverageTracker29827735_
														coverAll:
															{149 to: 149}
														evaluating: [
															receiver3 /
																(#_coverageTracker29827735_
																	coverAll:
																		{150 to: 152}
																	byLiteralOrPseudoVariable: 100) ]
														thatSends: #/
														to: receiver3 ] value
												next:
													[ | receiver4 |
													receiver4 _ #_coverageTracker29827735_
														coverAll:
															{165 to: 178}
														by: TurboActivated.
													#_coverageTracker29827735_
														coverAll:
															{180 to: 193}
														evaluating: [ receiver4 exhaustedTurbo ]
														thatSends: #exhaustedTurbo
														to: receiver4 ] value ]
										thatSends: #speeding:next:
										to: receiver5 ] value ]
						thatSends: #speeding:next:
						to: receiver6 ] value ]
		thatSends: #speeding:next:
		to: receiver7 ] value.! !
!Behavior method!
test11TrackShouldKnowCarsInRunning
	| sectors track car1 car2 |
	#_coverageTracker29827779_ markAsExecuted.
	#_coverageTracker29827779_
		cover: (69 to: 75)
		declaredAt: (40 to: 46)
		by:
			(sectors _ [ | receiver1 |
			receiver1 _ #_coverageTracker29827779_
				coverAll:
					{79 to: 82}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827779_
				coverAll:
					{84 to: 93}
				evaluating: [ receiver1 twoSectors ]
				thatSends: #twoSectors
				to: receiver1 ] value).
	#_coverageTracker29827779_
		cover: (100 to: 104)
		declaredAt: (48 to: 52)
		by:
			(track _ [ | receiver2 |
			receiver2 _ #_coverageTracker29827779_
				coverAll:
					{108 to: 112}
				by: Track.
			#_coverageTracker29827779_
				coverAll:
					{114 to: 125}
				evaluating: [
					receiver2 withSectors:
						(#_coverageTracker29827779_
							cover: (127 to: 133)
							declaredAt: (40 to: 46)
							by: sectors) ]
				thatSends: #withSectors:
				to: receiver2 ] value).
	#_coverageTracker29827779_
		cover: (137 to: 140)
		declaredAt: (54 to: 57)
		by:
			(car1 _ [ | receiver3 |
			receiver3 _ #_coverageTracker29827779_
				coverAll:
					{144 to: 147}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827779_
				coverAll:
					{149 to: 161}
				evaluating: [ receiver3 schumacherCar ]
				thatSends: #schumacherCar
				to: receiver3 ] value).
	#_coverageTracker29827779_
		cover: (165 to: 168)
		declaredAt: (59 to: 62)
		by:
			(car2 _ [ | receiver4 |
			receiver4 _ #_coverageTracker29827779_
				coverAll:
					{172 to: 175}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker29827779_
				coverAll:
					{177 to: 189}
				evaluating: [ receiver4 verstappenCar ]
				thatSends: #verstappenCar
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker29827779_
		cover: (194 to: 198)
		declaredAt: (48 to: 52)
		by: track.
	#_coverageTracker29827779_
		coverAll:
			{200 to: 203. 210 to: 212}
		evaluating: [
			receiver6
				put:
					(#_coverageTracker29827779_
						cover: (205 to: 208)
						declaredAt: (54 to: 57)
						by: car1)
				at:
					[ | receiver5 |
					receiver5 _ #_coverageTracker29827779_
						coverAll:
							{214 to: 215}
						byLiteralOrPseudoVariable: 10.
					#_coverageTracker29827779_
						coverAll:
							{217 to: 217}
						evaluating: [
							receiver5 *
								(#_coverageTracker29827779_
									coverAll:
										{219 to: 227}
									by: kilometer) ]
						thatSends: #*
						to: receiver5 ] value ]
		thatSends: #put:at:
		to: receiver6 ] value.
	[ | receiver8 |
	receiver8 _ #_coverageTracker29827779_
		cover: (231 to: 235)
		declaredAt: (48 to: 52)
		by: track.
	#_coverageTracker29827779_
		coverAll:
			{237 to: 240. 247 to: 249}
		evaluating: [
			receiver8
				put:
					(#_coverageTracker29827779_
						cover: (242 to: 245)
						declaredAt: (59 to: 62)
						by: car2)
				at:
					[ | receiver7 |
					receiver7 _ #_coverageTracker29827779_
						coverAll:
							{251 to: 252}
						byLiteralOrPseudoVariable: 30.
					#_coverageTracker29827779_
						coverAll:
							{254 to: 254}
						evaluating: [
							receiver7 *
								(#_coverageTracker29827779_
									coverAll:
										{256 to: 264}
									by: kilometer) ]
						thatSends: #*
						to: receiver7 ] value ]
		thatSends: #put:at:
		to: receiver8 ] value.
	[ | receiver10 |
	receiver10 _ #_coverageTracker29827779_
		coverAll:
			{270 to: 273}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827779_
		coverAll:
			{275 to: 281}
		evaluating: [
			receiver10 assert:
				[ | receiver9 |
				receiver9 _ #_coverageTracker29827779_
					cover: (284 to: 288)
					declaredAt: (48 to: 52)
					by: track.
				#_coverageTracker29827779_
					coverAll:
						{290 to: 298}
					evaluating: [
						receiver9 includes:
							(#_coverageTracker29827779_
								cover: (300 to: 303)
								declaredAt: (54 to: 57)
								by: car1) ]
					thatSends: #includes:
					to: receiver9 ] value ]
		thatSends: #assert:
		to: receiver10 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker29827779_
		coverAll:
			{308 to: 311}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827779_
		coverAll:
			{313 to: 319}
		evaluating: [
			receiver12 assert:
				[ | receiver11 |
				receiver11 _ #_coverageTracker29827779_
					cover: (322 to: 326)
					declaredAt: (48 to: 52)
					by: track.
				#_coverageTracker29827779_
					coverAll:
						{328 to: 336}
					evaluating: [
						receiver11 includes:
							(#_coverageTracker29827779_
								cover: (338 to: 341)
								declaredAt: (59 to: 62)
								by: car2) ]
					thatSends: #includes:
					to: receiver11 ] value ]
		thatSends: #assert:
		to: receiver12 ] value.
	[ | receiver15 |
	receiver15 _ #_coverageTracker29827779_
		coverAll:
			{349 to: 352}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827779_
		coverAll:
			{354 to: 360}
		evaluating: [
			receiver15 assert:
				[ | receiver14 |
				receiver14 _ [ | receiver13 |
				receiver13 _ #_coverageTracker29827779_
					cover: (363 to: 369)
					declaredAt: (40 to: 46)
					by: sectors.
				#_coverageTracker29827779_
					coverAll:
						{371 to: 375}
					evaluating: [ receiver13 first ]
					thatSends: #first
					to: receiver13 ] value.
				#_coverageTracker29827779_
					coverAll:
						{377 to: 385}
					evaluating: [
						receiver14 includes:
							(#_coverageTracker29827779_
								cover: (387 to: 390)
								declaredAt: (54 to: 57)
								by: car1) ]
					thatSends: #includes:
					to: receiver14 ] value ]
		thatSends: #assert:
		to: receiver15 ] value.
	[ | receiver18 |
	receiver18 _ #_coverageTracker29827779_
		coverAll:
			{395 to: 398}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker29827779_
		coverAll:
			{400 to: 406}
		evaluating: [
			receiver18 assert:
				[ | receiver17 |
				receiver17 _ [ | receiver16 |
				receiver16 _ #_coverageTracker29827779_
					cover: (409 to: 415)
					declaredAt: (40 to: 46)
					by: sectors.
				#_coverageTracker29827779_
					coverAll:
						{417 to: 422}
					evaluating: [ receiver16 second ]
					thatSends: #second
					to: receiver16 ] value.
				#_coverageTracker29827779_
					coverAll:
						{424 to: 432}
					evaluating: [
						receiver17 includes:
							(#_coverageTracker29827779_
								cover: (434 to: 437)
								declaredAt: (59 to: 62)
								by: car2) ]
					thatSends: #includes:
					to: receiver17 ] value ]
		thatSends: #assert:
		to: receiver18 ] value.! !
!Behavior method!
capaDeSueloInmediata
	#_coverageTracker29827837_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker29827837_
		cover: (24 to: 41)
		declaredAt: (24 to: 41)
		by: capasDeSueloDebajo.
	#_coverageTracker29827837_
		coverAll:
			{43 to: 47}
		evaluating: [ receiver1 first ]
		thatSends: #first
		to: receiver1 ] value.! !
!Behavior method!
drawTreasureMarkAt: aPosition
	#_coverageTracker29827841_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker29827841_
		cover: (33 to: 35)
		declaredAt: (33 to: 35)
		by: map.
	#_coverageTracker29827841_
		coverAll:
			{37 to: 45}
		evaluating: [
			receiver3 nextStep:
				[ | receiver2 |
				receiver2 _ #_coverageTracker29827841_
					cover: (47 to: 55)
					declaredAt: (21 to: 29)
					by: aPosition.
				#_coverageTracker29827841_
					coverAll:
						{57 to: 57}
					evaluating: [
						receiver2 -
							[ | receiver1 |
							receiver1 _ #_coverageTracker29827841_
								cover: (59 to: 61)
								declaredAt: (33 to: 35)
								by: map.
							#_coverageTracker29827841_
								coverAll:
									{63 to: 74}
								evaluating: [ receiver1 lastPosition ]
								thatSends: #lastPosition
								to: receiver1 ] value ]
					thatSends: #-
					to: receiver2 ] value ]
		thatSends: #nextStep:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker29827841_
		cover: (78 to: 80)
		declaredAt: (33 to: 35)
		by: map.
	#_coverageTracker29827841_
		coverAll:
			{82 to: 96}
		evaluating: [
			receiver4 treasureMarkAt:
				(#_coverageTracker29827841_
					cover: (98 to: 106)
					declaredAt: (21 to: 29)
					by: aPosition) ]
		thatSends: #treasureMarkAt:
		to: receiver4 ] value.! !
!Behavior method!
resistencia
	#_coverageTracker29827847_ markAsExecuted.
	^ #_coverageTracker29827847_
		cover: (17 to: 27)
		declaredAt: (17 to: 27)
		by: resistencia.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:03:27'!
PASSED!

{ CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.!

{ CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.!

{ CapaDeSuelo arenoso setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 } size!
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:06:44' prior: 50650396!
assertSueloValido: capasDeSueloAExcavar
	^capasDeSueloAExcavar tieneDosCapasSeguidasDelMismoTipo ifTrue: [ self error: self tipoDeSueloInvalidoErrorDescription ]! !
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:18:54' prior: 50660374!
assertSueloValido: capasDeSueloAExcavar
       | capa capaSig|

       capasDeSueloAExcavar do: [ :itxcapa | 
	                                                   capa := (capasDeSueloAExcavar at: itxcapa).
	                                                   capaSig := (capasDeSueloAExcavar at: itxcapa +1).
	                                                  capa scan = capaSig scan ifTrue: [ self error: self tipoDeSueloInvalidoErrorDescription ]]
! !
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:19:08' prior: 50650421!
sobreSuelo: capasDeSueloAExcavar 
         self assertSueloValido: capasDeSueloAExcavar.
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:20:57' prior: 50660383!
assertSueloValido: capasDeSueloAExcavar
       | capa capaSig|
       1 to: capasDeSueloAExcavar size -1 do: [:itxcapa | 
	                                                   capa := (capasDeSueloAExcavar at: itxcapa).
	                                                   capaSig := (capasDeSueloAExcavar at: itxcapa +1).
	                                                  capa scan = capaSig scan ifTrue: [ self error: self tipoDeSueloInvalidoErrorDescription ]]
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:21:00'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:21:00'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:21:00'!
ERROR!
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:21:25' prior: 50660409!
assertSueloValido: capasDeSueloAExcavar
       | capa capaSig|
       1 to: capasDeSueloAExcavar size -1 do: [:itxcapa | 
	                                                   capa := (capasDeSueloAExcavar at: itxcapa).
	                                                   capaSig := capasDeSueloAExcavar at: (itxcapa +1).
	                                                  capa scan = capaSig scan ifTrue: [ self error: self tipoDeSueloInvalidoErrorDescription ]]
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:21:26'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:21:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:21:26'!
ERROR!

self assertSueloValido: capasDeSueloAExcavar!

self assertSueloValido: capasDeSueloAExcavar.!
!Perforadora class methodsFor: 'instance creation' stamp: 'CB 5/8/2023 21:22:07' prior: 50660506!
assertSueloValido: capasDeSueloAExcavar
       | capa capaSig|
       1 to: capasDeSueloAExcavar size -1 do: [:itxcapa | 
	                                                   capa := (capasDeSueloAExcavar at: itxcapa).
	                                                   capaSig := capasDeSueloAExcavar at: (itxcapa +1).
	                                                  capa = capaSig ifTrue: [ self error: self tipoDeSueloInvalidoErrorDescription ]]
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:22:08'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:22:09'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:22:09'!
PASSED!
!Arenoso methodsFor: 'excavation' stamp: 'CB 5/8/2023 21:23:33'!
puedeUnaExcavadora: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnArenosoPara: unaExcavadora.! !
!Concreto methodsFor: 'excavation' stamp: 'CB 5/8/2023 21:23:33'!
puedeUnaExcavadora: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnConcretoPara: unaExcavadora.! !
!Tierra methodsFor: 'excavation' stamp: 'CB 5/8/2023 21:23:33'!
puedeUnaExcavadora: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnTierraPara: unaExcavadora.! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'CB 5/8/2023 21:23:33' prior: 50646984!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
          
 	self capaDeSueloInmediata puedeUnaExcavadora: self cavarCon: mechaPuesta.  
	! !

!methodRemoval: Arenoso #puede:cavarCon: stamp: 'CB 5/8/2023 21:23:33'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnArenosoPara: unaExcavadora.!

!methodRemoval: Concreto #puede:cavarCon: stamp: 'CB 5/8/2023 21:23:33'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnConcretoPara: unaExcavadora.!

!methodRemoval: Tierra #puede:cavarCon: stamp: 'CB 5/8/2023 21:23:33'!
puede: unaExcavadora cavarCon: suMechaActual.  
      ^suMechaActual esAptaEnTierraPara: unaExcavadora.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:24:13'!
PASSED!

!classRemoval: #Tree stamp: 'CB 5/8/2023 21:26:39'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Empty stamp: 'CB 5/8/2023 21:26:39'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Diggable stamp: 'CB 5/8/2023 21:26:39'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Terrain stamp: 'CB 5/8/2023 21:26:40'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #SimplePirate stamp: 'CB 5/8/2023 21:26:40'!
PirateRank subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Captain stamp: 'CB 5/8/2023 21:26:40'!
PirateRank subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #PirateRank stamp: 'CB 5/8/2023 21:26:40'!
Object subclass: #PirateRank
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Filibustero stamp: 'CB 5/8/2023 21:26:40'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Corsario stamp: 'CB 5/8/2023 21:26:41'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Bucanero stamp: 'CB 5/8/2023 21:26:41'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Pirate stamp: 'CB 5/8/2023 21:26:41'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Map stamp: 'CB 5/8/2023 21:26:41'!
Object subclass: #Map
	instanceVariableNames: 'island startPosition steps treasureMarkPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Island stamp: 'CB 5/8/2023 21:26:42'!
Object subclass: #Island
	instanceVariableNames: 'boardSize treesAt digsAt crewAt treasureAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Crew stamp: 'CB 5/8/2023 21:26:42'!
Object subclass: #Crew
	instanceVariableNames: 'island pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #CrewTest stamp: 'CB 5/8/2023 21:26:42'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'crewPosition1 treePosition1 island1 map1 crew1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 21:30:10'!
test20NoPuedeCrearUnSueloConDosCapasContiguasIguales

	| sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo tierra setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	
	self should: [Perforadora sobreSuelo: sueloAExcavar]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'CB 5/8/2023 21:30:31' prior: 50660915!
test20NoPuedeCrearUnSueloConDosCapasContiguasIguales

	| sueloAExcavar |
	
	sueloAExcavar := { CapaDeSuelo tierra setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	
	self should: [Perforadora sobreSuelo: sueloAExcavar]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'no se puede crear un suelo donde dos capas contiguas sean de un mismo tipo' equals: unError messageText.].
	
	! !

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:30:32'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:30:43'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:40:12'!
PASSED!

!classRemoval: #Perforadora stamp: 'CB 5/8/2023 21:40:31'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SinMecha stamp: 'CB 5/8/2023 21:40:32'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'CB 5/8/2023 21:40:32'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'CB 5/8/2023 21:40:32'!
NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'CB 5/8/2023 21:40:32'!
NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'CB 5/8/2023 21:40:32'!
NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #NoRota stamp: 'CB 5/8/2023 21:40:33'!
Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Mecha stamp: 'CB 5/8/2023 21:40:33'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'CB 5/8/2023 21:40:33'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'CB 5/8/2023 21:40:33'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'CB 5/8/2023 21:40:34'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'CB 5/8/2023 21:40:34'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'CB 5/8/2023 21:40:34'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1 excavadoraDeSuelo1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:40:54'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:42:19'!
PASSED!

!classRemoval: #Perforadora stamp: 'CB 5/8/2023 21:42:55'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SinMecha stamp: 'CB 5/8/2023 21:42:56'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'CB 5/8/2023 21:42:56'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'CB 5/8/2023 21:42:56'!
NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'CB 5/8/2023 21:42:56'!
NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'CB 5/8/2023 21:42:57'!
NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #NoRota stamp: 'CB 5/8/2023 21:42:57'!
Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Mecha stamp: 'CB 5/8/2023 21:42:57'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'CB 5/8/2023 21:42:57'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'CB 5/8/2023 21:42:58'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'CB 5/8/2023 21:42:58'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'CB 5/8/2023 21:42:58'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'CB 5/8/2023 21:42:58'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1 excavadoraDeSuelo1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:43:16'!
PASSED!

!classRemoval: #Perforadora stamp: 'CB 5/8/2023 21:45:02'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SinMecha stamp: 'CB 5/8/2023 21:45:02'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'CB 5/8/2023 21:45:02'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'CB 5/8/2023 21:45:03'!
NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'CB 5/8/2023 21:45:03'!
NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'CB 5/8/2023 21:45:03'!
NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #NoRota stamp: 'CB 5/8/2023 21:45:03'!
Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Mecha stamp: 'CB 5/8/2023 21:45:04'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'CB 5/8/2023 21:45:04'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'CB 5/8/2023 21:45:04'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'CB 5/8/2023 21:45:04'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'CB 5/8/2023 21:45:05'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'CB 5/8/2023 21:45:05'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1 excavadoraDeSuelo1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:45:19'!
PASSED!

!classRemoval: #Perforadora stamp: 'CB 5/8/2023 21:47:57'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SinMecha stamp: 'CB 5/8/2023 21:47:57'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Rota stamp: 'CB 5/8/2023 21:47:57'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Widia stamp: 'CB 5/8/2023 21:47:58'!
NoRota subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Soft stamp: 'CB 5/8/2023 21:47:58'!
NoRota subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Diamante stamp: 'CB 5/8/2023 21:47:58'!
NoRota subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #NoRota stamp: 'CB 5/8/2023 21:47:58'!
Mecha subclass: #NoRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Mecha stamp: 'CB 5/8/2023 21:47:59'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'CB 5/8/2023 21:47:59'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'CB 5/8/2023 21:47:59'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'CB 5/8/2023 21:47:59'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'CB 5/8/2023 21:48:00'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'CB 5/8/2023 21:48:00'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: 'sueloAExcavar1 excavadoraDeSuelo1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TurboDeactivated stamp: 'CB 5/8/2023 21:48:06'!
TurboStatus subclass: #TurboDeactivated
	instanceVariableNames: 'next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboActivated stamp: 'CB 5/8/2023 21:48:06'!
TurboStatus subclass: #TurboActivated
	instanceVariableNames: 'next speedingRatio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboStatus stamp: 'CB 5/8/2023 21:48:06'!
Object subclass: #TurboStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Track stamp: 'CB 5/8/2023 21:48:07'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboSector stamp: 'CB 5/8/2023 21:48:07'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NoTurboSector stamp: 'CB 5/8/2023 21:48:07'!
Sector subclass: #NoTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'CB 5/8/2023 21:48:07'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'CB 5/8/2023 21:48:08'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'CB 5/8/2023 21:48:08'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'CB 5/8/2023 21:48:08'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

----SNAPSHOT----(8 May 2023 21:48:32) CuisUniversity-5706.image priorSource: 10200366!

----STARTUP---- (8 May 2023 21:48:39) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

!testRun: #TestDePerforación #test20NoPuedeCrearUnSueloConDosCapasContiguasIguales stamp: 'CB 5/8/2023 21:48:50'!
PASSED!

----STARTUP---- (11 May 2023 17:26:32) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


TestCase subclass: #AlignColumnsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

!classDefinition: #AlignColumnsTest category: 'AlignColumns' stamp: 'CB 5/11/2023 17:41:33'!
TestCase subclass: #AlignColumnsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

!classDefinition: #AlingColumns category: 'AlignColumns' stamp: 'CB 5/11/2023 17:44:31'!
Object subclass: #AlingColumns
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!
!AlignColumnsTest methodsFor: 'no messages' stamp: 'CB 5/11/2023 17:44:21'!
test01
       self assert: #() equals: (AlingColumns new align: #())! !
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:49:50' prior: 50665269!
test01
       self assert: #() equals: (AlingColumns new for: #()) value! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:49:52'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:49:52'!
ERROR!
!AlingColumns methodsFor: 'no messages' stamp: 'CB 5/11/2023 17:50:16' overrides: 16902254!
value 
      ^#()! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:50:20'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:50:20'!
ERROR!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:50:36' prior: 50665275!
test01
       self assert: #() equals: (AlingColumns for: #()) value! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:50:37'!
ERROR!
!AlingColumns class methodsFor: 'no messages' stamp: 'CB 5/11/2023 17:51:02'!
for: anArray
     ^self new! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:51:06'!
PASSED!

----SNAPSHOT----(11 May 2023 17:51:46) CuisUniversity-5706.image priorSource: 10646287!
!AlignColumnsTest methodsFor: 'nil' stamp: 'CB 5/11/2023 17:52:52'!
test02

      self assert: #('hola') 
            equals: (AlingColumns for: #('hola')) value! !

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:52:54'!
FAILURE!
!AlingColumns class methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:53:39' prior: 50665302!
for: anArray
     ^self newInitializeWith: anArray! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:53:42'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:53:42'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:53:45'!
ERROR!
!AlingColumns class methodsFor: 'instance creation' stamp: 'CB 5/11/2023 17:53:53'!
newInitializeWith: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewInitializeWith: anArray ! !

!classDefinition: 'AlingColumns class' category: 'AlignColumns' stamp: 'CB 5/11/2023 17:54:45'!
AlingColumns class
	instanceVariableNames: 'contents'!
!AlingColumns class methodsFor: 'instance creation' stamp: 'CB 5/11/2023 17:54:39' prior: 50665332!
newInitializeWith: lines 
	   contents  :=lines
! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:54:54'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:55:37' prior: 50665285 overrides: 16902254!
value 
     ! !

!classDefinition: #AlingColumns category: 'AlignColumns' stamp: 'CB 5/11/2023 17:55:53'!
Object subclass: #AlingColumns
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:55:51'!
newInitializeWith: lines 
	   contents  :=lines

     ! !

!methodRemoval: AlingColumns class #newInitializeWith: stamp: 'CB 5/11/2023 17:55:58'!
newInitializeWith: lines 
	   contents  :=lines
!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:56:33' prior: 50665354 overrides: 16902254!
value 
     contents = #()
            ifTrue:[#()]
     ^contents! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:56:38' prior: 50665375 overrides: 16902254!
value 
     contents = #()
            ifTrue:[#()].
     ^contents! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:56:39'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:56:39'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:56:43'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:56:43'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:57:16' prior: 50665381 overrides: 16902254!
value 
     contents = #()
            ifTrue:[^#()].
     ^contents! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 17:57:18'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:57:18'!
ERROR!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 17:58:18' prior: 50665311!
test02

      self assert: #( 
                        #('hola')) 
            equals: (AlingColumns for: #( 
                        #('hola')))  value! !

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 17:58:19'!
ERROR!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:00:05'!
test03

      self assert: #( 
                        #('hola')
                        #('chau') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('hola')
                        #('chau') 
                         ))  value! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:00:22' prior: 50665397 overrides: 16902254!
value 
     contents = #()
            ifTrue:[#()].
      
     ^contents! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:02:09' prior: 50665432 overrides: 16902254!
value 
     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)]  
  ! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:02:17'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:02:17'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:02:17'!
ERROR!

----SNAPSHOT----(11 May 2023 18:02:29) CuisUniversity-5706.image priorSource: 10677035!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:02:41' prior: 50665365!
newInitializeWith: lines 
	   contents  := lines.

     ! !
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:03:36' prior: 50665408!
test02

      self assert: #( 
                        #('hola')
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('hola')
                         ))  value! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:03:42'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:03:42'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:03:42'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:03:43'!
ERROR!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:04:32'!
test04

      self assert: #( 
                        #('hola')
                        #('12  ') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('hola')
                        #('12') 
                         ))  value! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:06:02'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:06:02'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:06:02'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:06:02'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:06:07'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:06:55'!
newInitializeWith1: lines 
	   contents  := lines.

     ! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:06:57' prior: 50665459!
newInitializeWith: lines 
	   contents  := lines.

     ! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:06:59'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:06:59'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:06:59'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:06:59'!
ERROR!

!methodRemoval: AlingColumns #newInitializeWith1: stamp: 'CB 5/11/2023 18:07:13'!
newInitializeWith1: lines 
	   contents  := lines.

     !
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:07:22'!
test05

      self assert: #( 
                        #('hola')
                        #('12  ') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('hola')
                        #('12') 
                         ))  value! !
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:08:11' prior: 50665484!
test04

      self assert: #( 
                        #('hola')
                        #('casa')
                        #('chau') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('hola')
                        #('casa')
                        #('chau')  
                         ))  value! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:08:32' prior: 50665513!
newInitializeWith: lines 
	   contents  := lines

     ! !

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:08:38'!
ERROR!

AlingColumns class
	instanceVariableNames: ''!

!classDefinition: 'AlingColumns class' category: 'AlignColumns' stamp: 'CB 5/11/2023 18:08:56'!
AlingColumns class
	instanceVariableNames: ''!

AlingColumns class
	instanceVariableNames: 's'!

!classDefinition: 'AlingColumns class' category: 'AlignColumns' stamp: 'CB 5/11/2023 18:08:59'!
AlingColumns class
	instanceVariableNames: 's'!

AlingColumns class
	instanceVariableNames: ''!

!classDefinition: 'AlingColumns class' category: 'AlignColumns' stamp: 'CB 5/11/2023 18:09:01'!
AlingColumns class
	instanceVariableNames: ''!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:09:08'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:09:08'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:09:08'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:09:08'!
ERROR!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:09:08'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:09:11'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:09:56' prior: 50665439 overrides: 16902254!
value 
     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] ! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:11:04' prior: 50665601 overrides: 16902254!
value  
     ^contents collect: [:each | each]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:11:26'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:11:26'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:11:26'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:11:26'!
ERROR!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:11:26'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:11:35'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:11:35'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:11:35'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:11:35'!
ERROR!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:11:35'!
ERROR!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:11:37'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:12:07'!
initializeWith: lines 
	   contents  := lines

     ! !
!AlingColumns class methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:12:14' prior: 50665320!
for: anArray
     ^self initializeWith: anArray! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:12:22'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:12:22'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:12:22'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:12:22'!
ERROR!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:12:22'!
ERROR!
!AlingColumns class methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:12:41' prior: 50665660!
for: anArray
     ^self new initializeWith: anArray! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:12:43'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:12:43'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:12:43'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:12:43'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:12:43'!
FAILURE!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:12:43'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:16:03' prior: 50665615 overrides: 16902254!
value  
     ^contents collect: [:eachRow | (eachRow at: 1) size < 4
	                         ifTrue: [Array with: ((eachRow at: 1),'  ')]
	                         ifFalse: [Array with: ((eachRow at: 1),'  ')]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:16:05'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:16:05'!
FAILURE!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:16:05'!
FAILURE!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:16:05'!
FAILURE!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:16:05'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:16:30' prior: 50665697 overrides: 16902254!
value  
     ^contents collect: [:eachRow | (eachRow at: 1) size < 4
	                         ifTrue: [Array with: ((eachRow at: 1),'  ')]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:16:31'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:16:31'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:16:31'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:16:31'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:16:31'!
PASSED!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:18:01'!
test06

      self assert: #( 
                        #('holas')
                        #('12   ') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('holas')
                        #('12') 
                         ))  value! !

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:18:05'!
FAILURE!

!methodRemoval: AlingColumns #newInitializeWith: stamp: 'CB 5/11/2023 18:18:14'!
newInitializeWith: lines 
	   contents  := lines

     !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:19:45' prior: 50665730 overrides: 16902254!
value  
      |firstWordSize|
      firstWordSize := (contents at: 1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < (eachRow at: 1) size
	                         ifTrue: [Array with: ((eachRow at: 1),'  ')]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:20:10' prior: 50665781 overrides: 16902254!
value  
      |firstWordSize|
      firstWordSize := (contents at: 1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: ((eachRow at: 1),'  ')]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:22:52' prior: 50665804 overrides: 16902254!
value  
      |firstWordSize|
      firstWordSize := (contents at: 1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: ((eachRow at: 1), (String new: (firstWordSize - (eachRow at: 1) size) withAll: $ ))]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:23:45' prior: 50665827 overrides: 16902254!
value  
      |firstWordSize|
      firstWordSize := (contents at: 1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: ((eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ ))]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:23:53'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:23:53'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:23:53'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:23:53'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:23:53'!
FAILURE!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:23:53'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:24:08' prior: 50665852 overrides: 16902254!
value  
      |firstWordSize|
      firstWordSize := ((contents at: 1) at:1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: ((eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ ))]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:24:09'!
ERROR!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:24:09'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:24:09'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:24:09'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:24:09'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:24:09'!
PASSED!

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:24:09'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:25:10' prior: 50665891 overrides: 16902254!
value  
      |firstWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: ((eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ ))]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:25:50' prior: 50665933 overrides: 16902254!
value  
      |firstWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
     ^contents collect: [:eachRow | (eachRow at: 1) size < firstWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:25:52'!
PASSED!
!AlignColumnsTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:28:20'!
test07

      self assert: #( 
                        #('12 ')
                        #('abc') 
                         ) 
            equals: (AlingColumns for: 
                        #( 
                        #('12')
                        #('abc') 
                         ))  value! !

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:28:21'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:30:59' prior: 50665959 overrides: 16902254!
value  
      |firstWordSize secondWordSize maxWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
        secondWordSize := ((contents at: 2) at:1) size.
        maxWordSize := firstWordSize max: secondWordSize.
     ^contents collect: [:eachRow | (eachRow at: 1) size <  maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:31:01'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:31:01'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:31:01'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:31:01'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:31:01'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:31:01'!
PASSED!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:31:01'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:32:37' prior: 50666015 overrides: 16902254!
value  
      |firstWordSize secondWordSize maxWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
        (contents size = 1) 
                       ifTrue:[maxWordSize := firstWordSize]
                       ifFalse:[ 
        secondWordSize := ((contents at: 2) at:1) size.
        maxWordSize := firstWordSize max: secondWordSize.
     ^contents collect: [:eachRow | (eachRow at: 1) size <  maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:33:26' prior: 50666062 overrides: 16902254!
value  
      |firstWordSize secondWordSize maxWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
        (contents size = 1) 
                       ifTrue:[maxWordSize := firstWordSize.]
                       ifFalse:[ 
        secondWordSize := ((contents at: 2) at:1) size.
        maxWordSize := firstWordSize max: secondWordSize.].

     ^contents collect: [:eachRow | (eachRow at: 1) size <  maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]
	]
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:33:28'!
PASSED!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:33:28'!
FAILURE!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:33:28'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:34:14' prior: 50666096 overrides: 16902254!
value  
      |firstWordSize secondWordSize maxWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
        (contents size = 1) 
                       ifTrue:[maxWordSize := firstWordSize.]
                       ifFalse:[ 
        secondWordSize := ((contents at: 2) at:1) size.
        maxWordSize := firstWordSize max: secondWordSize.].

     ^contents collect: [:eachRow | (eachRow at: 1) size <  maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]]
	
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:34:15'!
PASSED!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:34:15'!
FAILURE!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:34:15'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:34:47' prior: 50666150 overrides: 16902254!
value  
      |firstWordSize secondWordSize maxWordSize|
       contents = #() ifTrue:[^#()].
        firstWordSize := ((contents at: 1) at:1) size.
        (contents size = 1) 
                       ifTrue:[maxWordSize := firstWordSize]
                       ifFalse:[ 
        secondWordSize := ((contents at: 2) at:1) size.
        maxWordSize := firstWordSize max: secondWordSize.].

     ^contents collect: [:eachRow | (eachRow at: 1) size <  maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((firstWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]]
	
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:34:48'!
PASSED!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:34:48'!
FAILURE!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:34:48'!
FAILURE!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:43:38'!
maxWordSize 
       |maxWordSize|
   
        maxWordSize withIndexDo: [:element :index | 
	((contents at: index) at: 1) size > maxWordSize 
	ifTrue:[]]

    ! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:44:57' prior: 50666257!
maxWordSize 
       |maxWordSize|
   
        maxWordSize withIndexDo: [:element :index | 
	((contents at: index) at: 1) size > maxWordSize 
	ifTrue:[ maxWordSize := ((contents at: index) at: 1) size]]

    ! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:45:10' prior: 50666266!
maxWordSize 
       |maxWordSize|
   
        maxWordSize withIndexDo: [:element :index | 
	((contents at: index) at: 1) size > maxWordSize 
	ifTrue:[ maxWordSize := ((contents at: index) at: 1) size]]

          ^maxWordSize 

    ! !
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:46:16' prior: 50666204 overrides: 16902254!
value  
      
       contents = #() ifTrue:[^#()].

     ^contents collect: [:eachRow | (eachRow at: 1) size <  self maxWordSize
	                         ifTrue: [Array with: (eachRow at: 1), (String new: ((self maxWordSize - (eachRow at: 1) size)) withAll: $ )]
	                         ifFalse: [Array with: (eachRow at: 1)]]
	
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

!testRun: #AlignColumnsTest #test01 stamp: 'CB 5/11/2023 18:46:23'!
PASSED!

!testRun: #AlignColumnsTest #test02 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!

!testRun: #AlignColumnsTest #test03 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!

!testRun: #AlignColumnsTest #test04 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!

!testRun: #AlignColumnsTest #test05 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!

!testRun: #AlignColumnsTest #test06 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!

!testRun: #AlignColumnsTest #test07 stamp: 'CB 5/11/2023 18:46:23'!
ERROR!
!AlingColumns methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 18:46:45' prior: 50666287 overrides: 16902254!
value  
      
       contents = #() ifTrue:[^#()].

     ^contents collect: [:eachRow | (eachRow at: 1) size <  self maxWordSize
	               ifTrue: [Array with: (eachRow at: 1), (String new: ((self maxWordSize - (eachRow at: 1) size)) withAll: $ )]
	               ifFalse: [Array with: (eachRow at: 1)]]
	
"     contents = #()
            ifTrue:[#()].
     contents size = 1 ifTrue:[^Array with:(contents at: 1)]. 
     contents size = 2 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2)].  
     contents size = 3 ifTrue:[^Array with: (contents at: 1) with: (contents at: 2) with: (contents at: 3)] "! !

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'CB 5/11/2023 20:43:47'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRoverTest category: 'MarsRoverEjercicio' stamp: 'CB 5/11/2023 20:44:12'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'CB 5/11/2023 20:48:17'!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := (MarsRover landAt: #(0 0) withDirection: 'N')
    self assert: #(0 0) equals: aRobot position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 20:48:59' prior: 50666373!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := (MarsRover landAt: #(0 0) withDirection: 'N').
    self assert: #(0 0) equals: aRobot position.
    self assert:  'N' equals: aRobot direction.
    ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 20:49:31' prior: 50666382!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: #(0 0).
    self assert: #(0 0) equals: aRobot position.
  
    ! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:49:35'!
ERROR!
!MarsRover class methodsFor: 'creation' stamp: 'CB 5/11/2023 20:49:42'!
landAt: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'creation' stamp: 'CB 5/11/2023 20:50:08' prior: 50666403!
landAt: aRenameMe1 
	self new initializeWith: aRenameMe1! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:50:10'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:50:17'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:50:17'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'CB 5/11/2023 20:50:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'fdasd' stamp: 'CB 5/11/2023 20:50:23'!
initializeWith: aRenameMe1 
	self shouldBeImplemented.
	renameMe1 := aRenameMe1.! !
!MarsRover methodsFor: 'fdasd' stamp: 'CB 5/11/2023 20:50:31' prior: 50666427!
initializeWith: aRenameMe1
	renameMe1 := aRenameMe1.! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:50:35'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:50:35'!
ERROR!
!MarsRover methodsFor: 'fdasd' stamp: 'CB 5/11/2023 20:51:11'!
position
	^renameMe1 ! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:12'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:12'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:18'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:18'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:43'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:51:43'!
ERROR!
!MarsRover class methodsFor: 'creation' stamp: 'CB 5/11/2023 20:52:15' prior: 50666408!
landAt: aRenameMe1 
	^self new initializeWith: aRenameMe1! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:52:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:52:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:52:22'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:52:23'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'CB 5/11/2023 20:52:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'fdasd' stamp: 'CB 5/11/2023 20:53:06' prior: 50666433!
initializeWith: aRenameMe1
	position := aRenameMe1.! !
!MarsRover methodsFor: 'fdasd' stamp: 'CB 5/11/2023 20:53:32' prior: 50666486!
initializeWith: aPositionToInitialize
	position := aPositionToInitialize.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 20:57:34' prior: 50666393!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: #(0 0) headingTo: 'N'.
    self assert: #(0 0) equals: aRobot position.
  
    ! !
!MarsRover class methodsFor: 'creation' stamp: 'CB 5/11/2023 20:58:04'!
landAt: aRenameMe1 headingTo: aDirection
	^self new initializeWith: aRenameMe1! !
!MarsRover class methodsFor: 'creation' stamp: 'CB 5/11/2023 20:58:41' prior: 50666505!
landAt: aPositionToStart headingTo: aDirection
	^self new initializeWith: aPositionToStart and: aDirection! !

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'CB 5/11/2023 20:59:20'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 20:59:18'!
initializeWith: aPositionToStart and: aDirection
	position := aPositionToStart.
	direction := aDirection.! !

!methodRemoval: MarsRover #initializeWith: stamp: 'CB 5/11/2023 20:59:24'!
initializeWith: aPositionToInitialize
	position := aPositionToInitialize.!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 20:59:34' prior: 50666442!
position
	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 20:59:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 21:03:05' prior: 50666497!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: #(0 0) headingTo: 'N'.
    self assert: #(0 0) equals: aRobot position.
    self assert: 'N' equals: aRobot direction.
    ! !
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:03:40'!
direction
	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:03:45'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:04:20' prior: 50666536!
position
	^#(0 0)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 21:05:10' prior: 50666543!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: 0@0 headingTo: 'N'.
    self assert: 0@0 equals: aRobot position.
    self assert: 'N' equals: aRobot direction.
    ! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:05:12'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:05:24' prior: 50666559!
position
	^0@0! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:05:26'!
PASSED!

!methodRemoval: MarsRover class #landAt: stamp: 'CB 5/11/2023 21:05:57'!
landAt: aRenameMe1 
	^self new initializeWith: aRenameMe1!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:11:11' prior: 50666553!
direction
	^'N'! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:11:12'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:11:37' prior: 50666585!
direction
	^$N! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 21:11:53' prior: 50666563!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: 0@0 headingTo: $N.
    self assert: 0@0 equals: aRobot position.
    self assert: 'N' equals: aRobot direction.
    ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'CB 5/11/2023 21:12:33' prior: 50666595!
test01  
   "testeamos lo + facil, posición inicial"
   |aRobot|
    aRobot := MarsRover landAt: 0@0 headingTo: #Norte.
    self assert: 0@0 equals: aRobot position.
    self assert: #Norte equals: aRobot direction.
    ! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:12:35'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/11/2023 21:12:47' prior: 50666591!
direction
	^#Norte ! !

!testRun: #MarsRoverTest #test01 stamp: 'CB 5/11/2023 21:14:05'!
PASSED!

----STARTUP---- (13 May 2023 11:33:58) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'CB 5/13/2023 11:35:28'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'sentences encontradas sentencesRevisadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #PrefijoVacio stamp: 'CB 5/13/2023 11:35:28'!
Prefix subclass: #PrefijoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SinEspacio stamp: 'CB 5/13/2023 11:35:28'!
PrefijoNoVacio subclass: #SinEspacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #ConEspacio stamp: 'CB 5/13/2023 11:35:28'!
PrefijoNoVacio subclass: #ConEspacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #PrefijoNoVacio stamp: 'CB 5/13/2023 11:35:29'!
Prefix subclass: #PrefijoNoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Prefix stamp: 'CB 5/13/2023 11:35:29'!
Object subclass: #Prefix
	instanceVariableNames: 'prefixValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Vacio stamp: 'CB 5/13/2023 11:35:29'!
OOStackStatus subclass: #Vacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NoVacio stamp: 'CB 5/13/2023 11:35:29'!
OOStackStatus subclass: #NoVacio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStatus stamp: 'CB 5/13/2023 11:35:29'!
Object subclass: #OOStackStatus
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CB 5/13/2023 11:35:29'!
Object subclass: #OOStack
	instanceVariableNames: 'values stackStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CB 5/13/2023 11:35:29'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'sentenceStack sentenceToFind'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CB 5/13/2023 11:35:30'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #AlingColumns stamp: 'CB 5/13/2023 11:35:34'!
Object subclass: #AlingColumns
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

!classRemoval: #AlignColumnsTest stamp: 'CB 5/13/2023 11:35:34'!
TestCase subclass: #AlignColumnsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlignColumns'!

----SNAPSHOT----(13 May 2023 11:35:38) CuisUniversity-5706.image priorSource: 10681748!

----SNAPSHOT----(13 May 2023 11:35:48) CuisUniversity-5706.image priorSource: 10722128!

----STARTUP---- (13 May 2023 14:53:52) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Solution-2.st----!

----STARTUP---- (13 May 2023 15:09:36) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Solution-2.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Numero-Solution-3.6.st----!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\AlgebraDeBoole-Prototipos.st----!

Verdadero subclass: #Verdadero1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: #Verdadero1 category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 15:55:56'!
Verdadero subclass: #Verdadero1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

Verdadero1 new!

Verdadero1 new not!

Verdadero1 not!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\MarsRover-Ejercicio.st----!
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/13/2023 16:21:30'!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:22:23' prior: 50668997!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:22:35'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:22:35'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:22:35'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:23:35' prior: 50668911!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:37'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:23:37'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:23:37'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:23:49' prior: 50669154!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:23:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:23:52'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:23:52'!
PASSED!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:24:48'!
test38MarsRoverFacingEastRotatesLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !

!methodRemoval: MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 16:24:48'!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:25:44'!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'fb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:25:47'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:26:08'!
PASSED!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:28:03' prior: 50669570!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rfr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: West.! !

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:28:05'!
FAILURE!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:28:29'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:31:23' prior: 50669354!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	aCommand = 'rfr' ifTrue: [position := 0@-1.
		                                 ^direction :=West].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:31:25'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:31:25'!
FAILURE!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:31:25'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:31:33' prior: 50669743!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	aCommand = 'rfr' ifTrue: [position := 0@1.
		                                 ^direction :=West].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:31:35'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:31:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:31:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:31:36'!
PASSED!

'rbf' do: [:each | each + 'a']!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:41:08'!
cmoves! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:49:48'!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = 'f' ifTrue:[
		^position := position + (0@1).
		].
	        oneCommand = 'b' ifTrue:[
		^position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position + (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position - (0@1).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position - (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position  + (1@0).
		].
	].
	(oneCommand = 'r') ifTrue: [
		^direction := direction right
	].
	(oneCommand = 'l') ifTrue: [
		^direction := direction left.
	].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:50:43' prior: 50669950!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand do: [:oneCommand |self moves: oneCommand]
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:50:48'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:50:49'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:50:49'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:51:19'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:51:24'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:52:14'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:53:21' prior: 50670187!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	1 to: aCommand size do: [|oneCommand| self moves: oneCommand]
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:53:26'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:53:26'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:54:11' prior: 50670345!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:54:13'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:54:13'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:55:45' prior: 50670157!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = 'f' ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = 'b' ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = 'b') ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = 'r') ifTrue: [
		direction := direction right
	].
	(oneCommand = 'l') ifTrue: [
		direction := direction left.
	].
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:55:48'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 16:56:17'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 16:56:17'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:56:28'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:56:52'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 16:57:08'!
PASSED!

----STARTUP---- (13 May 2023 17:03:00) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classDefinition: #OOStackTest category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackTest category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'Something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:31'!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'Something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:50'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:33'!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'First'.
	secondPushedObject := 'Second'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:35'!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:36'!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:38'!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:45'!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'Something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:54'!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #OOStack category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStack category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStack methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2012 11:43' overrides: 16920235!
initialize

	top := OOStackBase new! !
!OOStack methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:46'!
isEmpty

	^ top isEmpty! !
!OOStack methodsFor: 'push/pop' stamp: 'HernanWilkinson 5/7/2012 11:45'!
pop

	| pushedObject |
	
	pushedObject := self top.
	top := top previous.
	
	^ pushedObject ! !
!OOStack methodsFor: 'push/pop' stamp: 'NR 4/22/2019 15:03:10'!
push: anObject

	top := OOPushedObjectCell over: top with: anObject! !
!OOStack methodsFor: 'push/pop' stamp: 'HernanWilkinson 5/7/2012 11:46'!
top

	^ top content! !
!OOStack methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:47' overrides: 16901663!
size

	^ top deepSize! !

!classDefinition: 'OOStack class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2012 11:51'!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !

!classDefinition: #OOStackTop category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackTop category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackTop methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:52'!
content
	self subclassResponsibility! !
!OOStackTop methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:52'!
deepSize
	self subclassResponsibility! !
!OOStackTop methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:52'!
isEmpty
	self subclassResponsibility! !

!classDefinition: #OOPushedObjectCell category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOPushedObjectCell category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOPushedObjectCell methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:50' overrides: 50671136!
content
	
	^ content! !
!OOPushedObjectCell methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:50' overrides: 50671140!
deepSize
	
	^ previous deepSize + 1! !
!OOPushedObjectCell methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2012 11:49'!
initializeOver: anStackTop with: anObject

	previous := anStackTop.
	content := anObject! !
!OOPushedObjectCell methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:49' overrides: 50671144!
isEmpty
	
	^ false! !
!OOPushedObjectCell methodsFor: 'previous' stamp: 'HernanWilkinson 5/7/2012 11:50'!
previous
	
	^ previous! !

!classDefinition: 'OOPushedObjectCell class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOPushedObjectCell class
	instanceVariableNames: ''!

!classDefinition: 'OOPushedObjectCell class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOPushedObjectCell class
	instanceVariableNames: ''!
!OOPushedObjectCell class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2012 11:48'!
over: anStackTop with: anObject

	^ self new initializeOver: anStackTop with: anObject! !

!classDefinition: #OOStackBase category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackBase category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackBase methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:52' overrides: 50671136!
content

	self error: OOStack stackEmptyErrorDescription ! !
!OOStackBase methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:51' overrides: 50671140!
deepSize
	
	^ 0! !
!OOStackBase methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:47' overrides: 50671144!
isEmpty
	
	^ true! !

!classDefinition: #OOStackTest category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackTest category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:06'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30' prior: 50670970!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30' prior: 50670976!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'Something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:31' prior: 50670983!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'Something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:50' prior: 50670990!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:33' prior: 50670999!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'First'.
	secondPushedObject := 'Second'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:35' prior: 50671013!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:36' prior: 50671022!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'Something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:38' prior: 50671032!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:45' prior: 50671043!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'Something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:49:54' prior: 50671056!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #OOStack category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStack category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStack methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2012 11:43' prior: 50671082 overrides: 16920235!
initialize

	top := OOStackBase new! !
!OOStack methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:46' prior: 50671086!
isEmpty

	^ top isEmpty! !
!OOStack methodsFor: 'push/pop' stamp: 'HernanWilkinson 5/7/2012 11:45' prior: 50671090!
pop

	| pushedObject |
	
	pushedObject := self top.
	top := top previous.
	
	^ pushedObject ! !
!OOStack methodsFor: 'push/pop' stamp: 'NR 4/22/2019 15:03:10' prior: 50671095!
push: anObject

	top := OOPushedObjectCell over: top with: anObject! !
!OOStack methodsFor: 'push/pop' stamp: 'HernanWilkinson 5/7/2012 11:46' prior: 50671100!
top

	^ top content! !
!OOStack methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:47' prior: 50671104 overrides: 16901663!
size

	^ top deepSize! !

!classDefinition: 'OOStack class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2012 11:51' prior: 50671117!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !

!classDefinition: #OOStackTop category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackTop category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackTop methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:52' prior: 50671136!
content
	self subclassResponsibility! !
!OOStackTop methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:52' prior: 50671140!
deepSize
	self subclassResponsibility! !
!OOStackTop methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:52' prior: 50671144!
isEmpty
	self subclassResponsibility! !

!classDefinition: #OOPushedObjectCell category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOPushedObjectCell category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOPushedObjectCell methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:50' prior: 50671165 overrides: 50671416!
content
	
	^ content! !
!OOPushedObjectCell methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:50' prior: 50671169 overrides: 50671420!
deepSize
	
	^ previous deepSize + 1! !
!OOPushedObjectCell methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2012 11:49' prior: 50671174!
initializeOver: anStackTop with: anObject

	previous := anStackTop.
	content := anObject! !
!OOPushedObjectCell methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:49' prior: 50671181 overrides: 50671425!
isEmpty
	
	^ false! !
!OOPushedObjectCell methodsFor: 'previous' stamp: 'HernanWilkinson 5/7/2012 11:50' prior: 50671185!
previous
	
	^ previous! !

!classDefinition: 'OOPushedObjectCell class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOPushedObjectCell class
	instanceVariableNames: ''!

!classDefinition: 'OOPushedObjectCell class' category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOPushedObjectCell class
	instanceVariableNames: ''!
!OOPushedObjectCell class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2012 11:48' prior: 50671199!
over: anStackTop with: anObject

	^ self new initializeOver: anStackTop with: anObject! !

!classDefinition: #OOStackBase category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classDefinition: #OOStackBase category: 'Stack-Solution-2' stamp: 'CB 5/13/2023 17:03:07'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!
!OOStackBase methodsFor: 'content' stamp: 'HernanWilkinson 5/7/2012 11:52' prior: 50671220 overrides: 50671416!
content

	self error: OOStack stackEmptyErrorDescription ! !
!OOStackBase methodsFor: 'size' stamp: 'HernanWilkinson 5/7/2012 11:51' prior: 50671225 overrides: 50671420!
deepSize
	
	^ 0! !
!OOStackBase methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2012 11:47' prior: 50671229 overrides: 50671425!
isEmpty
	
	^ true! !

!classDefinition: #NumeroTest category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:07'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #NumeroTest category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:07'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/24/2018 01:22:59' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 10/1/2018 01:21:31'!
test27BisEnteroSubstractsEnteroCorrectly

	self assert: two - one equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 5/3/2017 19:24:12'!
test27ZeroDivideAnythingIsZero

	self assert: zero / one equals: zero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:44'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:21:50'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:11'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:17'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:27'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:22:33'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:22'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:29'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:36'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:41'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2018 01:23:45'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/30/2018 19:50:22'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)
	! !

!classDefinition: #Numero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Numero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:55:01'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/24/2018 00:56:58'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:34'!
addEntero: anEnteroAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:39'!
addFraccion: aFraccionAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:50'!
divideEntero: anEnteroDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:03:58'!
divideFraccion: aFraccionDividend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:03'!
multiplyEntero: anEnteroMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:10'!
multiplyFraccion: aFraccionMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:51'!
subtractEntero: anEnteroMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:04:46'!
subtractFraccion: aFraccionMinuend

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:12'!
isNegative

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:07'!
isOne

	^false! !
!Numero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:13'!
isZero

	^false! !

!classDefinition: 'Numero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2016 22:45'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero'! !

!classDefinition: #Entero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Entero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:59' overrides: 50671840!
* aMultiplier 
	
	^aMultiplier multiplyEntero: self ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:56' overrides: 50671845!
+ anAdder 
	
	^anAdder addEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 5/13/2020 12:07:31' overrides: 50671849!
- aSubtrahend 
	
	^aSubtrahend subtractEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:01' overrides: 50671854!
/ aDivisor 
	
	^aDivisor divideEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:23:59'!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 20:24:33'!
fibonacci

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 5/3/2017 18:24:07'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:14:16' overrides: 50671862!
addEntero: anEnteroAdder 
	
	^self class with: anEnteroAdder integerValue + self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:22' overrides: 50671867!
addFraccion: aFraccionAdder

	^self + aFraccionAdder 
	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:31:24'!
asDenominatorOf: aNumerator

	^Fraccion safeWith: aNumerator over: self
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:36' overrides: 50671872!
divideEntero: anEnteroDividend

	^anEnteroDividend over: self! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:05:47' overrides: 50671877!
divideFraccion: aFraccionDividend

	^aFraccionDividend numerator / (aFraccionDividend denominator * self) ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:14:31' overrides: 50671882!
multiplyEntero: anEnteroMultiplier

	^self class with: anEnteroMultiplier integerValue * self integerValue! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:06:03' overrides: 50671887!
multiplyFraccion: aFraccionMultiplier

	^self * aFraccionMultiplier ! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:06:34'!
over: anEnteroDivisor
	
	| denominator greatestCommonDivisor numerator |
	
	greatestCommonDivisor := self greatestCommonDivisorWith: anEnteroDivisor. 
	numerator := self // greatestCommonDivisor.
	denominator := anEnteroDivisor // greatestCommonDivisor.
	
	^denominator asDenominatorOf: numerator	! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:07:11' overrides: 50671892!
subtractEntero: anEnteroMinuend 
	
	^self class with: anEnteroMinuend integerValue - self integerValue
! !
!Entero methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:07:15' overrides: 50671897!
subtractFraccion: anEnteroMinuend 
			
	^anEnteroMinuend numerator - (self * anEnteroMinuend denominator) / (anEnteroMinuend denominator). ! !
!Entero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:39'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	self subclassResponsibility ! !
!Entero methodsFor: 'printing' stamp: 'NR 9/30/2018 19:49:42' overrides: 16902975!
printOn: aStream

	aStream print: self integerValue ! !

!classDefinition: 'Entero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:11'!
canHandle: aValue

	self subclassResponsibility! !
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:18'!
for: aValue

	self subclassResponsibility 
! !
!Entero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:25:28'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^(Entero allSubclasses detect:[:aClass | aClass canHandle: aValue]) for: aValue! !
!Entero class methodsFor: 'error descriptions' stamp: 'NR 9/24/2018 01:11:49'!
negativeFibonacciErrorDescription
	
	^ ' Fibonacci no está definido aquí para enteros negativos'! !

!classDefinition: #Cero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Cero category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Cero methodsFor: 'value' stamp: 'HAW 5/3/2017 18:25:48' overrides: 50672048!
integerValue

	^0! !
!Cero methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:34' overrides: 50671908!
isZero

	^true! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:34:25' overrides: 50671996!
divideEntero: aDividend

	self error: self class canNotDivideByZeroErrorDescription
	! !
!Cero methodsFor: 'arithmetic operations - private' stamp: 'HAW 10/1/2018 10:33:21' overrides: 50672021!
over: aDivisor

	^self! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 09:58:06' overrides: 50671941!
* aMultiplier 
	
	^ self! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 09:58:51' overrides: 50671947!
+ anAdder 
	
	^anAdder
	! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 10:04:03' overrides: 50671952!
- aSubtrahend 
	
	^aSubtrahend negated! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:03' overrides: 50671967!
fibonacci

	^ Entero with: 1.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 10:04:23' overrides: 50671858!
negated

	^self! !

!classDefinition: 'Cero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Cero class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'Cero class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Cero class
	instanceVariableNames: 'uniqueInstance'!
!Cero class methodsFor: 'initialization' stamp: 'HAW 5/3/2017 18:27:46' overrides: 16904184!
initialize

	uniqueInstance := self basicNew ! !
!Cero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:51' overrides: 50672069!
canHandle: aValue

	^aValue = 0! !
!Cero class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:27:57' overrides: 50672074!
for: aValue

	^self new! !
!Cero class methodsFor: 'instance creation' stamp: 'HAW 5/3/2017 18:27:26' overrides: 16785646!
new

	^uniqueInstance! !

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #EnteroMenosCeroYUno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!EnteroMenosCeroYUno methodsFor: 'initialization' stamp: 'NR 9/24/2018 01:25:29'!
initializeWith: aValue 
	
	value := aValue! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:02' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!EnteroMenosCeroYUno methodsFor: 'comparing' stamp: 'HAW 5/3/2017 18:31:08' overrides: 16901788!
hash

	^value hash! !
!EnteroMenosCeroYUno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:02' overrides: 50672048!
integerValue

	^value ! !

!classDefinition: 'EnteroMenosCeroYUno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
EnteroMenosCeroYUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroMenosCeroYUno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:08'!
EnteroMenosCeroYUno class
	instanceVariableNames: ''!
!EnteroMenosCeroYUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:28:36' overrides: 50672069!
canHandle: anEntero

	^false! !
!EnteroMenosCeroYUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:00' overrides: 50672074!
for: aValue

	^self new initializeWith: aValue! !

!classDefinition: #Negativo category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Negativo category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Negativo methodsFor: 'arithmetic operations' stamp: 'NR 9/30/2018 19:44:11' overrides: 50671996!
divideEntero: aDividend
	
	^ aDividend negated / self negated! !
!Negativo methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:07' overrides: 50671967!
fibonacci
	
	^ self error: Entero negativeFibonacciErrorDescription ! !
!Negativo methodsFor: 'testing' stamp: 'NR 10/1/2018 01:26:54' overrides: 50671902!
isNegative
	
	^true! !

!classDefinition: 'Negativo class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Negativo class
	instanceVariableNames: ''!

!classDefinition: 'Negativo class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Negativo class
	instanceVariableNames: ''!
!Negativo class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:18' overrides: 50672223!
canHandle: anEntero

	^anEntero < 0! !

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #PositivoMayorAUno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!PositivoMayorAUno methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:18' overrides: 50671967!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci! !

!classDefinition: 'PositivoMayorAUno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
PositivoMayorAUno class
	instanceVariableNames: ''!

!classDefinition: 'PositivoMayorAUno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
PositivoMayorAUno class
	instanceVariableNames: ''!
!PositivoMayorAUno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:30' overrides: 50672223!
canHandle: anEntero

	^anEntero > 1! !

!classDefinition: #Uno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Uno category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Uno methodsFor: 'value' stamp: 'HAW 5/3/2017 18:26:09' overrides: 50672048!
integerValue

	^1! !
!Uno methodsFor: 'testing' stamp: 'HAW 5/3/2017 18:30:41' overrides: 50671905!
isOne

	^true! !
!Uno methodsFor: 'arithmetic operations - private' stamp: 'HAW 5/3/2017 19:28:26' overrides: 50671990!
asDenominatorOf: aNumerator

	^aNumerator ! !
!Uno methodsFor: 'arithmetic operations - private' stamp: 'HAW 10/1/2018 10:36:17' overrides: 50671996!
divideEntero: aDividend

	^ aDividend ! !
!Uno methodsFor: 'arithmetic operations' stamp: 'HAW 10/1/2018 10:05:36' overrides: 50671941!
* aMultiplier 
	
	^ aMultiplier
	! !
!Uno methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:58:22' overrides: 50671967!
fibonacci
	
	^ self		! !

!classDefinition: 'Uno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Uno class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'Uno class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Uno class
	instanceVariableNames: 'uniqueInstance'!
!Uno class methodsFor: 'initialization' stamp: 'HAW 5/3/2017 18:29:22' overrides: 16904184!
initialize

	uniqueInstance := self basicNew ! !
!Uno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:29:56' overrides: 50672069!
canHandle: aValue

	^aValue = 1! !
!Uno class methodsFor: 'instance creation' stamp: 'NR 5/13/2020 12:30:03' overrides: 50672074!
for: aValue

	^self new! !
!Uno class methodsFor: 'instance creation' stamp: 'HAW 5/3/2017 18:28:02' overrides: 16785646!
new

	^uniqueInstance! !

!classDefinition: #Fraccion category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classDefinition: #Fraccion category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:03' overrides: 50671840!
* aMultiplier 
	
	^aMultiplier multiplyFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:04' overrides: 50671845!
+ anAdder 
	
	^anAdder addFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 5/13/2020 12:10:10' overrides: 50671849!
- aSubtrahend 
	
	^aSubtrahend subtractFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:06' overrides: 50671854!
/ aDivisor 
	
	^aDivisor divideFraccion: self! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:07:52' overrides: 50671862!
addEntero: anEnteroAdder

	^anEnteroAdder * denominator + numerator / denominator ! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:15:49' overrides: 50671867!
addFraccion: aFraccionAdder

	| newNumerator newDenominator |
	
	newNumerator := (denominator * aFraccionAdder numerator) + (numerator * aFraccionAdder denominator).
	newDenominator := denominator * aFraccionAdder denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:08:29' overrides: 50671872!
divideEntero: anEnteroDividend

	^anEnteroDividend * denominator / numerator
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:08:43' overrides: 50671877!
divideFraccion: aFraccionDividend

	^(aFraccionDividend numerator * denominator) / (aFraccionDividend denominator * numerator)
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:08:55' overrides: 50671882!
multiplyEntero: anEnteroMultiplier

	^anEnteroMultiplier * numerator / denominator 
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:17:53' overrides: 50671887!
multiplyFraccion: aFraccionMultiplier

	^(aFraccionMultiplier numerator * numerator) / (aFraccionMultiplier denominator * denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:09:50' overrides: 50671892!
subtractEntero: anEnteroMinuend

	^anEnteroMinuend * denominator - numerator / denominator ! !
!Fraccion methodsFor: 'arithmetic operations - private' stamp: 'NR 5/13/2020 12:11:39' overrides: 50671897!
subtractFraccion: aFraccionMinuend

	| newNumerator newDenominator |
	
	newNumerator := (denominator * aFraccionMinuend numerator) - (numerator * aFraccionMinuend denominator) .
	newDenominator := denominator * aFraccionMinuend denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HAW 5/3/2017 19:32:45'!
initializeSafeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 4/24/2021 17:34:55' overrides: 50671902!
isNegative
	
	^numerator isNegative! !

!classDefinition: 'Fraccion class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Solution-3.6' stamp: 'CB 5/13/2023 17:03:09'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation - private' stamp: 'NR 9/30/2018 19:57:05'!
safeWith: aDividend over: aDivisor

	"Sólo para ser enviado desde los objetos de la jerarquia ya que se asume que aDividend no es 0, y aDivisor no es ni 0 ni 1 ni negativo - Hernan y Nicolás."
	
	^self new initializeSafeWith: aDividend over: aDivisor ! !

!classDefinition: #Falso category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: #Falso category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: 'Falso class' category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Falso class
	instanceVariableNames: ''!

!classDefinition: 'Falso class' category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Falso class
	instanceVariableNames: ''!
!Falso class methodsFor: 'control de flujo' stamp: 'HAW 9/5/2017 08:55:25'!
siEsVerdadero: unBloque

	^nil! !
!Falso class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/5/2017 08:50:30'!
and: unValorDeVerdad

	^self! !
!Falso class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/4/2017 19:15:51'!
not

	^Verdadero ! !
!Falso class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/5/2017 08:50:37'!
or: unValorDeVerdad

	^unValorDeVerdad ! !

!classDefinition: #Verdadero category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: #Verdadero category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: 'Verdadero class' category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Verdadero class
	instanceVariableNames: ''!

!classDefinition: 'Verdadero class' category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Verdadero class
	instanceVariableNames: ''!
!Verdadero class methodsFor: 'control de flujo' stamp: 'HAW 9/5/2017 08:55:02'!
siEsVerdadero: unBloque

	^unBloque value! !
!Verdadero class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/5/2017 08:50:43'!
and: unValorDeVerdad

	^unValorDeVerdad ! !
!Verdadero class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/4/2017 19:15:04'!
not

	^Falso! !
!Verdadero class methodsFor: 'operaciones booleanas' stamp: 'HAW 9/5/2017 08:50:48'!
or: unValorDeVerdad

	^self! !

!classDefinition: #Verdadero1 category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Verdadero subclass: #Verdadero1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: #Verdadero1 category: 'AlgebraDeBoole-Prototipos' stamp: 'CB 5/13/2023 17:03:09'!
Verdadero subclass: #Verdadero1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRoverTest methodsFor: 'test private' stamp: 'NH 5/13/2023 11:55:05'!
assertMarsRover: aMarsRover IsAt: aPosition facing: aDirection

	self assert: aPosition equals:  aMarsRover currentPosition. 
	self assert: aDirection equals: aMarsRover currentDirection! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:08:57'!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:02'!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:06'!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:11'!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:03:04'!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:03:08'!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:15'!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'NH 5/13/2023 16:09:20'!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: West.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 15:59:54'!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |

	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:27'!
test01MarsRoverMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:32'!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:36'!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:42'!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'r'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:46'!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:50'!
test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:55'!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@8 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:01:59'!
test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:04'!
test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 3@2 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:08'!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:12'!
test11MarsRoverMovesFowardThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'fff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@3 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:18'!
test12MarsRoverMovesBackwardsTwiceFacingNorth

	|aMarsRover|

	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:24'!
test13MarsRoverMovesBackwardsThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:29'!
test14MarsRoverRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:33'!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:37'!
test16MarsRoverRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'NH 5/13/2023 16:02:58'!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:32'!
test26MarsRoverFacingSouthMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:36'!
test27MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: South.! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:41'!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:03:12'!
test29MarsRoverFacingSouthRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:45'!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:50'!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:03:16'!
test32MarsRoverFacingSouthRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'NH 5/13/2023 16:09:54'!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: South.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'NH 5/13/2023 16:09:58'!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'NH 5/13/2023 16:10:07'!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'NH 5/13/2023 16:11:49'!
test36MarsRoverFacingEastRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'NH 5/13/2023 16:12:00'!
test37MarsRoverFacingEastRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !

!classDefinition: #Direction category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
DenotativeObject subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Direction category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
DenotativeObject subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!Direction methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:36:51'!
left
	self subclassResponsibility! !
!Direction methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 14:36:41'!
right
	self subclassResponsibility! !

!classDefinition: #East category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #East category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: 'East class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
East class
	instanceVariableNames: ''!

!classDefinition: 'East class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
East class
	instanceVariableNames: ''!
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:09'!
left
	^South! !
!East class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:58:05'!
right
	^North! !

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #North category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: 'North class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
North class
	instanceVariableNames: 'uniqueinstance'!

!classDefinition: 'North class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
North class
	instanceVariableNames: 'uniqueinstance'!
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:23'!
left

	^East! !
!North class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:57:28'!
right
	
	^West ! !
!North class methodsFor: '--** private fileout/in **--' stamp: 'NH 5/13/2023 16:15:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!classDefinition: #South category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #South
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #South category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #South
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: 'South class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
South class
	instanceVariableNames: ''!

!classDefinition: 'South class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
South class
	instanceVariableNames: ''!
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:14'!
left
	^West! !
!South class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:08:38'!
right
	^East! !

!classDefinition: #West category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #West
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #West category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Direction subclass: #West
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: 'West class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
West class
	instanceVariableNames: ''!

!classDefinition: 'West class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
West class
	instanceVariableNames: ''!
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:21'!
left
	^North! !
!West class methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 15:59:18'!
right
	^South! !

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'initialization' stamp: 'NH 5/13/2023 15:50:51'!
initializeLandsAt: aPointInAMap facing: aDirection 
	
	position := aPointInAMap.
	direction := aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:18:04'!
currentDirection
	^direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 12:11:02'!
currentPosition
	^ position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'NH 5/13/2023 16:07:23'!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !

!classDefinition: 'MarsRover class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
MarsRover class
	instanceVariableNames: ''!

!classDefinition: 'MarsRover class' category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:03:11'!
MarsRover class
	instanceVariableNames: ''!
!MarsRover class methodsFor: 'instance creation' stamp: 'NH 5/13/2023 11:52:22'!
landsAt: aPosition facing: aDirection 

	^self new initializeLandsAt: aPosition facing: aDirection ! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'CB 5/13/2023 17:03:11'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/13/2023 16:21:30'!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: North! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:22:23' prior: 50673322!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:23:35' prior: 50673238!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:23:49' prior: 50673342!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:24:48'!
test38MarsRoverFacingEastRotatesLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !

!methodRemoval: MarsRoverTest #test38MarsRoverFacingEastLeftAndRight stamp: 'CB 5/13/2023 17:03:11'!
test38MarsRoverFacingEastLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:25:44'!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'fb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: East.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 16:28:03' prior: 50673485!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: East.
	aMarsRover readCommands: 'rfr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: West.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:31:23' prior: 50673404!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	aCommand = 'rfr' ifTrue: [position := 0@-1.
		                                 ^direction :=West].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:31:33' prior: 50673506!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'rl' ifTrue: [^self].
	aCommand = 'rfr' ifTrue: [position := 0@1.
		                                 ^direction :=West].
	(direction = North) ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (0@timesToMoveBackwards).
		].
	].
	direction = West ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position + (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position - (timesToMoveBackwards@0).
		].

	].
	direction = South ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (0@timesToMoveFoward).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (0@timesToMoveBackwards).
		]
	].
	direction = East ifTrue: [
		(aCommand includesSubString:'f') ifTrue: [
		|timesToMoveFoward|
		timesToMoveFoward := aCommand size. 
		position := position - (timesToMoveFoward@0).
		].
		(aCommand includesSubString:'b') ifTrue: [
		|timesToMoveBackwards|
		timesToMoveBackwards := aCommand size. 
		position := position  + (timesToMoveBackwards@0).
		].
	].
	(aCommand includesSubString:'r') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction right].
		^direction
	].
	(aCommand includesSubString:'l') ifTrue: [
		|timesToRotate|
		timesToRotate := aCommand size. 
		timesToRotate timesRepeat:[direction := direction left].
		^direction
	].
	
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:41:08'!
cmoves! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:49:48'!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = 'f' ifTrue:[
		^position := position + (0@1).
		].
	        oneCommand = 'b' ifTrue:[
		^position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position + (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position - (0@1).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = 'f') ifTrue: [
		^position := position - (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		^position := position  + (1@0).
		].
	].
	(oneCommand = 'r') ifTrue: [
		^direction := direction right
	].
	(oneCommand = 'l') ifTrue: [
		^direction := direction left.
	].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:50:43' prior: 50673571!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand do: [:oneCommand |self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:53:21' prior: 50673669!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	1 to: aCommand size do: [|oneCommand| self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:54:11' prior: 50673676!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 16:55:45' prior: 50673639!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = 'f' ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = 'b' ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = 'b') ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = 'f') ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = 'b') ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = 'r') ifTrue: [
		direction := direction right
	].
	(oneCommand = 'l') ifTrue: [
		direction := direction left.
	].
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:03:20'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:03:21'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:21'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:21'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:03:21'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:03:21'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:03:25'!
FAILURE!

----SNAPSHOT----(13 May 2023 17:03:29) CuisUniversity-5706.image priorSource: 10722217!
!North class methodsFor: '--** private fileout/in **--' stamp: 'CB 5/13/2023 17:03:37' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'CB 5/13/2023 17:03:37'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:03:39'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:03:41'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 17:07:14' prior: 50673690!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:07:22'!
PASSED!

----SNAPSHOT----(13 May 2023 17:07:32) CuisUniversity-5706.image priorSource: 10950749!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 17:09:24'!
test40MarsRoverFacingNorthMovesToSamePosition
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	aMarsRover readCommands: 'frbllrfb'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: North.! !

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:09:25'!
FAILURE!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 17:10:02' prior: 50674193!
test40MarsRoverFacingNorthMovesToSamePosition
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	aMarsRover readCommands: 'fbrllrfb'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: North.! !

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:10:04'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:10:05'!
PASSED!

!methodRemoval: MarsRover #cmoves stamp: 'CB 5/13/2023 17:10:31'!
cmoves!

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Command category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:12:10'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Command subclass: #f
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Command subclass: #F
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #F category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:12:28'!
Command subclass: #F
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Command subclass: #B
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #B category: 'MarsRover-Ejercicio' stamp: 'CB 5/13/2023 17:12:32'!
Command subclass: #B
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #F stamp: 'CB 5/13/2023 17:13:23'!
Command subclass: #F
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #B stamp: 'CB 5/13/2023 17:13:23'!
Command subclass: #B
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Command stamp: 'CB 5/13/2023 17:13:24'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 17:15:06'!
test41MarsRoverFacingNorthReceivedAnInvalidCommand
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	aMarsRover readCommands: 'x'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: North.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 17:17:13' prior: 50674419!
test41MarsRoverFacingNorthReceivedAnInvalidCommand
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	
	
	self
		should: [ aMarsRover readCommands: 'x'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand ].! !

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:17:21'!
FAILURE!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/13/2023 17:17:42' prior: 50674430!
test41MarsRoverFacingNorthReceivedAnInvalidCommand
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: North.
	
	
	self
		should: [ aMarsRover readCommands: 'x'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand].! !
!MarsRover class methodsFor: 'instance creation' stamp: 'CB 5/13/2023 17:18:28'!
invalidCommand
    ^'comando no valido para mover'! !

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:18:35'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:18:43'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:18:43'!
FAILURE!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:18:43'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 17:19:26' prior: 50673683!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'x' ifTrue: [^self invalidCommand].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 17:20:39' prior: 50674616!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'x' ifTrue: [^self class invalidCommand].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:20:40'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:20:41'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:20:41'!
FAILURE!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:20:41'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:20:46'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:20:46'!
FAILURE!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:20:46'!
FAILURE!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:21:38'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/13/2023 17:22:15' prior: 50674624!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand = 'x' ifTrue: [^self error: self class invalidCommand].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:22:17'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/13/2023 17:22:20'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/13/2023 17:22:20'!
PASSED!
!North class methodsFor: '--** private fileout/in **--' stamp: 'CB 5/13/2023 17:22:51' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'CB 5/13/2023 17:22:51'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!
!North class methodsFor: '--** private fileout/in **--' stamp: 'CB 5/13/2023 17:22:57' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'CB 5/13/2023 17:22:58'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!

----SNAPSHOT----(13 May 2023 17:23:02) CuisUniversity-5706.image priorSource: 10961227!

----QUIT----(13 May 2023 17:23:17) CuisUniversity-5706.image priorSource: 10995573!

----STARTUP---- (14 May 2023 11:56:02) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Stack-Solution-1.st----!

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverState category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 11:59:17'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

MarsRoverState subclass: #MarsRoverSouthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverSouthState category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:00:06'!
MarsRoverState subclass: #MarsRoverSouthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

MarsRoverState subclass: #MarsRoverNorthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverNorthState category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:00:17'!
MarsRoverState subclass: #MarsRoverNorthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

MarsRoverState subclass: #MarsRoverWestState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverWestState category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:00:21'!
MarsRoverState subclass: #MarsRoverWestState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

MarsRoverState subclass: #MarsRoverEastState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRoverEastState category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:00:29'!
MarsRoverState subclass: #MarsRoverEastState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:02:56' prior: 50674022!
moves: oneCommand 
        oneCommand = $f ifTrue:[]
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	! !

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:06:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:06:33' prior: 50675624!
moves: oneCommand 
        oneCommand = $f ifTrue: [state movesFoward: self]
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:06:53' prior: 50675663!
moves: oneCommand 
        oneCommand = $f ifTrue: [state movesFoward: self].
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:09:12' prior: 50675694!
moves: oneCommand 
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	! !
!MarsRover methodsFor: 'initialization' stamp: 'CB 5/14/2023 12:15:14' prior: 50673224!
initializeLandsAt: aPointInAMap facing: aDirection 
	
	position := aPointInAMap.
	state := MarsRoverState facing: aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:42:06' prior: 50675726!
moves: oneCommand  
       oneCommand = $f ifTrue: [
	        ^state movesFoward. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward.
	].
       oneCommand = $r ifTrue: [
	       state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       state := state rotateLeft.
	]. 
     "
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRoverState class methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:44:02'!
facing: aDirection

	^(self subclasses detect: [:aMarsRoverState | aMarsRoverState canHandle: aDirection ]) for: aDirection! !
!MarsRoverEastState class methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:45:04'!
canHandle: aDirection
      ^aDirection = #East.! !
!MarsRoverNorthState class methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:45:32'!
canHandle: aDirection
       ^aDirection = #North! !
!MarsRoverSouthState class methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:45:46'!
canHandle: aDirection
       ^aDirection = #South! !
!MarsRoverWestState class methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:45:57'!
canHandle: aDirection
       ^aDirection = #West! !
!MarsRoverState class methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:46:07' prior: 50675801!
facing: aDirection

	^(self subclasses detect: [:aMarsRoverState | aMarsRoverState canHandle: aDirection ]) new! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 12:46:25'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 12:46:25'!
ERROR!
!MarsRoverEastState methodsFor: 'no messages' stamp: 'CB 5/14/2023 12:47:22'!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:47:41'!
movesBackward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:47:52' prior: 50675984!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:48:41'!
rotateLeft 
        ^MarsRoverNorthState new! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:48:59'!
rotateRight
        ^MarsRoverSouthState new! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:25'!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !

!methodRemoval: MarsRoverEastState #movesFoward: stamp: 'CB 5/14/2023 12:49:25'!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast!
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:32'!
rotateRight
        ^MarsRoverSouthState new! !

!methodRemoval: MarsRoverEastState #rotateRight stamp: 'CB 5/14/2023 12:49:32'!
rotateRight
        ^MarsRoverSouthState new!
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:38'!
rotateLeft 
        ^MarsRoverNorthState new! !

!methodRemoval: MarsRoverEastState #rotateLeft stamp: 'CB 5/14/2023 12:49:38'!
rotateLeft 
        ^MarsRoverNorthState new!
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:42'!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !

!methodRemoval: MarsRoverEastState #movesBackward: stamp: 'CB 5/14/2023 12:49:42'!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast!
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:47' overrides: 50676015!
rotateRight
        ^MarsRoverSouthState new! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:47' overrides: 50676015!
rotateRight
        ^MarsRoverSouthState new! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:47' overrides: 50676015!
rotateRight
        ^MarsRoverSouthState new! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:47' overrides: 50676015!
rotateRight
        ^MarsRoverSouthState new! !

!methodRemoval: MarsRoverState #rotateRight stamp: 'CB 5/14/2023 12:49:47'!
rotateRight
        ^MarsRoverSouthState new!
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:55' overrides: 50676032!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:55' overrides: 50676032!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:55' overrides: 50676032!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:49:55' overrides: 50676032!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast! !

!methodRemoval: MarsRoverState #movesBackward: stamp: 'CB 5/14/2023 12:49:55'!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingEast!
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:00' overrides: 50676024!
rotateLeft 
        ^MarsRoverNorthState new! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:00' overrides: 50676024!
rotateLeft 
        ^MarsRoverNorthState new! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:00' overrides: 50676024!
rotateLeft 
        ^MarsRoverNorthState new! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:00' overrides: 50676024!
rotateLeft 
        ^MarsRoverNorthState new! !

!methodRemoval: MarsRoverState #rotateLeft stamp: 'CB 5/14/2023 12:50:00'!
rotateLeft 
        ^MarsRoverNorthState new!
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:04' overrides: 50676005!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:04' overrides: 50676005!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:04' overrides: 50676005!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:04' overrides: 50676005!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast! !

!methodRemoval: MarsRoverState #movesFoward: stamp: 'CB 5/14/2023 12:50:04'!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingEast!
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:16' prior: 50676073!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingNorth! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:50:27' prior: 50676126!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingNorth! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:07' prior: 50676101!
rotateLeft 
        ^MarsRoverWestState new! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:18' prior: 50676048!
rotateRight
        ^MarsRoverEastState new! !
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:27' prior: 50676067!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingSouth! !
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:37' prior: 50676120!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingSouth! !
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:50' prior: 50676096!
rotateLeft 
        ^MarsRoverEastState new! !
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:51:57' prior: 50676043!
rotateRight
        ^MarsRoverWestState new! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:52:08' prior: 50676053!
rotateRight
        ^MarsRoverNorthState new! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:52:14' prior: 50676106!
rotateLeft 
        ^MarsRoverSouthState new! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:52:22' prior: 50676132!
movesFoward: aMarsRover 
        ^aMarsRover movesFowardFacingWest! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:52:28' prior: 50676079!
movesBackward: aMarsRover 
        ^aMarsRover movesBackwardFacingWest! !

Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #MarsRover category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 12:52:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:53:12'!
movesBackwardFacingWest  
       position := position + (1@0)
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:53:43'!
movesBackwardFacingEast  
       position := position - (1@0).
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:53:49' prior: 50676225!
movesBackwardFacingWest 
       position := position - (1@0).
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:54:21' prior: 50676256!
movesBackwardFacingEast 
       position := position  + (1@0)
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		.
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:54:39'!
movesBackwardFacingNorth
       position := position + (0@-1)
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	       
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		.
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:55:09'!
movesBackwardFacingSouth
       position := position  + (0@1).
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	       
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		.
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:57:11' prior: 50676287!
movesBackwardFacingWest 
       position := position + (1@0).
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:57:19' prior: 50676318!
movesBackwardFacingEast 
       position := position  - (1@0)
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		.
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:57:35'!
movesFowardFacingWest 
       position := position - (1@0).
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:57:45' prior: 50676464!
movesFowardFacingWest 
       position := position - (1@0).
        ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:58:13'!
movesFowardFacingSouth
       position := position  - (0@1).
       ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:58:28'!
movesFowardFacingNorth
       position := position + (0@1)
        "direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	       
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		.
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:58:47'!
movesFowardFacingEast 
       position := position  + (1@0)
        ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:59:02' prior: 50676434!
movesBackwardFacingEast 
       position := position  - (1@0)
        ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:59:19' prior: 50675763!
moves: oneCommand  
       oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       state := state rotateLeft.
	]. 
     "
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 12:59:23'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 12:59:24'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 12:59:24'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 12:59:50' prior: 50673230!
currentDirection
	^state direction! !
!MarsRoverEastState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:00:10'!
direction
     ^#East! !
!MarsRoverNorthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:00:21'!
direction
     ^#North! !
!MarsRoverSouthState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:00:31'!
direction
     ^#South! !
!MarsRoverWestState methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:00:41'!
direction
     ^#West! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:00:46'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:00:46'!
ERROR!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:00:56' prior: 50672757!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |

	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:01:04' prior: 50672767!
test01MarsRoverMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:01:07'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:01:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:01:07'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:01:07'!
ERROR!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:01:15' prior: 50672777!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:01:50' prior: 50672818!
test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:02:44' prior: 50672829!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@8 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:16' prior: 50672787!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:23' prior: 50672797!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:30' prior: 50672807!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:39' prior: 50672840!
test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@1 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:45' prior: 50672851!
test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 3@3 facing: #North.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 3@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:51' prior: 50672862!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:03:56' prior: 50672872!
test11MarsRoverMovesFowardThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'fff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@3 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:02' prior: 50672882!
test12MarsRoverMovesBackwardsTwiceFacingNorth

	|aMarsRover|

	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:09' prior: 50672892!
test13MarsRoverMovesBackwardsThreeTimesFacingNorth

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:15' prior: 50672902!
test14MarsRoverRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:21' prior: 50672912!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:29' prior: 50672922!
test16MarsRoverRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:04:36' prior: 50672932!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:04:43' prior: 50672717!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:04:48' prior: 50672727!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:04:54' prior: 50672972!
test29MarsRoverFacingSouthRotatesRightTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:05:02' prior: 50673002!
test32MarsRoverFacingSouthRotatesLeftTwice

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:05:10' prior: 50673052!
test37MarsRoverFacingEastRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:05:21' prior: 50674207!
test40MarsRoverFacingNorthMovesToSamePosition
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	aMarsRover readCommands: 'fbrllrfb'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: #North.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:05:27' prior: 50674447!
test41MarsRoverFacingNorthReceivedAnInvalidCommand
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	
	
	self
		should: [ aMarsRover readCommands: 'x'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand].! !

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:05:30'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:05:37'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:05:37'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:05:37'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:05:37'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:05:59' prior: 50672677!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:06:04' prior: 50672687!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: -3@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:06:11' prior: 50672697!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:06:18' prior: 50672707!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:06:28' prior: 50672737!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:06:37' prior: 50672747!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:06:43' prior: 50672942!
test26MarsRoverFacingSouthMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:06:49' prior: 50672952!
test27MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'ffff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: #South.! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:06:55' prior: 50672962!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:07:01' prior: 50672982!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:07:06' prior: 50673012!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:07:12' prior: 50672992!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:07:16'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:07:16'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:07:16'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:07:16'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:07:16'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:07:16'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:07:16'!
PASSED!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:07:28' prior: 50673496!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rfr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #West.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:07:34' prior: 50673466!
test38MarsRoverFacingEastRotatesLeftAndRight
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East.! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:07:44' prior: 50673042!
test36MarsRoverFacingEastRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:07:52' prior: 50673032!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:08:01' prior: 50673022!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #East! !

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:08:13'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:08:13'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:13'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:13'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:08:24'!
FAILURE!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:08:24'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:08:24'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:08:53' prior: 50676545!
moves: oneCommand  
       oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
     "
        direction = North  ifTrue: [
	        oneCommand = $f ifTrue:[
		position := position + (0@1).
		].
	        oneCommand = $b ifTrue:[
		position := position + (0@-1).
		].
	].
	
	
	direction = West ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position + (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position - (1@0).
		].

	].
	direction = South ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (0@1).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (0@1).
		]
	].
	direction = East ifTrue: [
		(oneCommand = $f) ifTrue: [
		position := position - (1@0).
		].
		(oneCommand = $b) ifTrue: [
		position := position  + (1@0).
		].
	].
	(oneCommand = $r) ifTrue: [
		direction := direction right
	].
	(oneCommand = $l) ifTrue: [
		direction := direction left.
	].
	"! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:08:55'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:09:41'!
FAILURE!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:09:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:09:44'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:10:31'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:10:32'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:10:32'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:10:32'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:10:32'!
FAILURE!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:10:32'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:10:32'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:10:39' prior: 50677093!
test03MarsRoverRotatesLeft

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:10:46' prior: 50677103!
test04MarsRoverRotatesRight

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'r'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:10:57' prior: 50677200!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 13:11:16' prior: 50677220!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:11:28' prior: 50677457!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:11:36' prior: 50677467!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 3@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:11:47' prior: 50677478!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:12:01' prior: 50677230!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:12:13' prior: 50677241!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:12:18'!
FAILURE!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:12:18'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:12:18'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 13:12:29' prior: 50677509!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #West.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:12:37' prior: 50677542!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:12:48' prior: 50677553!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:12:58' prior: 50677575!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 13:13:11' prior: 50677564!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #South.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:13:21' prior: 50677774!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:13:27' prior: 50677764!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:13:40' prior: 50677753!
test36MarsRoverFacingEastRotatesRightThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 13:13:48' prior: 50677273!
test37MarsRoverFacingEastRotatesLeftThreeTimes
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:14:19' prior: 50677731!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 0@0 facing: #East.
	aMarsRover readCommands: 'rfr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #West.! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:14:26'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:14:26'!
PASSED!
!North class methodsFor: '--** private fileout/in **--' stamp: 'CB 5/14/2023 13:15:14' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.! !

!methodRemoval: North class #initializeCollaboratorsFromFile stamp: 'CB 5/14/2023 13:15:15'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uniqueinstance := nil.!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:16:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:16:47'!
PASSED!

!classRemoval: #East stamp: 'CB 5/14/2023 13:17:13'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #North stamp: 'CB 5/14/2023 13:17:14'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #South stamp: 'CB 5/14/2023 13:17:14'!
Direction subclass: #South
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #West stamp: 'CB 5/14/2023 13:17:15'!
Direction subclass: #West
	instanceVariableNames: 'right left'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Direction stamp: 'CB 5/14/2023 13:17:15'!
DenotativeObject subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:17:18'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:17:19'!
PASSED!

----SNAPSHOT----(14 May 2023 13:17:28) CuisUniversity-5706.image priorSource: 10995662!
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:18:19' prior: 50677943!
moves: oneCommand  
       oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
     ! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:21:32'!
test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	
	
	self
		should: [ aMarsRover readCommands: 'rblffbt'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand].! !

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 13:21:34'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:22:12' prior: 50674934!
readCommands: aCommand 
	aCommand ifEmpty:[^self].
	aCommand do: [ :oneCommand | self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:22:19' prior: 50679253!
moves: oneCommand  
       oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
        ^self error: self class invalidCommand! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:22:21'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 13:22:21'!
PASSED!
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:24:12' prior: 50679267!
test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	

	self
		should: [ aMarsRover readCommands: 'fftbb'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand].! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 13:24:34' prior: 50679456!
test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt: 4@7 facing: #North.
	

	self
		should: [ aMarsRover readCommands: 'fftbb'.]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = MarsRover invalidCommand].
	
	self assertMarsRover: aMarsRover IsAt: 4@9 facing: #North.	
		! !

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 13:24:36'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 13:24:36'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:28:23' prior: 50679284!
readCommands: aCommandToTakeAction 
	aCommandToTakeAction ifEmpty:[^self].
	aCommandToTakeAction do: [ :oneCommand | self moves: oneCommand]
	
	
! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:40:19' prior: 50679291!
moves: oneCommand  
       oneCommand hasToTakeActionToMove: self whenFacing: state.
       oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
        ^self error: self class invalidCommand! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:41:17'!
rotate: nuevoEstado
	  ^state := nuevoEstado.! !
!MarsRover methodsFor: 'actions - private' stamp: 'CB 5/14/2023 13:42:37' prior: 50679663!
rotate: newStateAfterRotate 
	  ^state := newStateAfterRotate.! !

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Command category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:43:01'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Command subclass: #Valid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Valid category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:43:20'!
Command subclass: #Valid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Command subclass: #NonValid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #NonValid category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:43:29'!
Command subclass: #NonValid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Valid subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Empty category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:44:23'!
Valid subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Valid subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Foward category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:44:36'!
Valid subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Valid subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #Backward category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:44:42'!
Valid subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Valid subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #RotateLeft category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:44:53'!
Valid subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

Valid subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classDefinition: #RotateRight category: 'MarsRover-Ejercicio' stamp: 'CB 5/14/2023 13:44:59'!
Valid subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!
!Command methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:45:49'!
hasToTakeActionToMove: aMarsRover whenFacing: state.! !
!Command methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:46:19' prior: 50679763!
hasToTakeActionToMove: aMarsRover whenFacing: state
       self subclassResponsibility ! !
!NonValid methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:46:50' overrides: 50679768!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^aMarsRover invalidCommand ! !
!Valid methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:47:04' overrides: 50679768!
hasToTakeActionToMove: aMarsRover whenFacing: state
       self subclassResponsibility ! !
!Backward methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:48:00' overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^state movesBackward: aMarsRover! !
!Foward methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:48:18' overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^state movesFoward: aMarsRover! !
!Empty methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:48:33' overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^self! !
!Empty methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:48:44' prior: 50679798 overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^aMarsRover! !
!RotateLeft methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:49:44' overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^aMarsRover rotate: state rotateLeft ! !
!RotateRight methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:49:57' overrides: 50679780!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^aMarsRover rotate: state rotateRight ! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:50:10' prior: 50679647!
moves: oneCommand  
       oneCommand hasToTakeActionToMove: self whenFacing: state.
       "oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
        ^self error: self class invalidCommand"! !
!NonValid methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:50:35' prior: 50679774 overrides: 50679768!
hasToTakeActionToMove: aMarsRover whenFacing: state
        ^aMarsRover notAValidCommand.! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:51:05'!
notAValidCommand
        ^self error: self class invalidCommand! !
!MarsRover methodsFor: 'actions' stamp: 'CB 5/14/2023 13:52:04' prior: 50679822!
moves: oneCommand  
       (Command with: oneCommand) hasToTakeActionToMove: self whenFacing: state.
       "oneCommand = $f ifTrue: [
	        ^state movesFoward: self. 
	]. 
       oneCommand = $b ifTrue: [
	       ^state movesBackward: self.
	].
       oneCommand = $r ifTrue: [
	       ^state := state rotateRight.
	]. 
        oneCommand = $l ifTrue: [
	       ^state := state rotateLeft.
	]. 
        ^self error: self class invalidCommand"! !
!Command class methodsFor: 'nil' stamp: 'CB 5/14/2023 13:53:52'!
with: aCommand
          ^(self subclasses detect: [:CommandAvaliable | CommandAvaliable canHandle: aCommand ]) new! !
!Command class methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:54:08' prior: 50679867!
with: aCommand
          ^(self subclasses detect: [:CommandAvailable | CommandAvailable canHandle: aCommand ]) new! !
!Command class methodsFor: 'as yet unclassified' stamp: 'CB 5/14/2023 13:54:19' prior: 50679874!
with: aCommand
          ^(self subclasses detect: [:commandAvailable | commandAvailable canHandle: aCommand ]) new! !
!Valid class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:55:14'!
canHandle: aCommand
          self subclassResponsibility. ! !
!Backward class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:55:43' overrides: 50679887!
canHandle: aCommand
    ^aCommand = $b! !
!Empty class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:56:23' overrides: 50679887!
canHandle: aCommand
     ^aCommand isEmpty! !
!Foward class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:56:37' overrides: 50679887!
canHandle: aCommand
     ^aCommand = $f! !
!RotateLeft class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:56:46' overrides: 50679887!
canHandle: aCommand
     ^aCommand = $l! !
!RotateRight class methodsFor: 'no messages' stamp: 'CB 5/14/2023 13:56:54' overrides: 50679887!
canHandle: aCommand
     ^aCommand = $r! !
!NonValid class methodsFor: 'no messages' stamp: 'CB 5/14/2023 14:00:15'!
canHandle: aCommand
     ^((aCommand = $f or: aCommand = $b) or: (aCommand = $r or: aCommand = $l ) or: aCommand isEmpty) not
    
     
    
     ! !
!Valid class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:01:41' prior: 50679887!
canHandle: aCommand
         ^false! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:01:48'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:01:48'!
FAILURE!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:01:48'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:02:18'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:02:18'!
FAILURE!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:02:18'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:02:29'!
ERROR!
!NonValid class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:02:51' prior: 50679916!
canHandle: aCommand
     ^((aCommand = $f or: aCommand = $b) or: (aCommand = $r or: aCommand = $l ) or: aCommand = $ ) not
    
     
    
     ! !
!Empty class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:02:59' prior: 50679897 overrides: 50679924!
canHandle: aCommand
     ^aCommand = $! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:03:06'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:03:07'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:03:07'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:03:07'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:03:07'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:03:07'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:03:07'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:03:07'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:03:13'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:04:41'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:05:00'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:05:01'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:05:01'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:05:01'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:05:04'!
ERROR!

	$f!

Command with: $f!

$f = $f!

Command with: $b!

Command with: $x!
!Valid class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:09:23' prior: 50679924!
canHandle: aCommand
         ^self subclassResponsibility ! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:09:28'!
ERROR!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:09:28'!
FAILURE!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:09:28'!
FAILURE!

Command with: $f!

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $f ]!

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $x ]!

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $x ]!
!Valid class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:11:19' prior: 50680549!
canHandle: aCommand
         self subclassResponsibility ! !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $x ]!
!Valid class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:11:37' prior: 50680711!
canHandle: aCommand
         ^false! !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $x ]!

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $f ] NonValid !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $f value ] NonValid !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $f value ] NonValid !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $b] NonValid !

Command subclasses detect: [:commandAvailable | commandAvailable canHandle: $b] !
!Foward class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:13:29' prior: 50679902 overrides: 50680719!
canHandle: aCommand
     ^true! !

Command with: $f!

Command subclasses!

Numero subclasses!
!Command class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:16:45' prior: 50679881!
with: aCommand
          ^(self allSubclasses detect: [:commandAvailable | commandAvailable canHandle: aCommand ]) new! !
!Foward class methodsFor: 'initialization' stamp: 'CB 5/14/2023 14:16:55' prior: 50680741 overrides: 50680719!
canHandle: aCommand
     ^aCommand = $f! !

Command with: $f!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:17:17'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:17:18'!
PASSED!

----SNAPSHOT----(14 May 2023 14:17:25) CuisUniversity-5706.image priorSource: 11123161!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:22:33' prior: 50676893!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |
        
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: ''.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:24:41'!
marsRoverStartingAt: aPositionToStart facing: aDirection received: aCommand
	|aMarsRover|
	
	aMarsRover := MarsRover landsAt:  aPositionToStart facing: aDirection. 
	aMarsRover readCommands: aCommand.

	^aMarsRover! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:26:07' prior: 50680913!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |
        
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: ' '.

	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:26:33' prior: 50676904!
test01MarsRoverMovesFoward

	|aMarsRover|
        
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'f'.
	
	
	self assertMarsRover: aMarsRover IsAt: 0@1 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:26:49' prior: 50677061!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'b'.
	
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:00' prior: 50680956!
test02MarsRoverMovesBackwards

	|aMarsRover|
	
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:11' prior: 50678424!
test03MarsRoverRotatesLeft

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'l'.

	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:15' prior: 50680976!
test03MarsRoverRotatesLeft

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'l'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:29' prior: 50678434!
test04MarsRoverRotatesRight

	|aMarsRover|

        aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'r'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:41' prior: 50677113!
test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth

	|aMarsRover|
	
	aMarsRover := self marsRoverStartingAt: 0@1 facing: #North received: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:27:57' prior: 50677071!
test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth

	|aMarsRover|

        aMarsRover := self marsRoverStartingAt: 3@3 facing: #North received: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 3@4 facing: #North! !

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:27:58'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:27:59'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:28:16'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:28:16'!
ERROR!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:26'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:29:28'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:29:30'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:29:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:29:33'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:29:36'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:29:36'!
ERROR!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:29:41' prior: 50680935!
test00MarsRoverCreatedCorrectlyAtOriginFacingNorth

	|aMarsRover |
        
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: ''.

	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:29:42'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:29:42'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:30:04' prior: 50677082!
test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 4@7 facing: #North received: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 4@8 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:30:20' prior: 50677124!
test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@1 facing: #North received: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:30:41' prior: 50677135!
test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 3@3 facing: #North received: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: 3@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:30:51' prior: 50677146!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'ff'.
	aMarsRover := MarsRover landsAt: 0@0 facing: #North.
	aMarsRover readCommands: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:30:57' prior: 50681420!
test10MarsRoverMovesFowardTwiceFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'ff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:31:12' prior: 50677157!
test11MarsRoverMovesFowardThreeTimesFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'fff'.
	
	self assertMarsRover: aMarsRover IsAt: 0@3 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:31:28' prior: 50677168!
test12MarsRoverMovesBackwardsTwiceFacingNorth

	|aMarsRover|
        aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-2 facing: #North! !

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:31:30'!
PASSED!
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:31:43' prior: 50677179!
test13MarsRoverMovesBackwardsThreeTimesFacingNorth

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'bbb'.

	self assertMarsRover: aMarsRover IsAt: 0@-3 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:32:00' prior: 50677190!
test14MarsRoverRotatesLeftTwice

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:32:11' prior: 50678444!
test15MarsRoverRotatesLeftThreeTimes

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:32:37' prior: 50677210!
test16MarsRoverRotatesRightTwice

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing North at start' stamp: 'CB 5/14/2023 14:32:52' prior: 50678454!
test17MarsRoverRotatesRightThreeTimes

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #North received: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:33:17' prior: 50678464!
test18MarsRoverFacingWestMovesFoward

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:33:38' prior: 50678474!
test19MarsRoverFacingWestMovesBackwardsThreeTimes

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'bbb'.
	
	self assertMarsRover: aMarsRover IsAt: 3@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:34:02' prior: 50678485!
test20MarsRoverFacingWestRotateRightOnce
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:34:13' prior: 50677488!
test21MarsRoverFacingWestRotateRightTwice
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:34:25' prior: 50678495!
test22MarsRoverFacingWestRotateRightThreeTimes
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:34:35' prior: 50678506!
test23MarsRoverFacingWestRotateLeftOnce
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:34:47' prior: 50677499!
test24MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing West at start' stamp: 'CB 5/14/2023 14:35:00' prior: 50678662!
test25MarsRoverFacingWestRotateLeftTwice
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #West received: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:35:17' prior: 50677520!
test26MarsRoverFacingSouthMovesBackwards

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'bb'.
	
	self assertMarsRover: aMarsRover IsAt: 0@2 facing: #South! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:35:29' prior: 50677531!
test27MarsRoverFacingSouthMovesFoward

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'ffff'.

	self assertMarsRover: aMarsRover IsAt: 0@-4 facing: #South.! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:35:41' prior: 50678673!
test28MarsRoverFacingSouthRotatesRightOnce

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'r'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:35:53' prior: 50677251!
test29MarsRoverFacingSouthRotatesRightTwice

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'rr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:36:05' prior: 50678684!
test30MarsRoverFacingSouthRotatesRightThreeTimes

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:36:20' prior: 50678695!
test31MarsRoverFacingSouthRotatesLeftOnce

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'l'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:36:32' prior: 50677262!
test32MarsRoverFacingSouthRotatesLeftTwice

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing South at start' stamp: 'CB 5/14/2023 14:36:39' prior: 50678706!
test33MarsRoverFacingSouthRotatesLeftThreeTimes

	|aMarsRover|
	
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #South received: 'lll'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #West! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 14:36:56' prior: 50678717!
test34MarsRoverFacingEastMovesFoward

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'f'.
	
	self assertMarsRover: aMarsRover IsAt: 1@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 14:37:19' prior: 50678727!
test35MarsRoverFacingEastMovesBackwards

	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'b'.
	
	self assertMarsRover: aMarsRover IsAt: -1@0 facing: #East! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 14:37:39' prior: 50678737!
test36MarsRoverFacingEastRotatesRightThreeTimes
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'rrr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'test w/MarsRover facing East at start' stamp: 'CB 5/14/2023 14:38:05' prior: 50678748!
test37MarsRoverFacingEastRotatesLeftThreeTimes
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'lll'.

	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #South! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 14:38:20' prior: 50677742!
test38MarsRoverFacingEastRotatesLeftAndRight
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'rl'.
	
	self assertMarsRover: aMarsRover IsAt: 0@0 facing: #East.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 14:38:32' prior: 50678759!
test39MarsRoverFacingEastMovesFowardAndBackward
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 0@0 facing: #East received: 'rfr'.
	
	self assertMarsRover: aMarsRover IsAt: 0@-1 facing: #West.! !
!MarsRoverTest methodsFor: 'test multiple different commands' stamp: 'CB 5/14/2023 14:38:59' prior: 50677284!
test40MarsRoverFacingNorthMovesToSamePosition
	|aMarsRover|
	aMarsRover := self marsRoverStartingAt: 4@7 facing: #North received: 'fbrllrfb'.
	
	self assertMarsRover: aMarsRover IsAt: 4@7 facing: #North.! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:39:20'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:39:20'!
PASSED!
!Behavior method!
movesBackwardFacingEast
	#_coverageTracker9907796_ markAsExecuted.
	#_coverageTracker9907796_
		cover: (45 to: 52)
		declaredAt: (33 to: 40)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9907796_
				cover: (33 to: 40)
				declaredAt: (33 to: 40)
				by: position.
			#_coverageTracker9907796_
				coverAll:
					{55 to: 55}
				evaluating: [
					receiver2 -
						[ | receiver1 |
						receiver1 _ #_coverageTracker9907796_
							coverAll:
								{58 to: 58}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker9907796_
							coverAll:
								{59 to: 59}
							evaluating: [
								receiver1 @
									(#_coverageTracker9907796_
										coverAll:
											{60 to: 60}
										byLiteralOrPseudoVariable: 0) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #-
				to: receiver2 ] value).! !
!Behavior method!
facing: aDirection
	#_coverageTracker9907837_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker9907837_
		coverAll:
			{24 to: 27}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker9907837_
		coverAll:
			{29 to: 38}
		evaluating: [ receiver1 subclasses ]
		thatSends: #subclasses
		to: receiver1 ] value.
	#_coverageTracker9907837_
		coverAll:
			{40 to: 46}
		evaluating: [
			receiver3 detect: [ :aMarsRoverState |
				[ | receiver2 |
				receiver2 _ #_coverageTracker9907837_
					cover: (68 to: 82)
					declaredAt: (50 to: 64)
					by: aMarsRoverState.
				#_coverageTracker9907837_
					coverAll:
						{84 to: 93}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker9907837_
								cover: (95 to: 104)
								declaredAt: (9 to: 18)
								by: aDirection) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker9907837_
		coverAll:
			{109 to: 111}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9907875_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker9907875_
		cover: (62 to: 71)
		declaredAt: (24 to: 33)
		by: aMarsRover.
	#_coverageTracker9907875_
		coverAll:
			{73 to: 79}
		evaluating: [
			receiver2 rotate:
				[ | receiver1 |
				receiver1 _ #_coverageTracker9907875_
					cover: (81 to: 85)
					declaredAt: (47 to: 51)
					by: state.
				#_coverageTracker9907875_
					coverAll:
						{87 to: 97}
					evaluating: [ receiver1 rotateRight ]
					thatSends: #rotateRight
					to: receiver1 ] value ]
		thatSends: #rotate:
		to: receiver2 ] value.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9907898_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker9907898_
		cover: (62 to: 71)
		declaredAt: (24 to: 33)
		by: aMarsRover.
	#_coverageTracker9907898_
		coverAll:
			{73 to: 79}
		evaluating: [
			receiver2 rotate:
				[ | receiver1 |
				receiver1 _ #_coverageTracker9907898_
					cover: (81 to: 85)
					declaredAt: (47 to: 51)
					by: state.
				#_coverageTracker9907898_
					coverAll:
						{87 to: 96}
					evaluating: [ receiver1 rotateLeft ]
					thatSends: #rotateLeft
					to: receiver1 ] value ]
		thatSends: #rotate:
		to: receiver2 ] value.! !
!Behavior method!
movesBackwardFacingWest
	#_coverageTracker9907949_ markAsExecuted.
	#_coverageTracker9907949_
		cover: (45 to: 52)
		declaredAt: (33 to: 40)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9907949_
				cover: (33 to: 40)
				declaredAt: (33 to: 40)
				by: position.
			#_coverageTracker9907949_
				coverAll:
					{54 to: 54}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker9907949_
							coverAll:
								{57 to: 57}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker9907949_
							coverAll:
								{58 to: 58}
							evaluating: [
								receiver1 @
									(#_coverageTracker9907949_
										coverAll:
											{59 to: 59}
										byLiteralOrPseudoVariable: 0) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9907968_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9907968_
		cover: (27 to: 34)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9907968_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver1 =
				(#_coverageTracker9907968_
					coverAll:
						{38 to: 39}
					byLiteralOrPseudoVariable: $f) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
direction
	#_coverageTracker9907988_ markAsExecuted.
	^ #_coverageTracker9907988_
		coverAll:
			{17 to: 22}
		byLiteralOrPseudoVariable: #North.! !
!Behavior method!
movesBackward: aMarsRover
	#_coverageTracker9907993_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9907993_
		cover: (37 to: 46)
		declaredAt: (16 to: 25)
		by: aMarsRover.
	#_coverageTracker9907993_
		coverAll:
			{48 to: 70}
		evaluating: [ receiver1 movesBackwardFacingWest ]
		thatSends: #movesBackwardFacingWest
		to: receiver1 ] value.! !
!Behavior method!
direction
	#_coverageTracker9908011_ markAsExecuted.
	^ #_coverageTracker9908011_
		coverAll:
			{17 to: 21}
		byLiteralOrPseudoVariable: #East.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908025_ markAsExecuted.
	^ [ | receiver9 |
	receiver9 _ [ | receiver8 |
	receiver8 _ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker9908025_
		cover: (29 to: 36)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9908025_
		coverAll:
			{38 to: 38}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908025_
					coverAll:
						{40 to: 41}
					byLiteralOrPseudoVariable: $f) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker9908025_
		coverAll:
			{43 to: 45}
		evaluating: [
			receiver3 or:
				[ | receiver2 |
				receiver2 _ #_coverageTracker9908025_
					cover: (47 to: 54)
					declaredAt: (12 to: 19)
					by: aCommand.
				#_coverageTracker9908025_
					coverAll:
						{56 to: 56}
					evaluating: [
						receiver2 =
							(#_coverageTracker9908025_
								coverAll:
									{58 to: 59}
								byLiteralOrPseudoVariable: $b) ]
					thatSends: #=
					to: receiver2 ] value ]
		thatSends: #or:
		to: receiver3 ] value.
	#_coverageTracker9908025_
		coverAll:
			{62 to: 64. 101 to: 103}
		evaluating: [
			receiver8
				or:
					[ | receiver6 |
					receiver6 _ [ | receiver4 |
					receiver4 _ #_coverageTracker9908025_
						cover: (67 to: 74)
						declaredAt: (12 to: 19)
						by: aCommand.
					#_coverageTracker9908025_
						coverAll:
							{76 to: 76}
						evaluating: [
							receiver4 =
								(#_coverageTracker9908025_
									coverAll:
										{78 to: 79}
									byLiteralOrPseudoVariable: $r) ]
						thatSends: #=
						to: receiver4 ] value.
					#_coverageTracker9908025_
						coverAll:
							{81 to: 83}
						evaluating: [
							receiver6 or:
								[ | receiver5 |
								receiver5 _ #_coverageTracker9908025_
									cover: (85 to: 92)
									declaredAt: (12 to: 19)
									by: aCommand.
								#_coverageTracker9908025_
									coverAll:
										{94 to: 94}
									evaluating: [
										receiver5 =
											(#_coverageTracker9908025_
												coverAll:
													{96 to: 97}
												byLiteralOrPseudoVariable: $l) ]
									thatSends: #=
									to: receiver5 ] value ]
						thatSends: #or:
						to: receiver6 ] value
				or:
					[ | receiver7 |
					receiver7 _ #_coverageTracker9908025_
						cover: (105 to: 112)
						declaredAt: (12 to: 19)
						by: aCommand.
					#_coverageTracker9908025_
						coverAll:
							{114 to: 114}
						evaluating: [
							receiver7 =
								(#_coverageTracker9908025_
									coverAll:
										{116 to: 117}
									byLiteralOrPseudoVariable: $ ) ]
						thatSends: #=
						to: receiver7 ] value ]
		thatSends: #or:or:
		to: receiver8 ] value.
	#_coverageTracker9908025_
		coverAll:
			{120 to: 122}
		evaluating: [ receiver9 not ]
		thatSends: #not
		to: receiver9 ] value.! !
!Behavior method!
invalidCommand
	#_coverageTracker9908109_ markAsExecuted.
	^ #_coverageTracker9908109_
		coverAll:
			{21 to: 50}
		byLiteralOrPseudoVariable: 'comando no valido para mover'.! !
!Behavior method!
movesBackward: aMarsRover
	#_coverageTracker9908114_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908114_
		cover: (37 to: 46)
		declaredAt: (16 to: 25)
		by: aMarsRover.
	#_coverageTracker9908114_
		coverAll:
			{48 to: 70}
		evaluating: [ receiver1 movesBackwardFacingEast ]
		thatSends: #movesBackwardFacingEast
		to: receiver1 ] value.! !
!Behavior method!
movesBackwardFacingSouth
	#_coverageTracker9908162_ markAsExecuted.
	#_coverageTracker9908162_
		cover: (45 to: 52)
		declaredAt: (33 to: 40)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908162_
				cover: (33 to: 40)
				declaredAt: (33 to: 40)
				by: position.
			#_coverageTracker9908162_
				coverAll:
					{55 to: 55}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908162_
							coverAll:
								{58 to: 58}
							byLiteralOrPseudoVariable: 0.
						#_coverageTracker9908162_
							coverAll:
								{59 to: 59}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908162_
										coverAll:
											{60 to: 60}
										byLiteralOrPseudoVariable: 1) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
movesFowardFacingSouth
	#_coverageTracker9908183_ markAsExecuted.
	#_coverageTracker9908183_
		cover: (43 to: 50)
		declaredAt: (31 to: 38)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908183_
				cover: (31 to: 38)
				declaredAt: (31 to: 38)
				by: position.
			#_coverageTracker9908183_
				coverAll:
					{53 to: 53}
				evaluating: [
					receiver2 -
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908183_
							coverAll:
								{56 to: 56}
							byLiteralOrPseudoVariable: 0.
						#_coverageTracker9908183_
							coverAll:
								{57 to: 57}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908183_
										coverAll:
											{58 to: 58}
										byLiteralOrPseudoVariable: 1) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #-
				to: receiver2 ] value).! !
!Behavior method!
rotateRight
	#_coverageTracker9908204_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908204_
		coverAll:
			{22 to: 40}
		by: MarsRoverNorthState.
	#_coverageTracker9908204_
		coverAll:
			{42 to: 44}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908215_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908215_
		cover: (26 to: 33)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9908215_
		coverAll:
			{35 to: 35}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908215_
					coverAll:
						{37 to: 38}
					byLiteralOrPseudoVariable: $b) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
rotateLeft
	#_coverageTracker9908233_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908233_
		coverAll:
			{22 to: 40}
		by: MarsRoverNorthState.
	#_coverageTracker9908233_
		coverAll:
			{42 to: 44}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
rotateLeft
	#_coverageTracker9908251_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908251_
		coverAll:
			{22 to: 39}
		by: MarsRoverWestState.
	#_coverageTracker9908251_
		coverAll:
			{41 to: 43}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
movesBackwardFacingNorth
	#_coverageTracker9908278_ markAsExecuted.
	#_coverageTracker9908278_
		cover: (45 to: 52)
		declaredAt: (33 to: 40)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908278_
				cover: (33 to: 40)
				declaredAt: (33 to: 40)
				by: position.
			#_coverageTracker9908278_
				coverAll:
					{54 to: 54}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908278_
							coverAll:
								{57 to: 57}
							byLiteralOrPseudoVariable: 0.
						#_coverageTracker9908278_
							coverAll:
								{58 to: 58}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908278_
										coverAll:
											{59 to: 60}
										byLiteralOrPseudoVariable: -1) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
rotateRight
	#_coverageTracker9908292_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908292_
		coverAll:
			{22 to: 40}
		by: MarsRoverSouthState.
	#_coverageTracker9908292_
		coverAll:
			{42 to: 44}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
rotateRight
	#_coverageTracker9908309_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908309_
		coverAll:
			{22 to: 39}
		by: MarsRoverWestState.
	#_coverageTracker9908309_
		coverAll:
			{41 to: 43}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9908342_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908342_
		cover: (62 to: 71)
		declaredAt: (24 to: 33)
		by: aMarsRover.
	#_coverageTracker9908342_
		coverAll:
			{73 to: 88}
		evaluating: [ receiver1 notAValidCommand ]
		thatSends: #notAValidCommand
		to: receiver1 ] value.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908347_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908347_
		cover: (27 to: 34)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9908347_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908347_
					coverAll:
						{38 to: 39}
					byLiteralOrPseudoVariable: $l) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
movesFoward: aMarsRover
	#_coverageTracker9908369_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908369_
		cover: (35 to: 44)
		declaredAt: (14 to: 23)
		by: aMarsRover.
	#_coverageTracker9908369_
		coverAll:
			{46 to: 67}
		evaluating: [ receiver1 movesFowardFacingNorth ]
		thatSends: #movesFowardFacingNorth
		to: receiver1 ] value.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9908396_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908396_
		cover: (62 to: 66)
		declaredAt: (47 to: 51)
		by: state.
	#_coverageTracker9908396_
		coverAll:
			{68 to: 79}
		evaluating: [
			receiver1 movesFoward:
				(#_coverageTracker9908396_
					cover: (81 to: 90)
					declaredAt: (24 to: 33)
					by: aMarsRover) ]
		thatSends: #movesFoward:
		to: receiver1 ] value.! !
!Behavior method!
rotateRight
	#_coverageTracker9908414_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908414_
		coverAll:
			{22 to: 39}
		by: MarsRoverEastState.
	#_coverageTracker9908414_
		coverAll:
			{41 to: 43}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
initializeLandsAt: aPointInAMap facing: aDirection
	#_coverageTracker9908433_ markAsExecuted.
	#_coverageTracker9908433_
		cover: (56 to: 63)
		declaredAt: (56 to: 63)
		by:
			(position _ #_coverageTracker9908433_
				cover: (68 to: 79)
				declaredAt: (20 to: 31)
				by: aPointInAMap).
	#_coverageTracker9908433_
		cover: (83 to: 87)
		declaredAt: (83 to: 87)
		by:
			(state _ [ | receiver1 |
			receiver1 _ #_coverageTracker9908433_
				coverAll:
					{92 to: 105}
				by: MarsRoverState.
			#_coverageTracker9908433_
				coverAll:
					{107 to: 113}
				evaluating: [
					receiver1 facing:
						(#_coverageTracker9908433_
							cover: (115 to: 124)
							declaredAt: (41 to: 50)
							by: aDirection) ]
				thatSends: #facing:
				to: receiver1 ] value).! !
!Behavior method!
canHandle: aDirection
	#_coverageTracker9908451_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908451_
		cover: (31 to: 40)
		declaredAt: (12 to: 21)
		by: aDirection.
	#_coverageTracker9908451_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908451_
					coverAll:
						{44 to: 48}
					byLiteralOrPseudoVariable: #West) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
movesFoward: aMarsRover
	#_coverageTracker9908470_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908470_
		cover: (35 to: 44)
		declaredAt: (14 to: 23)
		by: aMarsRover.
	#_coverageTracker9908470_
		coverAll:
			{46 to: 66}
		evaluating: [ receiver1 movesFowardFacingWest ]
		thatSends: #movesFowardFacingWest
		to: receiver1 ] value.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908487_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908487_
		cover: (27 to: 34)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9908487_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908487_
					coverAll:
						{37 to: 38}
					byLiteralOrPseudoVariable: $) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
currentDirection
	#_coverageTracker9908506_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908506_
		cover: (20 to: 24)
		declaredAt: (20 to: 24)
		by: state.
	#_coverageTracker9908506_
		coverAll:
			{26 to: 34}
		evaluating: [ receiver1 direction ]
		thatSends: #direction
		to: receiver1 ] value.! !
!Behavior method!
rotateLeft
	#_coverageTracker9908512_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908512_
		coverAll:
			{22 to: 40}
		by: MarsRoverSouthState.
	#_coverageTracker9908512_
		coverAll:
			{42 to: 44}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
direction
	#_coverageTracker9908529_ markAsExecuted.
	^ #_coverageTracker9908529_
		coverAll:
			{17 to: 22}
		byLiteralOrPseudoVariable: #South.! !
!Behavior method!
movesBackward: aMarsRover
	#_coverageTracker9908535_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908535_
		cover: (37 to: 46)
		declaredAt: (16 to: 25)
		by: aMarsRover.
	#_coverageTracker9908535_
		coverAll:
			{48 to: 71}
		evaluating: [ receiver1 movesBackwardFacingSouth ]
		thatSends: #movesBackwardFacingSouth
		to: receiver1 ] value.! !
!Behavior method!
movesFowardFacingWest
	#_coverageTracker9908558_ markAsExecuted.
	#_coverageTracker9908558_
		cover: (43 to: 50)
		declaredAt: (31 to: 38)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908558_
				cover: (31 to: 38)
				declaredAt: (31 to: 38)
				by: position.
			#_coverageTracker9908558_
				coverAll:
					{52 to: 52}
				evaluating: [
					receiver2 -
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908558_
							coverAll:
								{55 to: 55}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker9908558_
							coverAll:
								{56 to: 56}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908558_
										coverAll:
											{57 to: 57}
										byLiteralOrPseudoVariable: 0) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #-
				to: receiver2 ] value).! !
!Behavior method!
rotateLeft
	#_coverageTracker9908565_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908565_
		coverAll:
			{22 to: 39}
		by: MarsRoverEastState.
	#_coverageTracker9908565_
		coverAll:
			{41 to: 43}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.! !
!Behavior method!
with: aCommand
	#_coverageTracker9908583_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker9908583_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker9908583_
		coverAll:
			{33 to: 45}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker9908583_
		coverAll:
			{47 to: 53}
		evaluating: [
			receiver3 detect: [ :commandAvailable |
				[ | receiver2 |
				receiver2 _ #_coverageTracker9908583_
					cover: (76 to: 91)
					declaredAt: (57 to: 72)
					by: commandAvailable.
				#_coverageTracker9908583_
					coverAll:
						{93 to: 102}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker9908583_
								cover: (104 to: 111)
								declaredAt: (7 to: 14)
								by: aCommand) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker9908583_
		coverAll:
			{116 to: 118}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.! !
!Behavior method!
canHandle: aDirection
	#_coverageTracker9908611_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908611_
		cover: (30 to: 39)
		declaredAt: (12 to: 21)
		by: aDirection.
	#_coverageTracker9908611_
		coverAll:
			{41 to: 41}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908611_
					coverAll:
						{43 to: 47}
					byLiteralOrPseudoVariable: #East) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908627_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908627_
		cover: (27 to: 34)
		declaredAt: (12 to: 19)
		by: aCommand.
	#_coverageTracker9908627_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908627_
					coverAll:
						{38 to: 39}
					byLiteralOrPseudoVariable: $r) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
notAValidCommand
	#_coverageTracker9908645_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker9908645_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker9908645_
		coverAll:
			{32 to: 37}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker9908645_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker9908645_
					coverAll:
						{44 to: 48}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker9908645_
					coverAll:
						{50 to: 63}
					evaluating: [ receiver2 invalidCommand ]
					thatSends: #invalidCommand
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
movesFowardFacingNorth
	#_coverageTracker9908688_ markAsExecuted.
	#_coverageTracker9908688_
		cover: (43 to: 50)
		declaredAt: (31 to: 38)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908688_
				cover: (31 to: 38)
				declaredAt: (31 to: 38)
				by: position.
			#_coverageTracker9908688_
				coverAll:
					{52 to: 52}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908688_
							coverAll:
								{55 to: 55}
							byLiteralOrPseudoVariable: 0.
						#_coverageTracker9908688_
							coverAll:
								{56 to: 56}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908688_
										coverAll:
											{57 to: 57}
										byLiteralOrPseudoVariable: 1) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
currentPosition
	#_coverageTracker9908729_ markAsExecuted.
	^ #_coverageTracker9908729_
		cover: (20 to: 27)
		declaredAt: (20 to: 27)
		by: position.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9908733_ markAsExecuted.
	^ #_coverageTracker9908733_
		cover: (62 to: 71)
		declaredAt: (24 to: 33)
		by: aMarsRover.! !
!Behavior method!
canHandle: aCommand
	#_coverageTracker9908741_ markAsExecuted.
	^ #_coverageTracker9908741_
		coverAll:
			{31 to: 35}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
landsAt: aPosition facing: aDirection
	#_coverageTracker9908758_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker9908758_
		coverAll:
			{43 to: 46}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker9908758_
		coverAll:
			{48 to: 50}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker9908758_
		coverAll:
			{52 to: 69. 81 to: 87}
		evaluating: [
			receiver2
				initializeLandsAt:
					(#_coverageTracker9908758_
						cover: (71 to: 79)
						declaredAt: (10 to: 18)
						by: aPosition)
				facing:
					(#_coverageTracker9908758_
						cover: (89 to: 98)
						declaredAt: (28 to: 37)
						by: aDirection) ]
		thatSends: #initializeLandsAt:facing:
		to: receiver2 ] value.! !
!Behavior method!
hasToTakeActionToMove: aMarsRover whenFacing: state
	#_coverageTracker9908795_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908795_
		cover: (62 to: 66)
		declaredAt: (47 to: 51)
		by: state.
	#_coverageTracker9908795_
		coverAll:
			{68 to: 81}
		evaluating: [
			receiver1 movesBackward:
				(#_coverageTracker9908795_
					cover: (83 to: 92)
					declaredAt: (24 to: 33)
					by: aMarsRover) ]
		thatSends: #movesBackward:
		to: receiver1 ] value.! !
!Behavior method!
canHandle: aDirection
	#_coverageTracker9908812_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908812_
		cover: (31 to: 40)
		declaredAt: (12 to: 21)
		by: aDirection.
	#_coverageTracker9908812_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908812_
					coverAll:
						{44 to: 49}
					byLiteralOrPseudoVariable: #North) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
rotate: newStateAfterRotate
	#_coverageTracker9908841_ markAsExecuted.
	^ #_coverageTracker9908841_
		cover: (34 to: 38)
		declaredAt: (34 to: 38)
		by:
			(state _ #_coverageTracker9908841_
				cover: (43 to: 61)
				declaredAt: (9 to: 27)
				by: newStateAfterRotate).! !
!Behavior method!
readCommands: aCommandToTakeAction
	#_coverageTracker9908848_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker9908848_
		cover: (38 to: 57)
		declaredAt: (15 to: 34)
		by: aCommandToTakeAction.
	#_coverageTracker9908848_
		coverAll:
			{59 to: 66}
		evaluating: [ receiver1 ifEmpty: [ ^ #_coverageTracker9908848_
					coverAll:
						{69 to: 72}
					byLiteralOrPseudoVariable: self ]]
		thatSends: #ifEmpty:
		to: receiver1 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker9908848_
		cover: (77 to: 96)
		declaredAt: (15 to: 34)
		by: aCommandToTakeAction.
	#_coverageTracker9908848_
		coverAll:
			{98 to: 100}
		evaluating: [
			receiver3 do: [ :oneCommand |
				[ | receiver2 |
				receiver2 _ #_coverageTracker9908848_
					coverAll:
						{118 to: 121}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker9908848_
					coverAll:
						{123 to: 128}
					evaluating: [
						receiver2 moves:
							(#_coverageTracker9908848_
								cover: (130 to: 139)
								declaredAt: (105 to: 114)
								by: oneCommand) ]
					thatSends: #moves:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
movesFowardFacingEast
	#_coverageTracker9908884_ markAsExecuted.
	#_coverageTracker9908884_
		cover: (43 to: 50)
		declaredAt: (31 to: 38)
		by:
			(position _ [ | receiver2 |
			receiver2 _ #_coverageTracker9908884_
				cover: (31 to: 38)
				declaredAt: (31 to: 38)
				by: position.
			#_coverageTracker9908884_
				coverAll:
					{53 to: 53}
				evaluating: [
					receiver2 +
						[ | receiver1 |
						receiver1 _ #_coverageTracker9908884_
							coverAll:
								{56 to: 56}
							byLiteralOrPseudoVariable: 1.
						#_coverageTracker9908884_
							coverAll:
								{57 to: 57}
							evaluating: [
								receiver1 @
									(#_coverageTracker9908884_
										coverAll:
											{58 to: 58}
										byLiteralOrPseudoVariable: 0) ]
							thatSends: #@
							to: receiver1 ] value ]
				thatSends: #+
				to: receiver2 ] value).! !
!Behavior method!
direction
	#_coverageTracker9908891_ markAsExecuted.
	^ #_coverageTracker9908891_
		coverAll:
			{17 to: 21}
		byLiteralOrPseudoVariable: #West.! !
!Behavior method!
movesBackward: aMarsRover
	#_coverageTracker9908915_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908915_
		cover: (37 to: 46)
		declaredAt: (16 to: 25)
		by: aMarsRover.
	#_coverageTracker9908915_
		coverAll:
			{48 to: 71}
		evaluating: [ receiver1 movesBackwardFacingNorth ]
		thatSends: #movesBackwardFacingNorth
		to: receiver1 ] value.! !
!Behavior method!
moves: oneCommand
	#_coverageTracker9908938_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker9908938_
		coverAll:
			{29 to: 35}
		by: Command.
	#_coverageTracker9908938_
		coverAll:
			{37 to: 41}
		evaluating: [
			receiver1 with:
				(#_coverageTracker9908938_
					cover: (43 to: 52)
					declaredAt: (8 to: 17)
					by: oneCommand) ]
		thatSends: #with:
		to: receiver1 ] value.
	#_coverageTracker9908938_
		coverAll:
			{55 to: 76. 83 to: 93}
		evaluating: [
			receiver2
				hasToTakeActionToMove:
					(#_coverageTracker9908938_
						coverAll:
							{78 to: 81}
						byLiteralOrPseudoVariable: self)
				whenFacing:
					(#_coverageTracker9908938_
						cover: (95 to: 99)
						declaredAt: (95 to: 99)
						by: state) ]
		thatSends: #hasToTakeActionToMove:whenFacing:
		to: receiver2 ] value.! !
!Behavior method!
canHandle: aDirection
	#_coverageTracker9908962_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908962_
		cover: (31 to: 40)
		declaredAt: (12 to: 21)
		by: aDirection.
	#_coverageTracker9908962_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver1 =
				(#_coverageTracker9908962_
					coverAll:
						{44 to: 49}
					byLiteralOrPseudoVariable: #South) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
movesFoward: aMarsRover
	#_coverageTracker9908981_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908981_
		cover: (35 to: 44)
		declaredAt: (14 to: 23)
		by: aMarsRover.
	#_coverageTracker9908981_
		coverAll:
			{46 to: 66}
		evaluating: [ receiver1 movesFowardFacingEast ]
		thatSends: #movesFowardFacingEast
		to: receiver1 ] value.! !
!Behavior method!
movesFoward: aMarsRover
	#_coverageTracker9908999_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker9908999_
		cover: (35 to: 44)
		declaredAt: (14 to: 23)
		by: aMarsRover.
	#_coverageTracker9908999_
		coverAll:
			{46 to: 67}
		evaluating: [ receiver1 movesFowardFacingSouth ]
		thatSends: #movesFowardFacingSouth
		to: receiver1 ] value.! !

!testRun: #MarsRoverTest #test00MarsRoverCreatedCorrectlyAtOriginFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMovesFoward stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesBackwards stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverRotatesLeft stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverRotatesRight stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverCreatedCorrectlyAt01MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverCreatedCorrectlyAt33MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCreatedCorrectlyAt47MovesFowardFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverCreatedCorrectlyAt01MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverCreatedCorrectlyAt33MovesBackwardsFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverMovesFowardTwiceFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverMovesFowardThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesBackwardsTwiceFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsThreeTimesFacingNorth stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverRotatesLeftTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverRotatesRightTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverFacingWestMovesFoward stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverFacingWestMovesBackwardsThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverFacingWestRotateRightOnce stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFacingWestRotateRightTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test22MarsRoverFacingWestRotateRightThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test23MarsRoverFacingWestRotateLeftOnce stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test24MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test25MarsRoverFacingWestRotateLeftTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test26MarsRoverFacingSouthMovesBackwards stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test27MarsRoverFacingSouthMovesFoward stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test28MarsRoverFacingSouthRotatesRightOnce stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test29MarsRoverFacingSouthRotatesRightTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test30MarsRoverFacingSouthRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test31MarsRoverFacingSouthRotatesLeftOnce stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test32MarsRoverFacingSouthRotatesLeftTwice stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test33MarsRoverFacingSouthRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test34MarsRoverFacingEastMovesFoward stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test35MarsRoverFacingEastMovesBackwards stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test36MarsRoverFacingEastRotatesRightThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test37MarsRoverFacingEastRotatesLeftThreeTimes stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test38MarsRoverFacingEastRotatesLeftAndRight stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test39MarsRoverFacingEastMovesFowardAndBackward stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test40MarsRoverFacingNorthMovesToSamePosition stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test41MarsRoverFacingNorthReceivedAnInvalidCommand stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

!testRun: #MarsRoverTest #test42MarsRoverFacingNorthReceivedACommandWithAnInvalidCommandAtLast stamp: 'CB 5/14/2023 14:41:11'!
PASSED!

----SNAPSHOT----(14 May 2023 14:43:32) CuisUniversity-5706.image priorSource: 11176271!

----SNAPSHOT----(14 May 2023 14:43:35) CuisUniversity-5706.image priorSource: 11244185!

----QUIT----(14 May 2023 14:43:45) CuisUniversity-5706.image priorSource: 11244274!

----STARTUP---- (15 May 2023 17:36:54) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!


!classRemoval: #Verdadero1 stamp: 'CB 5/15/2023 19:07:38'!
Verdadero subclass: #Verdadero1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classRemoval: #Verdadero stamp: 'CB 5/15/2023 19:07:38'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classRemoval: #Falso stamp: 'CB 5/15/2023 19:07:38'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AlgebraDeBoole-Prototipos'!

!classRemoval: #Fraccion stamp: 'CB 5/15/2023 19:07:41'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Uno stamp: 'CB 5/15/2023 19:07:41'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #PositivoMayorAUno stamp: 'CB 5/15/2023 19:07:41'!
EnteroMenosCeroYUno subclass: #PositivoMayorAUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Negativo stamp: 'CB 5/15/2023 19:07:42'!
EnteroMenosCeroYUno subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #EnteroMenosCeroYUno stamp: 'CB 5/15/2023 19:07:42'!
Entero subclass: #EnteroMenosCeroYUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Cero stamp: 'CB 5/15/2023 19:07:42'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Entero stamp: 'CB 5/15/2023 19:07:42'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #Numero stamp: 'CB 5/15/2023 19:07:42'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #NumeroTest stamp: 'CB 5/15/2023 19:07:42'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Solution-3.6'!

!classRemoval: #OONotEmptyStackState stamp: 'CB 5/15/2023 19:07:47'!
OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOEmptyStackState stamp: 'CB 5/15/2023 19:07:47'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackState stamp: 'CB 5/15/2023 19:07:47'!
Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStack stamp: 'CB 5/15/2023 19:07:47'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackTest stamp: 'CB 5/15/2023 19:07:47'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackBase stamp: 'CB 5/15/2023 19:07:48'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOPushedObjectCell stamp: 'CB 5/15/2023 19:07:48'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStackTop stamp: 'CB 5/15/2023 19:07:48'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #MarsRoverWestState stamp: 'CB 5/15/2023 19:07:54'!
MarsRoverState subclass: #MarsRoverWestState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRoverSouthState stamp: 'CB 5/15/2023 19:07:54'!
MarsRoverState subclass: #MarsRoverSouthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRoverNorthState stamp: 'CB 5/15/2023 19:07:54'!
MarsRoverState subclass: #MarsRoverNorthState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRoverEastState stamp: 'CB 5/15/2023 19:07:54'!
MarsRoverState subclass: #MarsRoverEastState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRoverState stamp: 'CB 5/15/2023 19:07:54'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRover stamp: 'CB 5/15/2023 19:07:54'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #RotateRight stamp: 'CB 5/15/2023 19:07:55'!
Valid subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #RotateLeft stamp: 'CB 5/15/2023 19:07:55'!
Valid subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Foward stamp: 'CB 5/15/2023 19:07:55'!
Valid subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Empty stamp: 'CB 5/15/2023 19:07:55'!
Valid subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Backward stamp: 'CB 5/15/2023 19:07:55'!
Valid subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Valid stamp: 'CB 5/15/2023 19:07:55'!
Command subclass: #Valid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #NonValid stamp: 'CB 5/15/2023 19:07:56'!
Command subclass: #NonValid
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #Command stamp: 'CB 5/15/2023 19:07:56'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

!classRemoval: #MarsRoverTest stamp: 'CB 5/15/2023 19:07:56'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Ejercicio'!

----SNAPSHOT----(15 May 2023 19:15:54) CuisUniversity-5706.image priorSource: 11244363!

----End fileIn of C:\Users\cecibola\Downloads\windows64\windows64\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:20:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:20:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:20:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:24:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:15'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:24:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:28:48' prior: 50683484!
balance

	^transactions sum: [ :aTransaction | aTransaction isDeposit ifTrue:[aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[-1 * aTransaction value] 
		] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'value' stamp: 'CB 5/15/2023 19:29:06'!
isDeposit

	^ true! !
!Deposit methodsFor: 'value' stamp: 'CB 5/15/2023 19:29:17'!
isWithdraw

	^ false! !
!Withdraw methodsFor: 'value' stamp: 'CB 5/15/2023 19:29:32'!
isWithdraw

	^ true! !
!Withdraw methodsFor: 'value' stamp: 'CB 5/15/2023 19:29:41'!
isDeposit

	^ false! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:29:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:29:45'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:29:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:29:45'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:30:14' prior: 50683577!
balance

	^transactions sum: [ :aTransaction | aTransaction isDeposit ifTrue:[ aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[-1 * (aTransaction value)] 
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:15'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:15'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:30:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:30:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:30:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:30:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:30:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:30:29'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:30:49' prior: 50683626!
balance

	^transactions sum: [ :aTransaction | aTransaction isDeposit ifTrue:[ aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[-1 * (aTransaction value)]. 
		] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:30:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:30:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:30:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:30:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:30:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:30:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:31:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:31:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:31:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:36:45' prior: 50683689!
balance
     
	^transactions inject: 0 into: [ :aTransaction | aTransaction isDeposit ifTrue:[ aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[-1 * (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:36:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:36:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:36:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:36:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:36:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:36:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:36:46'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:37:25' prior: 50683741!
balance
     
	^transactions inject: 0 into: [:partialSum :aTransaction | aTransaction isDeposit ifTrue:[ aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[-1 * (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:37:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:37:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:37:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:37:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:37:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:37:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:37:27'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:38:17' prior: 50683778!
balance
     
	^transactions inject: 0 into: [:partialSum :aTransaction | aTransaction isDeposit ifTrue:[ partialSum + aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[ partialSum - (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:38:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:38:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:38:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:38:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:38:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:38:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:38:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:38:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:38:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:38:30'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:39:53' prior: 50683815!
balance
     
	^transactions inject: 0 into: [:aTransaction :partialSum  | aTransaction isDeposit ifTrue:[ partialSum + aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[ partialSum - (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:39:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:39:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:39:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:39:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:39:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:39:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:39:54'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:41:01' prior: 50683879!
balance
     
	^transactions inject: 0 into: [:partialSum  :aTransaction | 
		                                                  aTransaction isDeposit ifTrue:[ partialSum + aTransaction value]. 
		                                                  aTransaction isWithdraw ifTrue:[ partialSum - (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:41:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:41:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:41:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:41:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:41:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:41:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:41:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:41:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:41:41' prior: 50683917!
balance
     
	^transactions inject: 0 into: [:partialSum  :aTransaction | 
		                                                  aTransaction isDeposit ifTrue:[ partialSum + (aTransaction value)]. 
		                                                  aTransaction isWithdraw ifTrue:[ partialSum - (aTransaction value)]] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:41:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:41:42'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:41:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:41:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:41:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:41:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:41:42'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:42:33' prior: 50683960!
balance
     
	^transactions inject: 0 into: [:partialSum  :aTransaction | partialSum + (aTransaction value)]
		                              ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:42:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:42:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:42:35'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:47:24' prior: 50684000!
balance
     
	^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                   ifFalse:[-1 * (aTransaction value)]]  ifEmpty: [0]		                              ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:47:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:47:26'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:47:45' prior: 50684038!
balance
     
	^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		                              ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:50:32' prior: 50684075!
balance
        transactions do: [:aTransaction | aTransaction contributesToAcoountBalance: self]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:50:34' prior: 50684090!
balance
        transactions do: [:aTransaction | aTransaction contributesToAcountBalance: self]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !

!methodRemoval: Deposit #isWithdraw stamp: 'CB 5/15/2023 19:50:41'!
isWithdraw

	^ false!

!methodRemoval: Deposit #isDeposit stamp: 'CB 5/15/2023 19:50:42'!
isDeposit

	^ true!
!Deposit methodsFor: 'value' stamp: 'CB 5/15/2023 19:52:07'!
contributesToAccountBalance: anAccount

	^ anAccount depositSumInBalance: (self value)! !

!methodRemoval: Withdraw #isDeposit stamp: 'CB 5/15/2023 19:52:22'!
isDeposit

	^ false!

!methodRemoval: Withdraw #isWithdraw stamp: 'CB 5/15/2023 19:52:23'!
isWithdraw

	^ true!
!Withdraw methodsFor: 'value' stamp: 'CB 5/15/2023 19:52:37'!
contributesToAccountBalance: anAccount

	^ anAccount withdrawRestInBalance: (self value)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:53:09' prior: 50684108!
balance
        transactions do: [:aTransaction | aTransaction contributesToAccountBalance: self]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CB 5/15/2023 19:53:31'!
depositSumInBalance: aValue
     ^aValue! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CB 5/15/2023 19:53:55'!
withdrawRestInBalance: aValue
     ^-1 * aValue! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:54:20' prior: 50684147!
balance
        transactions sum: [:aTransaction | aTransaction contributesToAccountBalance: self]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:54:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:54:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:54:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:54:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:54:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:54:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:54:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:54:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:54:59'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:54:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CB 5/15/2023 19:55:34' prior: 50684168!
withdrawRestInBalance: aValue
     ^(-1 * aValue)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:55:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:55:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:55:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:55:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:55:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:55:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:55:39'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:55:51' prior: 50684173!
balance
        ^transactions sum: [:aTransaction | aTransaction contributesToAccountBalance: self]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:55:53'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:55:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:55:53'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 19:56:03' prior: 50684260!
balance
        ^transactions sum: [:aTransaction | aTransaction contributesToAccountBalance: self] ifEmpty: [0]
     
	"^transactions sum: [:aTransaction | aTransaction isDeposit ifTrue:[aTransaction value] 
		                                                                                      ifFalse:[-1 * (aTransaction value)]]  
	                                                                                              ifEmpty: [0]		  "                            ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 19:56:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 19:56:04'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 20:10:13' prior: 50684308!
balance
         |actualBalance|
          actualBalance := 0
        ^transactions do: [:aTransaction | actualBalance := aTransaction contributesToAccountBalance: actualBalance].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CB 5/15/2023 20:10:38' prior: 50684353!
balance
         |actualBalance|
          actualBalance := 0.
          transactions do: [:aTransaction | actualBalance := aTransaction contributesToAccountBalance: actualBalance].
          ^actualBalance ! !
!Withdraw methodsFor: 'value' stamp: 'CB 5/15/2023 20:11:25' prior: 50684141!
contributesToAccountBalance: aBalance

	^aBalance - self value! !
!Withdraw methodsFor: 'value' stamp: 'CB 5/15/2023 20:11:32' prior: 50684372!
contributesToAccountBalance: aBalance

	^aBalance - (self value)! !
!Deposit methodsFor: 'value' stamp: 'CB 5/15/2023 20:11:43' prior: 50684130!
contributesToAccountBalance: aBalance

	^aBalance + (self value)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/15/2023 20:11:49'!
PASSED!

!methodRemoval: ReceptiveAccount #depositSumInBalance: stamp: 'CB 5/15/2023 20:11:52'!
depositSumInBalance: aValue
     ^aValue!

!methodRemoval: ReceptiveAccount #withdrawRestInBalance: stamp: 'CB 5/15/2023 20:11:53'!
withdrawRestInBalance: aValue
     ^(-1 * aValue)!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CB 5/15/2023 20:13:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'CB 5/15/2023 20:18:08'!
test01 

	| account |
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/15/2023 20:21:05'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:20:55'!
test01AnEmptyPortfolio

	| portfolio |
         portfolio := Portfolio new. 	! !

!methodRemoval: PortfolioTest #test01 stamp: 'CB 5/15/2023 20:21:19'!
test01 

	| account |
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:21:41' prior: 50684445!
test01AnEmptyPortfolio

	| portfolio |
         portfolio := Portfolio new. 	
         self assert: 0 equals: portfolio balance! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:22:05'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:22:23'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:22:31' prior: 50684464!
balance
	^0! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:22:34'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:22:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:23:47'!
test02APortfolioWithOneAccount

	| portfolio anAccount |
         portfolio := Portfolio new.
         portfolio addAccount: anAccount. 	
         self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:24:52' prior: 50684477!
test02APortfolioWithOneAccount

	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount. 	
         self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:25:09' prior: 50684486!
test02APortfolioWithOneAccount

	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount. 	
         self assert: 50 equals: portfolio balance! !

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:25:52'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:25:58'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/15/2023 20:27:13'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:27:11' prior: 50684512!
addAccount: anAccount 
	accounts := accounts add: anAccount ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:27:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:27:41'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:27:41'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 20:28:14' prior: 50684498!
test02APortfolioWithOneAccount

	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	
         self assert: 50 equals: portfolio balance! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:29:33' overrides: 16920235!
initialize 

     accounts := OrderedCollection new! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:29:39'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:29:39'!
FAILURE!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:29:39'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:30:27' prior: 50684468!
balance
	accounts ifEmpty: [^0]
	^accounts balance! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:30:29'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:30:29'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:30:34' prior: 50684564!
balance
	accounts ifEmpty: [^0]
	^50! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:30:36'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:30:36'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:31:14'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:31:14'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:31:27' prior: 50684575!
balance
	accounts ifEmpty: [^0].
	^50! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:31:28'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:31:28'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:31:28'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:32:12' prior: 50684591!
balance
	accounts isEmpty ifTrue: [^0].
	^50! !

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:32:13'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:32:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:32:17'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:32:17'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:58:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:58:51'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:58:51'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:58:51'!
ERROR!

accounts!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:59:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:59:26'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:59:26'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 20:59:51' prior: 50684524!
addAccount: anAccount 
	accounts := (accounts add: anAccount) ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 20:59:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:59:52'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 20:59:52'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:00:02' prior: 50684648!
addAccount: anAccount 
	 (accounts add: anAccount) ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 21:00:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 21:00:04'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:00:09' prior: 50684662!
addAccount: anAccount 
	 accounts add: anAccount ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 21:00:23' prior: 50684538!
test02APortfolioWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	
         self assert: 50 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 21:00:44'!
test03APortfolioBalanceWithOneAccountAndOnePortfolio
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	
         self assert: 50 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 21:01:01'!
test02APortfolioBalanceWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	
         self assert: 50 equals: portfolio balance! !

!methodRemoval: PortfolioTest #test02APortfolioWithOneAccount stamp: 'CB 5/15/2023 21:01:01'!
test02APortfolioWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	
         self assert: 50 equals: portfolio balance!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/15/2023 21:02:39' prior: 50684690!
test03APortfolioBalanceWithOneAccountAndOnePortfolio
        
	| portfolio anAccount portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 addAccount: anAccount.
	
         portfolio := Portfolio new.
         portfolio addAccount: anAccount.
 	 portfolio addPortfolio: portfolio1.
         self assert: 100 equals: portfolio balance! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/15/2023 21:03:47'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:03:45'!
addPortfolio: aPortfolio
      portfolios add: aPortfolio! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:04:08' prior: 50684550 overrides: 16920235!
initialize 

     accounts := OrderedCollection new. 
     portfolios := OrderedCollection new. ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:06:23' prior: 50684604!
balance
	accounts isEmpty ifTrue: [^0].
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0])+ (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/15/2023 21:06:30' prior: 50684762!
balance
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0])+ (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/15/2023 21:06:31'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/15/2023 21:06:31'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/15/2023 21:06:31'!
PASSED!

----SNAPSHOT----(15 May 2023 21:07:30) CuisUniversity-5706.image priorSource: 11251770!

----QUIT----(15 May 2023 23:00:25) CuisUniversity-5706.image priorSource: 11300391!

----STARTUP---- (18 May 2023 10:19:44) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!

!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 10:22:26'!
add: anActive 
	 (anActive isKindOf: ReceptiveAccount) ifTrue: [^accounts add: anActive ].
	 (anActive isKindOf: Portfolio) ifTrue: [^portfolios add: anActive]  ! !

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:22:33'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:22:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 10:22:33'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:22:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:22:50' prior: 50684726!
test03APortfolioBalanceWithOneAccountAndOnePortfolio
        
	| portfolio anAccount portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 add: anAccount.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
         self assert: 100 equals: portfolio balance! !

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:22:51'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:22:51'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 10:22:51'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:22:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:22:57' prior: 50684702!
test02APortfolioBalanceWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	
         self assert: 50 equals: portfolio balance! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:23:02'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:23:02'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 10:23:02'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:23:02'!
PASSED!

!methodRemoval: Portfolio #addAccount: stamp: 'CB 5/18/2023 10:23:05'!
addAccount: anAccount 
	 accounts add: anAccount !

!methodRemoval: Portfolio #addPortfolio: stamp: 'CB 5/18/2023 10:23:06'!
addPortfolio: aPortfolio
      portfolios add: aPortfolio!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:23:09'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 10:23:09'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:23:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:46:19'!
test04AnEmptyPortfolioTransactions
        
	| portfolio anAccount portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 add: anAccount.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
         self assert: 100 equals: portfolio balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:47:46' prior: 50684891!
test04AnEmptyPortfolioTransactions
        
	| portfolio |
         portfolio := Portfolio new. 	
         self assert: 0 equals: portfolio transactions! !

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 10:47:48'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 10:47:57'!
transactions
	self shouldBeImplemented.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:48:58' prior: 50684906!
test04AnEmptyPortfolioTransactions
        
	| portfolio |
         portfolio := Portfolio new. 	
         self assert: (OrderedCollection new) equals: portfolio transactions! !

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 10:49:00'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 10:49:24' prior: 50684917!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 10:49:25'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 10:49:25'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 10:49:25'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 10:49:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:53:02'!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	
         self assert: (OrderedCollection with: Deposit) equals: portfolio transactions! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 10:55:05' prior: 50684951!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 10:55:07'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 10:56:54' prior: 50684934!
transactions
        accounts ifEmpty: [^OrderedCollection new].
	"nos apuramos si hacemos la iteracion?"
	accounts transactions! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:02:28' prior: 50684981!
transactions
        |transactionsOfPortfolio|
        transactionsOfPortfolio := OrderedCollection new.
        accounts ifEmpty: [^ transactionsOfPortfolio].
	"nos apuramos si hacemos la iteracion?"
	accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)]! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:02:34' prior: 50684988!
transactions
        |transactionsOfPortfolio|
        transactionsOfPortfolio := OrderedCollection new.
        accounts ifEmpty: [^ transactionsOfPortfolio].
	"nos apuramos si hacemos la iteracion?"
	^accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:02:37'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:02:37'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:02:37'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:02:37'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:02:37'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:02:51' prior: 50685004!
transactions
        |transactionsOfPortfolio|
        transactionsOfPortfolio := OrderedCollection new.
        "accounts ifEmpty: [^ transactionsOfPortfolio]."
	"nos apuramos si hacemos la iteracion?"
	^accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:02:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:02:52'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:02:52'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:02:52'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:02:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:05:38'!
test06APortfolioTransactionsWithOneAccountAndOnePortfolio
        
	| portfolio anAccount portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 add: anAccount.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
	
         self assert: (anAccount transactions add: portfolio1 transactions) equals: portfolio transactions.! !

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:05:41'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:05:41'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:08:44' prior: 50684964!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount portfolio1 |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 add: anAccount.
	
         portfolio := Portfolio new.
 	 portfolio add: portfolio1.
 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:08:46'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:09:10' prior: 50685036!
transactions
        |transactionsOfPortfolio|
        transactionsOfPortfolio := OrderedCollection new.
        "accounts ifEmpty: [^ transactionsOfPortfolio]."
	"nos apuramos si hacemos la iteracion?"
	^portfolios inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:09:11'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:09:11'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:09:11'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:09:11'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:11'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:09:11'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:11'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:16'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:16'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:09:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:22'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:09:22'!
FAILURE!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:09:25'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:09:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:09:29'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:09:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:10:04' prior: 50685110!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount  |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:09'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:10:17' prior: 50685129!
transactions
        |transactionsOfPortfolio|
        transactionsOfPortfolio := OrderedCollection new.
        "accounts ifEmpty: [^ transactionsOfPortfolio]."
	"nos apuramos si hacemos la iteracion?"
	^accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:10:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:10:19'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:10:19'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:10:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:19'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:10:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:19'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:10:28'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:10:30'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:10:31'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:10:33'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:36'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:36'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:10:45'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:47'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:10:47'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:11:03' prior: 50685200!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount  |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:11:04'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:11:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:14:35' prior: 50685068!
test06APortfolioTransactionsWithOneAccountAndOnePortfolio
        
	| portfolio anAccount anAccount1 portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	
	 anAccount1 := ReceptiveAccount new.
	Deposit register: 120 on: anAccount1.
	 portfolio1 := Portfolio new.
         	portfolio1 add: anAccount1.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
	
         self assert: (anAccount transactions add: portfolio1 transactions) equals: portfolio transactions.! !

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:14:36'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:14:41'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:14:42'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:14:44'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:14:44'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:17:42' prior: 50685216!
transactions
        |transactionsOfPortfolio transactionsAccounts|
        transactionsOfPortfolio := OrderedCollection new.
        "accounts ifEmpty: [^ transactionsOfPortfolio]."
	"nos apuramos si hacemos la iteracion?"
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:17:45'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:17:45'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:17:45'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:17:45'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:17:45'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:17:45'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:18:04' prior: 50685362!
transactions
        |transactionsOfPortfolio transactionsAccounts|
        transactionsOfPortfolio := OrderedCollection new.
      
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:18:12' prior: 50685406!
transactions
        |transactionsOfPortfolio transactionsAccounts|
       
        transactionsOfPortfolio := OrderedCollection new.
      
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:21:00'!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio |
         portfolio := Portfolio new. 	
         self assert: (OrderedCollection new) equals: (portfolio hasRegistered: Deposit )! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:21:45' prior: 50685448!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  anAccount|
         portfolio := Portfolio new. 	
        anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
         self assert: (OrderedCollection new) equals: (portfolio hasRegistered: Deposit )! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:22:43' prior: 50685458!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  aTransaction|
         portfolio := Portfolio new. 	
         aTransaction := Deposit for: 50.

         self assert: (OrderedCollection new) equals: (portfolio hasRegistered: aTransaction )! !

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:22:47'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:22:52'!
hasRegistered: aTransaction 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:22:57' prior: 50685485!
hasRegistered: aTransaction 
	^false! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:23:03' prior: 50685471!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  aTransaction|
         portfolio := Portfolio new. 	
         aTransaction := Deposit for: 50.

         self assert: false equals: (portfolio hasRegistered: aTransaction )! !

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:23:05'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:23:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:23:12' prior: 50685495!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  aTransaction|
         portfolio := Portfolio new. 	
         aTransaction := Deposit for: 50.

         self assert: false equals: (portfolio hasRegistered: aTransaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:23:43'!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount  |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:24:14' prior: 50685545!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit for: 50.
	 Deposit register: 50 on: anAccount.
	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount transactions) equals: portfolio transactions! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:24:54' prior: 50685559!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit for: 50.
	 Deposit register: 50 on: anAccount.
	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:24:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:24:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:25:07' prior: 50685574!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit for: 50.
	 Deposit register: 50 on: anAccount.
	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: true equals: (portfolio hasRegistered: aTransaction)! !

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:25:08'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:26:39' prior: 50685622!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction :=  Deposit for: 200.
	 Deposit register: 200 on: anAccount.
	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:26:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:26:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:29:04' prior: 50685641!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	
	aTransaction :=  Deposit for: 200.
	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:29:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:29:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:31:09' prior: 50685689!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:31:10'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:40:19' prior: 50685490!
hasRegistered: aTransaction 
	^accounts inject: false into: [:hasTransactionRegistered :anAccount | hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:40:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:40:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:41:53'!
test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio
        
	| portfolio anAccount anAccount1 portfolio1 aTransaction|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	
	 anAccount1 := ReceptiveAccount new.
	 aTransaction := Deposit register: 120 on: anAccount1.
	 portfolio1 := Portfolio new.
         	portfolio1 add: anAccount1.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
	
         self assert: true equals: (portfolio hasRegistered: aTransaction).! !

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:42:13'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 11:44:24' prior: 50685756!
hasRegistered: aTransaction 
         |isTransactionInAccounts|
	 isTransactionInAccounts := accounts inject: false into: [:hasTransactionRegistered :anAccount | hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].
	^portfolios inject: isTransactionInAccounts into: [:hasTransactionRegistered :aPortfolio | hasTransactionRegistered or: (aPortfolio hasRegistered: aTransaction)].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:44:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:44:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:44:53'!
test07APortfolioTransactionsWithOneAccountAndOnePortfolio
        
	| portfolio anAccount anAccount1 portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	
	 anAccount1 := ReceptiveAccount new.
	Deposit register: 120 on: anAccount1.
	 portfolio1 := Portfolio new.
         	portfolio1 add: anAccount1.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
	
         self assert: (anAccount transactions add: portfolio1 transactions) equals: portfolio transactions.! !

!methodRemoval: PortfolioTest #test06APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:44:53'!
test06APortfolioTransactionsWithOneAccountAndOnePortfolio
        
	| portfolio anAccount anAccount1 portfolio1|
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	
	 anAccount1 := ReceptiveAccount new.
	Deposit register: 120 on: anAccount1.
	 portfolio1 := Portfolio new.
         	portfolio1 add: anAccount1.
	
         portfolio := Portfolio new.
         portfolio add: anAccount.
 	 portfolio add: portfolio1.
	
         self assert: (anAccount transactions add: portfolio1 transactions) equals: portfolio transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:45:05'!
test08AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  aTransaction|
         portfolio := Portfolio new. 	
         aTransaction := Deposit for: 50.

         self assert: false equals: (portfolio hasRegistered: aTransaction).! !

!methodRemoval: PortfolioTest #test07AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:45:05'!
test07AnEmptyPortfolioHasRegisteredATransaction
	
	| portfolio  aTransaction|
         portfolio := Portfolio new. 	
         aTransaction := Deposit for: 50.

         self assert: false equals: (portfolio hasRegistered: aTransaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 11:45:17'!
test09PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !

!methodRemoval: PortfolioTest #test08PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:45:17'!
test08PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 "para preguntar"
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/18/2023 11:45:18'!
PASSED!

----SNAPSHOT----(18 May 2023 11:45:42) CuisUniversity-5706.image priorSource: 11300480!

----SNAPSHOT----(18 May 2023 11:49:20) CuisUniversity-5706.image priorSource: 11339693!

----QUIT----(18 May 2023 12:02:58) CuisUniversity-5706.image priorSource: 11339782!

----STARTUP---- (18 May 2023 19:41:28) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!

!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:17:25' prior: 50684771!
balance
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0])+ (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])
	" ^activos sum[:anActive"! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:18:38' prior: 50685427!
transactions
        |transactionsOfPortfolio transactionsAccounts|
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:19:05' prior: 50686029!
balance
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0])+ (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])
	" ^activos sum[:anActive| anActive balance] ifEmpty:[0])"! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:19:26' prior: 50686060!
balance
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0]) + (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])
	" ^activos sum[:anActive| anActive balance] ifEmpty:[0])"! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:21:25' prior: 50685817!
hasRegistered: aTransaction 
         |isTransactionInAccounts|
	 isTransactionInAccounts := accounts inject: false into: [:hasTransactionRegistered :anAccount | hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].
	^portfolios inject: isTransactionInAccounts into: [:hasTransactionRegistered :aPortfolio | hasTransactionRegistered or: (aPortfolio hasRegistered: aTransaction)].
	" ^activos inject: false into: [:hasTransactionRegistered :anActive | hasTransactionRegistered or: (anActive hasRegistered: aTransaction)]."! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:22:44' prior: 50686037!
transactions
        |transactionsOfPortfolio transactionsAccounts|
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].
	"^active inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]."! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/18/2023 20:24:03'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:24:01' prior: 50684756 overrides: 16920235!
initialize 

     "accounts := OrderedCollection new. 
     portfolios := OrderedCollection new."  
     active := OrderedCollection new. ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:28:19' prior: 50686098!
transactions
        |transactionsOfPortfolio transactionsAccounts|
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)].
	"^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]."! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:28:26' prior: 50686078!
hasRegistered: aTransaction 
         |isTransactionInAccounts|
	 isTransactionInAccounts := accounts inject: false into: [:hasTransactionRegistered :anAccount | hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].
	^portfolios inject: isTransactionInAccounts into: [:hasTransactionRegistered :aPortfolio | hasTransactionRegistered or: (aPortfolio hasRegistered: aTransaction)].
	" ^actives inject: false into: [:hasTransactionRegistered :anActive | hasTransactionRegistered or: (anActive hasRegistered: aTransaction)]."! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:28:33' prior: 50686069!
balance
	^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0]) + (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])
	" ^actives sum[:anActive| anActive balance] ifEmpty:[0])"! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/18/2023 20:28:40'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios active actives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:28:38' prior: 50686136 overrides: 16920235!
initialize 

     "accounts := OrderedCollection new. 
     portfolios := OrderedCollection new."  
     actives := OrderedCollection new. ! !

Object subclass: #Portfolio
	instanceVariableNames: 'actives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/18/2023 20:28:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'actives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(18 May 2023 20:31:49) CuisUniversity-5706.image priorSource: 11339871!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:39:32' prior: 50686173!
hasRegistered: aTransaction 
        " |isTransactionInAccounts|
	 isTransactionInAccounts := accounts inject: false into: [:hasTransactionRegistered :anAccount | hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].
	^portfolios inject: isTransactionInAccounts into: [:hasTransactionRegistered :aPortfolio | hasTransactionRegistered or: (aPortfolio hasRegistered: aTransaction)]."
	 ^actives inject: false into: [:hasTransactionRegistered :anActive | hasTransactionRegistered or: (anActive hasRegistered: aTransaction)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:39:59' prior: 50686144!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	"transactionsAccounts := accounts inject: transactionsOfPortfolio into:  [:transactionsToNow :nextAccount |
		                                                                  transactionsToNow add: (nextAccount transactions)].
	^portfolios inject: transactionsAccounts into:  [:transactionsToNow :nextPortfolio |
		                                                                  transactionsToNow add: (nextPortfolio transactions)]."
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:40:35' prior: 50686193!
balance
	"^ (accounts sum: [:anAccount | anAccount balance] ifEmpty:[0]) + (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty:[0])"
	 ^actives sum: [:anActive| anActive balance] ifEmpty:[0]! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/18/2023 20:40:55' prior: 50684797!
add: anActive 
         actives add: anActive
	 "(anActive isKindOf: ReceptiveAccount) ifTrue: [^accounts add: anActive ].
	 (anActive isKindOf: Portfolio) ifTrue: [^portfolios add: anActive] " ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/18/2023 20:40:56'!
PASSED!

Object subclass: #Ejercicio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!

!classDefinition: #Ejercicio category: 'Ejercicio' stamp: 'CB 5/18/2023 20:51:27'!
Object subclass: #Ejercicio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!

!classRenamed: #Ejercicio as: #Constante stamp: 'CB 5/18/2023 20:51:40'!
Smalltalk renameClassNamed: #Ejercicio as: #Constante!

!classDefinition: #Constante category: 'Ejercicio' stamp: 'CB 5/18/2023 20:52:10'!
Object subclass: #Constante
	instanceVariableNames: 'boolean'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!
!Constante methodsFor: 'no messages' stamp: 'CB 5/18/2023 20:52:08'!
evaluar
      ^boolean! !

Object subclass: #Not
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!

!classDefinition: #Not category: 'Ejercicio' stamp: 'CB 5/18/2023 20:52:32'!
Object subclass: #Not
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!
!Not class methodsFor: 'no messages' stamp: 'CB 5/18/2023 20:53:27'!
with: unaConstante
       self new initializeWith: unaConstante! !

!classDefinition: #Not category: 'Ejercicio' stamp: 'CB 5/18/2023 20:54:19'!
Object subclass: #Not
	instanceVariableNames: 'constante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!
!Not methodsFor: 'no messages' stamp: 'CB 5/18/2023 20:54:18'!
initializeWith: unaConstante
         constante := unaConstante! !
!Not methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 20:55:24'!
evaluar
     ^(constante evaluar) not! !
!Constante methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 20:55:52'!
initializeWith: aBoolean
      boolean := aBoolean! !
!Constante class methodsFor: 'no messages' stamp: 'CB 5/18/2023 20:56:18'!
with: aBoolean
        self new initializeWith:  aBoolean! !
!Constante class methodsFor: 'as yet unclassified' stamp: 'CB 5/18/2023 20:56:40' prior: 50686391!
with: aBoolean
        self new initializeWith: aBoolean! !

----QUIT----(19 May 2023 10:07:11) CuisUniversity-5706.image priorSource: 11346537!

----STARTUP---- (19 May 2023 16:18:31) as C:\Users\cecibola\Downloads\windows64\windows64\CuisUniversity-5706.image!

!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 16:19:17' prior: 50686233!
hasRegistered: aTransaction 
	 ^actives inject: false into: [:hasTransactionRegistered :anActive | hasTransactionRegistered or: (anActive hasRegistered: aTransaction)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 16:19:27' prior: 50686281!
balance

	 ^actives sum: [:anActive| anActive balance] ifEmpty:[0]! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 16:19:34' prior: 50686291!
add: anActive 
         actives add: anActive
! !

Object subclass: #Actives
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Actives category: 'Portfolio-Ejercicio' stamp: 'CB 5/19/2023 16:21:27'!
Object subclass: #Actives
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Actives subclass: #Portfolio
	instanceVariableNames: 'actives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/19/2023 16:22:24'!
Actives subclass: #Portfolio
	instanceVariableNames: 'actives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Actives subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CB 5/19/2023 16:23:36'!
Actives subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Not stamp: 'CB 5/19/2023 16:25:42'!
Object subclass: #Not
	instanceVariableNames: 'constante'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!

!classRemoval: #Constante stamp: 'CB 5/19/2023 16:25:43'!
Object subclass: #Constante
	instanceVariableNames: 'boolean'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:38:24'!
test10CanNotAddTheSameAccountTwiceToAPortfolio
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	
         self assert: (portfolio add: anAccount) equals: 43! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:38:37' prior: 50686473!
test10CanNotAddTheSameAccountTwiceToAPortfolio
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	
         self assert: (portfolio add: anAccount) equals: 43! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:44:21' prior: 50686486!
test10CanNotAddTheSameAccountTwiceToAPortfolio
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test10CanNotAddTheSameAccountTwiceToAPortfolio stamp: 'CB 5/19/2023 16:44:26'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:45:34' prior: 50686498!
test10CanNotAddTheSameAccountTwiceToAPortfolio
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!Portfolio class methodsFor: 'no messages' stamp: 'CB 5/19/2023 16:46:32'!
canNotAddSameAccountTwice
    ^'can not add an existing account'! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 16:48:22' prior: 50686421!
add: anActive 
         (actives includes: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice ].
         actives add: anActive
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 16:48:24'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddTheSameAccountTwiceToAPortfolio stamp: 'CB 5/19/2023 16:48:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:50:38'!
test10CanNotAddTheSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test10CanNotAddTheSameAccountTwiceToAPortfolio stamp: 'CB 5/19/2023 16:50:38'!
test10CanNotAddTheSameAccountTwiceToAPortfolio
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !

!testRun: #PortfolioTest #test10CanNotAddTheSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:50:45'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:55:17'!
test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test10CanNotAddTheSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:55:17'!
test10CanNotAddTheSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:58:10'!
test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount
        
	| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ parentPortfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:58:13'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:58:56'!
test11CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:58:56'!
test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:59:06'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:59:09'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:59:14'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:59:14'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:59:27'!
test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount
        
	| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ parentPortfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:59:27'!
test10CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount
        
	| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ parentPortfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 16:59:38'!
test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 16:59:38'!
test11CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount
        
	| portfolio anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	 self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:59:42'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 16:59:42'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:03:47' prior: 50686253!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)].! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:08:38' prior: 50686540!
add: anActive 
         (actives includes: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice ].
         actives do:  [:nextActive | (nextActive includes: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:08:40'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:08:40'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:08:40'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:08:40'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:08:40'!
FAILURE!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:09:26'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:09:26'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:09:26'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:09:26'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:09:26'!
FAILURE!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:09:37'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:16:53' prior: 50686825!
add: anActive 
         (actives has: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice ].
         actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive
! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:19:06'!
has: anActive 
         actives has: anActive
 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 17:20:10'!
has: anActive 

	^ transactions = (anActive transactions) ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/19/2023 17:20:11'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:20:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:20:16'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:20:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:20:16'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:20:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:20:41'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:20:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:20:41'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:20:50'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:21:35' prior: 50686923!
add: anActive 
         "(actives has: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice ]."
         actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:21:36'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:21:36'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:21:36'!
FAILURE!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:21:48'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 17:23:27' prior: 50684819!
test03APortfolioBalanceWithOneAccountAndOnePortfolio
        
	| portfolio anAccount portfolio1 anAccount1 |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	 portfolio1 := Portfolio new.
        	portfolio1 add: anAccount.
	anAccount1 := ReceptiveAccount new.
	
	 Deposit register: 120 on: anAccount.
         portfolio := Portfolio new.
         portfolio add: anAccount1.
 	 portfolio add: portfolio1.
         self assert: 170 equals: portfolio balance! !

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:23:28'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:23:28'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:23:28'!
FAILURE!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:23:34'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:23:37'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:23:37'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:27:44'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:27:44'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:29:43' prior: 50686935!
has: anActive 
         actives includes: anActive
 
! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:30:46' prior: 50687200!
has: anActive 
         actives has: anActive
 
! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:33:23' prior: 50687205!
has: anActive 
         ^actives inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive has: anActive)] 
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:33:24'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 17:33:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 17:36:27'!
test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount
        
	| portfolio anAccount parentPortfolio anAccount1|
	anAccount := ReceptiveAccount new.
	anAccount1 := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
        Deposit register: 100 on: anAccount1.
	portfolio := Portfolio new.
	portfolio add: anAccount1.
	parentPortfolio := Portfolio new.
        parentPortfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ portfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:36:36'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:36:59'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:37:16'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:37:16'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:38:39'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:38:39'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:46:04'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 17:46:04'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:47:43' prior: 50687055!
add: anActive 
        
         actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive.
         anActive hasAParent: self.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CB 5/19/2023 17:48:41'!
Actives subclass: #Portfolio
	instanceVariableNames: 'actives parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:48:40'!
hasAParent: aPortfolioParent
       parent := aPortfolioParent
   ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:49:53' prior: 50686211 overrides: 16920235!
initialize 
     actives := OrderedCollection new. ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:50:16'!
parent
       ^parent
   ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 17:51:50' prior: 50687380 overrides: 16920235!
initialize 
     actives := OrderedCollection new.
     parent := self. ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:00:33' prior: 50687356!
add: anActive 
        
         actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         parent contains: anActive.
         actives add: anActive.
         anActive hasAParent: self.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:01:58'!
contains: anActive
         parent = self ifTrue: [^actives has: anActive].
         ^parent contains: anActive
         
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:02:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:02:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:02:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:02:01'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:04:30' prior: 50687395!
add: anActive 
        
         actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]].
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         actives add: anActive.
         anActive hasAParent: self.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:04:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:04:30'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:04:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:04:30'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:05:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:05:41'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:05:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:05:41'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:05:44'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:06:56' prior: 50687407!
contains: anActive
         parent = self ifTrue: [^self has: anActive].
         ^parent contains: anActive
         
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:06:57'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:06:57'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:06:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:06:57'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:07:07'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CB 5/19/2023 18:07:48'!
Actives subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 18:07:46'!
hasAParent: aPortfolioParent
       parent := aPortfolioParent! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:08:11'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:11:32' prior: 50687459!
add: anActive 
        
         "actives do:  [:nextActive | (nextActive has: anActive) ifTrue:
	                                     [^self error: self class canNotAddSameAccountTwice]]."
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         actives add: anActive.
         anActive hasAParent: self.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:11:33'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:11:43' prior: 50687678!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         actives add: anActive.
         anActive hasAParent: self.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:12:20' prior: 50687565!
contains: anActive
         
         parent = self ifTrue: [^self has: anActive].
         ^parent contains: anActive
         
 
! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:13:22'!
childOf: aPortfolioParent
       parent := aPortfolioParent
   ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CB 5/19/2023 18:13:22' prior: 50687737!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         actives add: anActive.
         anActive childOf: self.! !

!methodRemoval: Portfolio #hasAParent: stamp: 'CB 5/19/2023 18:13:22'!
hasAParent: aPortfolioParent
       parent := aPortfolioParent
   !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:13:39'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:13:39'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:13:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:13:39'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:13:46'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:13:46'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:13:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:13:46'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 18:13:58'!
childOf: aPortfolioParent
       parent := aPortfolioParent! !

!methodRemoval: ReceptiveAccount #hasAParent: stamp: 'CB 5/19/2023 18:13:58'!
hasAParent: aPortfolioParent
       parent := aPortfolioParent!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/19/2023 18:13:59'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:14:02'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 18:31:59'!
test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          anAccount "    
	| portfolio portfolioToAdd anAccount|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolioToAdd add: anAccount.
	
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:32:02'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 18:35:21' prior: 50687940!
test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          anAccount and anAccount1 "    
	| portfolio portfolioToAdd anAccount anAccount1|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolioToAdd add: anAccount.
	
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 18:35:29' prior: 50688018!
test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          anAccount and anAccount1 "    
	| portfolio portfolioToAdd anAccount anAccount1|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolioToAdd add: anAccount.
	portfolioToAdd add: anAccount1.
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:35:30'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:42:27' prior: 50687758!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         (anActive actives) do: [:nextActive | (parent contains: nextActive) ifTrue:[^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive.
         anActive childOf: self.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:42:44'!
actives
     ^actives! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:42:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:42:53'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:42:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:42:53'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:45:33' prior: 50688078!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         anActive actives do: [:nextActive | (parent contains: nextActive) ifTrue:[^self error: self class canNotAddSameAccountTwice]].
         actives add: anActive.
         anActive childOf: self.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:45:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:45:35'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:45:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:45:35'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:45:36'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 18:45:55'!
actives
        ^self! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CB 5/19/2023 18:45:58'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 18:46:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 18:46:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 18:46:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 18:46:01'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 18:46:03'!
ERROR!

----SNAPSHOT----(19 May 2023 18:46:27) CuisUniversity-5706.image priorSource: 11351995!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 18:56:31' prior: 50688144!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         self checkingIfIHave: anActive actives.  
         actives add: anActive.
         anActive childOf: self.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 19:00:01'!
checkingIfIHave: anActiveToCheck
        ^(anActiveToCheck isKindOf: ReceptiveAccount) ifTrue: [parent contains: anActiveToCheck ]
     
 ! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 19:00:31' prior: 50688294!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         (self checkingIfIHave: anActive actives)  ifTrue: [^self error: self class canNotAddSameAccountTwice].   
         actives add: anActive.
         anActive childOf: self.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:00:33'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:00:33'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:00:33'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 19:00:33'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 19:00:33'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 19:00:33'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:00:33'!
FAILURE!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:00:41'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:01:14'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 19:03:35' prior: 50688304!
checkingIfIHave: anActiveToCheck
        (anActiveToCheck isKindOf: ReceptiveAccount) ifTrue: [parent contains: anActiveToCheck ].
        ^anActiveToCheck do: [:anActive | self checkingIfIHave: anActive] 
 ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 19:03:36'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 19:03:36'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 19:03:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:03:36'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 19:04:59' prior: 50688209!
actives
        ^OrderedCollection with: self.! !
!Portfolio methodsFor: 'category-name' stamp: 'CB 5/19/2023 19:06:36' prior: 50688312!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
         (anActive actives) do: [:anActiveToCheck | (parent contains: anActiveToCheck) ifTrue: [^self error: self class canNotAddSameAccountTwice]].    
         actives add: anActive.
         anActive childOf: self.! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:06:37'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 19:06:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 19:06:44'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:44'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:06:45'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:06:49'!
PASSED!

!methodRemoval: Portfolio #checkingIfIHave: stamp: 'CB 5/19/2023 19:09:21'!
checkingIfIHave: anActiveToCheck
        (anActiveToCheck isKindOf: ReceptiveAccount) ifTrue: [parent contains: anActiveToCheck ].
        ^anActiveToCheck do: [:anActive | self checkingIfIHave: anActive] 
 !

----SNAPSHOT----(19 May 2023 19:11:13) CuisUniversity-5706.image priorSource: 11412482!
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 19:14:18'!
test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          aPortfolio3 
                                              |
                                       anAccount   "    
	| portfolio portfolioToAdd anAccount anAccount1|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolioToAdd add: anAccount.
	portfolioToAdd add: anAccount1.
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 19:14:35' prior: 50688618!
test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          aPortfolio3 
                                              |
                                   anAccount   anAccount1"    
	| portfolio portfolioToAdd anAccount anAccount1|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolioToAdd add: anAccount.
	portfolioToAdd add: anAccount1.
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'CB 5/19/2023 19:15:50' prior: 50688650!
test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount          aPortfolio3 
                                              |
                                   anAccount   anAccount1"    
	| portfolio portfolioToAdd anAccount anAccount1 portfolio3|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolio3 := Portfolio new.
        portfolio3 add: anAccount.
	portfolio3 add: anAccount1.
	portfolioToAdd add: portfolio3.
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'CB 5/19/2023 19:15:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 19:22:14' prior: 50686940!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [anActive actives do: []]
	^ transactions = (anActive transactions) ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CB 5/19/2023 19:24:12' prior: 50688721!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [anActive actives do: [:anActiveToCheck | (parent contains: anActiveToCheck) ifTrue: [^self error: self class canNotAddSameAccountTwice]]].
	^ transactions = (anActive transactions) ! !

----QUIT----(19 May 2023 19:29:53) CuisUniversity-5706.image priorSource: 11422842!

----STARTUP---- (20 May 2023 12:01:40) as /Users/noehsueh/UBA/Ingenieria de Software I (inge1)/practicas/CuisUniversity-5706.image!


!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 12:18:59'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:09'!
FAILURE!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:09'!
FAILURE!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:19:18'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:19:19'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:19'!
FAILURE!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:19'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:27'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:19:27'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:20:45'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:20:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 12:22:50' prior: 50688729!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [
	anActive actives do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions) ! !

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:24:58'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:24:58'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 12:26:16' prior: 50688831!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [
	anActive actives do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: Portfolio class canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions) ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:26:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:26:18'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:18'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:19'!
FAILURE!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:19'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:24'!
FAILURE!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:24'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 12:26:37' prior: 50688851!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [
	anActive actives do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions) ! !

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:41'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:46'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:49'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:26:52'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:26:55'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:27:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:27:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 12:27:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 12:27:05'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:35:24'!
test15_CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.
	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	portfolio1 add: anAccount.
	
        portfolio add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:36:01' prior: 50689087!
test15_CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:37:08'!
test15CanNotAddAPortfolioWhoseParentHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test15_CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:37:08'!
test15_CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:37:54'!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!methodRemoval: PortfolioTest #test15CanNotAddAPortfolioWhoseParentHasTheSameAccount stamp: 'N 5/20/2023 12:37:54'!
test15CanNotAddAPortfolioWhoseParentHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 200 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:37:56'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:38:01'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:38:02'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:38:02'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:02'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:02'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:38:02'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:38:19' prior: 50689245!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 300 on: anAccount1.
	Withdraw register: 200 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:38:22'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:38:34' prior: 50689384!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Withdraw register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:38:35'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:38:36'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:39:40' prior: 50689484!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:39:42'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:40:48' prior: 50689584!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	"portfolioToAdd add: anAccount1."
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount1.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:40:48'!
FAILURE!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:41:15' prior: 50689684!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:41:16'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:42:45' prior: 50689727!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      <-    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Withdraw register: 100 on: anAccount1.
	Withdraw register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:42:46'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:43:14' prior: 50689827!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio      - >   portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolioToAdd add: portfolio ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:43:15'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 12:48:40' prior: 50688445!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
        " (anActive actives) do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]].    "
         actives add: anActive.
         anActive childOf: self.! !
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 12:48:43' prior: 50689927!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:48:43'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:48:47'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:48:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 12:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 12:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 12:48:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 12:48:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 12:48:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 12:48:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 12:48:55'!
PASSED!

| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:49:40'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:50:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 12:51:34'!
PASSED!

anActive!

nextActive!

self transactions !

self balance !

anActive!

anActive actives!

parent contains: anActiveToCheck!

anActiveToCheck!

self balance !

parent contains: anActiveToCheck!

self balance !

self balance!

nextActive has: anActive!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 13:01:45' prior: 50688925!
has: anActive 
        (anActive isKindOf: Portfolio) ifTrue: [
	anActive actives do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions) and: (self balance = anActive balance )! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 13:01:46'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:01:50'!
PASSED!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 13:02:53' prior: 50690041!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                    / 									\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        "portfolio1 add: portfolioToAdd."
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:02:54'!
FAILURE!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 13:03:14' prior: 50690542!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                     									\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        "portfolio1 add: portfolioToAdd."
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:03:15'!
FAILURE!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 13:03:28' prior: 50690585!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                     									\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:03:28'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 13:03:28'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 13:03:28'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:03:28'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 13:03:28'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:03:29'!
PASSED!

actives inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive has: anActive)] !

parent = self!

self has: anActive!

anActive!

self balance !

parent!

self balance!

self balance!

self balance !

self parent balance !

parent balance !

parent transactions !

transactions !

parent !

self balance!

parent !

self transactions !

self transactions at:1!

self transactions at:1 balance!

(self transactions at:1) balance!

(self transactions at:1) value!

self balance !

parent balance !
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 13:36:59' prior: 50690628!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                     							/		\
          portfolio     < -    portfolioToAdd  									anAccount3
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 anAccount3|
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	anAccount3 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	Deposit register: 200 on: anAccount3.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount3.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 13:37:01'!
FAILURE!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 14:18:26' prior: 50690745!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							portfolio1
                                                     							/		\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount2     anAccount1

"    
	| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.

	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:28:01' prior: 50690027!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
        " (anActive actives) do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]].    "
         actives add: anActive.
	(anActive isKindOf: Portfolio) ifTrue: [ anActive childOf: self.]. 
        ! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:36:58'!
accounts
     |accounts|
	accounts := OrderedCollection new.
	actives do: [:anActive | 
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		].
		accounts add: anActive actives. 
	]! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:37:13' prior: 50690845!
accounts
     |accounts|
	accounts := OrderedCollection new.
	actives do: [:anActive | 
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		].
		accounts add: anActive actives. 
	]
	^accounts! !

portfolio accounts !

portfolio accounts !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:38:16' prior: 50690855!
accounts
     |accounts|
	accounts := OrderedCollection new.
	actives do: [:anActive | 
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		].
		accounts add: anActive actives accounts. 
	]
	^accounts! !

a add: c. !

#(1, 2, 3)!

#(1, 2, 3)!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:40:58' prior: 50690866!
accounts
     |accounts|
	accounts := OrderedCollection new.
	actives do: [:anActive | 
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		].
		accounts union: (anActive accounts). 
	]
	^accounts! !

portfolio accounts !

!methodRemoval: Portfolio #accounts stamp: 'N 5/20/2023 14:42:46'!
accounts
     |accounts|
	accounts := OrderedCollection new.
	actives do: [:anActive | 
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		].
		accounts union: (anActive accounts). 
	]
	^accounts!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'N 5/20/2023 14:43:22'!
Actives subclass: #Portfolio
	instanceVariableNames: 'actives parent accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:43:20' prior: 50687389 overrides: 16920235!
initialize 
     actives := OrderedCollection new.
     accounts := OrderedCollection new.
     parent := self. ! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:44:35' prior: 50690830!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
        " (anActive actives) do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]].    "
         actives add: anActive.
	(anActive isKindOf: Portfolio) ifTrue: [ anActive childOf: self.].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [accounts add: anActive ]. 
        ! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:45:27' prior: 50690914!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
        " (anActive actives) do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]].    "
         actives add: anActive.
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts union: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'nil' stamp: 'N 5/20/2023 14:45:41'!
accounts
	^accounts! !

portfolio accounts !

portfolio accounts !

	portfolio accounts !

| portfolio portfolio1 portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.
	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	portfolio1 := Portfolio new.
	
        portfolio add: anAccount.
	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	portfolio1 add: anAccount.
        portfolio1 add: portfolioToAdd.
	portfolio add: portfolioToAdd.
	
	portfolio accounts !

!methodRemoval: ReceptiveAccount #childOf: stamp: 'N 5/20/2023 14:47:21'!
childOf: aPortfolioParent
       parent := aPortfolioParent!

Actives subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'N 5/20/2023 14:47:31'!
Actives subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a union: c. !

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a join: c.  !

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a add: c.  !

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a add: c. !

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a add: c 
!

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
a union: c !

a := OrderedCollection new.
a add:1.
a add:2. 
a add:3.
c :=OrderedCollection new.
c add: 4. 
(a union: c) asOrderedCollection !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:54:45' prior: 50690907 overrides: 16920235!
initialize 
     actives := OrderedCollection new.
     accounts := Set new.
     parent := self. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 14:55:47'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 14:55:47'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:55:47'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 14:55:47'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 14:55:47'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:55:47'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:55:47'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 14:55:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 14:55:48'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 14:55:48'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 14:55:48'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 14:55:48'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 14:55:48'!
FAILURE!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 14:55:48'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 14:55:48'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 14:56:38' prior: 50687210!
has: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive has: anActive)] 
 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 14:58:18' prior: 50690446!
has: anActive
        (anActive isKindOf: Portfolio) ifTrue: [
	anActive accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 14:58:19'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 14:58:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 14:58:23'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 14:58:23'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 14:58:23'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 14:58:23'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 14:58:33'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 14:58:36'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 14:58:36'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:07:02'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:07:04'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:07:06'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:07:06'!
FAILURE!
!PortfolioTest methodsFor: 'constructor test' stamp: 'N 5/20/2023 15:08:02' prior: 50686728!
test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount
        "
			p1  <- c1 
			 | 
			p2
			 |
			c1
	
	"
	| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ parentPortfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:08:04'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:08:04'!
FAILURE!

| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
	parentPortfolio add: anAccount !

| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.!

| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.!

| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:12:52' prior: 50690932!
add: anActive 
     
         (parent contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
        " (anActive actives) do: [:anActiveToCheck | 
		(parent contains: anActiveToCheck) ifTrue: [
			^self error: self class canNotAddSameAccountTwice]].    "
         actives add: anActive.
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts union: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:13:11'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:13:19'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:13:19'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:13:19'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'N 5/20/2023 15:15:54' prior: 50691091!
has: anActive
        (anActive isKindOf: Portfolio) ifTrue: [
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !
!Portfolio methodsFor: 'nil' stamp: 'N 5/20/2023 15:16:16'!
root! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 15:16:41' prior: 50691385!
root
	parent = self ifTrue: [^self].
         ^parent root ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:16:50'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:20:54' prior: 50691276!
add: anActive 
     
         (parent root contains: anActive) ifTrue: [^self error: self class canNotAddSameAccountTwice].
   
         actives add: anActive.
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts union: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:20:56'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:21:34' prior: 50687746!
contains: anActive
         
        ^self has: anActive
     
         
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:21:36'!
PASSED!

!methodRemoval: Portfolio #contains: stamp: 'N 5/20/2023 15:22:57'!
contains: anActive
         
        ^self has: anActive
     
         
 
!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:24:02'!
contains: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive has: anActive)] 
 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 15:24:02' prior: 50691083!
has: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive contains: anActive)] 
 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 15:24:02' prior: 50691591!
contains: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive contains: anActive)] 
 
! !

!methodRemoval: Portfolio #has: stamp: 'N 5/20/2023 15:24:02'!
has: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive contains: anActive)] 
 
!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:24:11'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:24:11'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:24:11'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:24:11'!
ERROR!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:24:11'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:25:14' prior: 50691452!
add: anActive 
     
         (parent root contains: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts union: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:25:38'!
has: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive has: anActive)] 
 
! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:25:43' prior: 50691678!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts union: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:25:44'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:27:37' prior: 50686810!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
       
	^ accounts do:[ :anAccount | transactionsOfPortfolio add: anAccount transactions]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:27:38'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:27:38'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:27:38'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:27:38'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:27:46'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:28:01' prior: 50691772!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
       
	^ (accounts do:[ :anAccount | transactionsOfPortfolio add: anAccount transactions]) asOrderedCollection! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:28:03'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:03'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:28:03'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:28:05'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:28:34'!
FAILURE!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:28:59'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:28:59'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:28:59'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:29:00'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:29:02'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:30:05' prior: 50691842!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
       
	accounts do:[ :anAccount | transactionsOfPortfolio add: anAccount transactions]
	
	^transactionsOfPortfolio! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:30:06'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:30:06'!
ERROR!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:30:21'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:30:21'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:30:21'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:31:07' prior: 50691978!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := Set new.
       
	accounts do:[ :anAccount | transactionsOfPortfolio union: anAccount transactions]
	
	^transactionsOfPortfolio asOrderedCollection. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:31:07'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:07'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:31:07'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:31:17' prior: 50692103!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := Set new.
       
	accounts do:[ :anAccount | transactionsOfPortfolio := transactionsOfPortfolio union: anAccount transactions]
	
	^transactionsOfPortfolio asOrderedCollection. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:31:18'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:18'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:31:18'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:31:41' prior: 50692171!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        "mejorar ?¿ no hacer object recursion"
	
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:31:42'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:40:06' prior: 50692240!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| transactionToNow addAll: (nextAccount transactions )]
	"
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. "! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:40:07'!
FAILURE!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:40:07'!
FAILURE!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:07'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:40:07'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:40:12' prior: 50692312!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| transactionToNow addAll: (nextAccount transactions )]
	"
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. "! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:40:13'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:40:46' prior: 50692387!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )
	]
	"
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. "! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:40:49' prior: 50692462!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )
	].
	"
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. "! !
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:40:53' prior: 50692480!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )
	].
	! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:53'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:53'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:40:54'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:40:54'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:41:05' prior: 50692498!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )]
	"
	^actives inject: transactionsOfPortfolio into:  [:transactionsToNow :nextActive |
		                                                                  transactionsToNow add: (nextActive transactions)]. "! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:06'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:10'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:10'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:13'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:41:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:41:14'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:14'!
PASSED!

----SNAPSHOT----(20 May 2023 15:41:24) CuisUniversity-5706.image priorSource: 11426839!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:41:35'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:41:56' prior: 50692571!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )]
	! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:57'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:01'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:01'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:07'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:07'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:08'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:08'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:08'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:08'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:42:29' prior: 50692833!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )].
	! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:31'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'N 5/20/2023 15:42:40' prior: 50693029!
transactions
        |transactionsOfPortfolio |
       
        transactionsOfPortfolio := OrderedCollection new.
        
	^ accounts inject: transactionsOfPortfolio into: [:transactionToNow :nextAccount| 
		transactionToNow addAll: (nextAccount transactions )].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:41'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:41'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:48'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:42:54'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:42:55'!
PASSED!

!methodRemoval: Portfolio #actives stamp: 'N 5/20/2023 15:43:54'!
actives
     ^actives!

!methodRemoval: Portfolio #parent stamp: 'N 5/20/2023 15:44:18'!
parent
       ^parent
   !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:24'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:44:24'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 15:44:43'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:44:46'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 15:46:55' prior: 50686407!
hasRegistered: aTransaction 
	 ^accounts inject: false into: [:hasTransactionRegistered :anActive | 
		hasTransactionRegistered or: (anActive hasRegistered: aTransaction)].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:46:56'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:46:56'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:03'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:47:03'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:03'!
FAILURE!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:08'!
FAILURE!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:47:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 15:47:12'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:47:14'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 15:47:52' prior: 50691700!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts addAll: anActive accounts.
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 15:48:02' prior: 50693712!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts := accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 15:48:09' prior: 50693727!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'initialization' stamp: 'N 5/20/2023 15:48:24' prior: 50691019 overrides: 16920235!
initialize 
     actives := OrderedCollection new.
     accounts := OrderedCollection new.
     parent := self. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:48:25'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:48:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 15:48:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 15:48:31'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 15:49:16' prior: 50693436!
hasRegistered: aTransaction 
	 ^accounts inject: false into: [:hasTransactionRegistered :anAccount | 
		hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:49:17'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 15:56:13'!
hasAny: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (nextAccount value:nextAccount )] 
 
! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 15:59:39' prior: 50693905!
hasRegistered: aTransaction 
	self hasAnyAccount: [:anAccount | anAccount hasRegistered: aTransaction]. 
	
	"
	 ^accounts inject: false into: [:hasTransactionRegistered :anAccount | 
		hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)]."! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 15:59:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:59:41'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 15:59:41'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 15:59:41'!
ERROR!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 15:59:41'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 15:59:54'!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (nextAccount value:nextAccount )] 
 
! !

!methodRemoval: Portfolio #hasAny: stamp: 'N 5/20/2023 15:59:54'!
hasAny: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (nextAccount value:nextAccount )] 
 
!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:00:16' prior: 50694047!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value:nextAccount )] 
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:00:17'!
FAILURE!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:00:17'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:00:17'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:00:17'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:02:41' prior: 50694063!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount ) value ] 
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:02:42'!
FAILURE!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:02:42'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:02:42'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:02:42'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:03:06' prior: 50694130!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount )] 
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:09'!
FAILURE!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:03:09'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:03:09'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:03:09'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:15'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:03:33' prior: 50693979!
hasRegistered: aTransaction 
	^self hasAnyAccount: [:anAccount | anAccount hasRegistered: aTransaction]. 
	
	"
	 ^accounts inject: false into: [:hasTransactionRegistered :anAccount | 
		hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)]."! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:03:34'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:03:34'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:34'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:03:35'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:03:53' prior: 50694197!
hasAnyAccount: anAccountWithCondition 
         accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount )] 
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:53'!
FAILURE!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:03:53'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:03:53'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:03:53'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:04:00' prior: 50694337!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount )] 
 
! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:04:16' prior: 50694268!
hasRegistered: aTransaction 
	(self hasAnyAccount: [:anAccount | anAccount hasRegistered: aTransaction]) 
	
	"
	 ^accounts inject: false into: [:hasTransactionRegistered :anAccount | 
		hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)]."! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:17'!
FAILURE!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:04:17'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:04:17'!
FAILURE!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:04:17'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:04:25' prior: 50694413!
hasRegistered: aTransaction 
	^self hasAnyAccount: [:anAccount | anAccount hasRegistered: aTransaction]
	
	"
	 ^accounts inject: false into: [:hasTransactionRegistered :anAccount | 
		hasTransactionRegistered or: (anAccount hasRegistered: aTransaction)]."! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:04:26'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:04:39' prior: 50694482!
hasRegistered: aTransaction 
	^self hasAnyAccount: [:anAccount | anAccount hasRegistered: aTransaction]
	
	! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:04:51'!
hasAnyAccountThat: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount )] 
 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 16:04:51' prior: 50694551!
hasRegistered: aTransaction 
	^self hasAnyAccountThat: [:anAccount | anAccount hasRegistered: aTransaction]
	
	! !

!methodRemoval: Portfolio #hasAnyAccount: stamp: 'N 5/20/2023 16:04:51'!
hasAnyAccount: anAccountWithCondition 
         ^accounts inject: false into: [:conditionUntilNow :nextAccount | 
		conditionUntilNow or: (anAccountWithCondition value: nextAccount )] 
 
!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:05:18' prior: 50691693!
has: anActive 
         ^self hasAnyAccountThat: [:anAccount | anAccount has: anActive].
 
! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:05:19'!
PASSED!

!methodRemoval: ReceptiveAccount #actives stamp: 'N 5/20/2023 16:05:49'!
actives
        ^OrderedCollection with: self.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'N 5/20/2023 16:06:03' prior: 50684362!
balance
         |actualBalance|
          actualBalance := 0.
          transactions do: [:aTransaction | 
		actualBalance := aTransaction contributesToAccountBalance: actualBalance
	].
          ^actualBalance ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'N 5/20/2023 16:08:21' prior: 50694648!
balance
         |actualBalance|
          actualBalance := 0.
          transactions do: [:aTransaction | 
		actualBalance := aTransaction contributesToAccountBalance: actualBalance
	].
          ^transactions sum:[:aTransaction ] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'N 5/20/2023 16:08:49' prior: 50694658!
balance
         |actualBalance|
          actualBalance := 0.
          transactions do: [:aTransaction | 
		actualBalance := aTransaction contributesToAccountBalance: actualBalance
	].
          ^transactions sum:[:aTransaction | aTransaction contributesToAccountBalance: actualBalance ] ifEmpty: [0]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:08:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:08:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:08:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:08:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:08:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:08:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:08:50'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'N 5/20/2023 16:09:07' prior: 50694669!
balance
         |actualBalance|
          actualBalance := 0.
          transactions do: [:aTransaction | 
		actualBalance := aTransaction contributesToAccountBalance: actualBalance
	].
          ^actualBalance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:09:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:09:07'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:09:47' prior: 50693742!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
        

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:09:47'!
FAILURE!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:47'!
FAILURE!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:09:47'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:09:56' prior: 50694744!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         actives add: anActive.

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:09:56'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:09:57'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:09:57'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:09:57'!
PASSED!
!Portfolio methodsFor: 'inspecting' stamp: 'N 5/20/2023 16:10:06' prior: 50686416!
balance

	 ^accounts sum: [:anActive| anActive balance] ifEmpty:[0]! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:10:08'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:10:21' prior: 50694815!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
         

	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:10:22'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:10:23'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:10:45' prior: 50694950!
add: anActive 
     
         (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:14:05'!
verifyIfActiveCanBeAdded: anActive 
     ^(parent root has: anActive) not
   ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:14:39' prior: 50695021!
add: anActive 

	self verifyIfActiveCanBeAdded: anActive.
       	(parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:14:54' prior: 50695039!
add: anActive 

	self verifyIfActiveCanBeAdded: anActive.
   
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. 
        ! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:15:02' prior: 50695034!
verifyIfActiveCanBeAdded: anActive 
     (parent root has: anActive) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
   ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:15:12'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:15:16'!
PASSED!

!methodRemoval: Portfolio #contains: stamp: 'N 5/20/2023 16:15:40'!
contains: anActive 
         ^accounts inject: false into: [:hasTheActive :nextActive | hasTheActive or: (nextActive contains: anActive)] 
 
!
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:17:16' prior: 50694581!
has: anActive 
         ^self hasAnyAccountThat: [:anAccount | anAccount isPartOf: anActive].
 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:18:10'!
isPartOf: anActive
        (anActive isKindOf: Portfolio) ifTrue: [
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !

!methodRemoval: ReceptiveAccount #has: stamp: 'N 5/20/2023 16:18:10'!
has: anActive
        (anActive isKindOf: Portfolio) ifTrue: [
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:18:19'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:18:22'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:20:08' prior: 50695054!
add: anActive 

	self verifyIfActiveCanBeAdded: anActive.
   	
	anActive addToPortfolio: self. 
	"
	(anActive isKindOf: Portfolio) ifTrue: [ 
		anActive childOf: self.
		accounts addAll: (anActive accounts).
		].
	(anActive isKindOf: ReceptiveAccount ) ifTrue: [
		accounts add: anActive 
		]. "
        ! !
!Portfolio methodsFor: 'nil' stamp: 'N 5/20/2023 16:20:24'!
addToPortfolio: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 16:21:30' prior: 50695318!
addToPortfolio: aPortfolio
	aPortfolio addAPortfolio: self.! !
!Portfolio methodsFor: 'nil' stamp: 'N 5/20/2023 16:21:47'!
addAPortfolio: aPortfolioToBeAdded
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 16:22:19' prior: 50695326!
addAPortfolio: aPortfolioToBeAdded
	aPortfolioToBeAdded childOf: self.
	accounts addAll: (aPortfolioToBeAdded accounts).! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'N 5/20/2023 16:22:51'!
addToPortfolio: aPortfolio
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 16:23:13' prior: 50695337!
addToPortfolio: aPortfolio
	aPortfolio addAnAccount: self. ! !
!Portfolio methodsFor: 'adding - private' stamp: 'N 5/20/2023 16:24:04'!
addAnAccount: anAccountToBeAdded
	! !
!Portfolio methodsFor: 'adding' stamp: 'N 5/20/2023 16:24:16' prior: 50695306!
add: anActive 

	self verifyIfActiveCanBeAdded: anActive.
   	
	anActive addToPortfolio: self. 
	! !
!Portfolio methodsFor: 'adding - private' stamp: 'N 5/20/2023 16:24:23' prior: 50695347!
addAnAccount: anAccountToBeAdded
	accounts add: anAccountToBeAdded! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:24:24'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:24:25'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:24:25'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:24:25'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'N 5/20/2023 16:24:46' prior: 50693757 overrides: 16920235!
initialize 
    
     accounts := OrderedCollection new.
     parent := self. ! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:24:47'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:25:48' prior: 50695200!
isPartOf: anActive
	
        (anActive isKindOf: Portfolio) ifTrue: [
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:27:28' prior: 50695484!
isPartOf: anActive
	
        (anActive isKindOf: Portfolio) ifTrue: [
		anActive has: anActive root.
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:28:07' prior: 50695496!
isPartOf: anActive
	
        (anActive isKindOf: Portfolio) ifTrue: [
		(anActive root) has: self. 
	
	].
	^ transactions = (anActive transactions).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:28:08'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:28:13'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:28:13'!
FAILURE!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:28:13'!
FAILURE!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:28:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:29:46' prior: 50695509!
isPartOf: anActive
	
        (anActive isKindOf: Portfolio) ifTrue: [
		
	(anActive root ) accounts do: [:anAccount | 
		(transactions = (anAccount transactions)) ifTrue: [
			^self error: Portfolio canNotAddSameAccountTwice]
		]
	].
	^ transactions = (anActive transactions).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:29:46'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:29:51'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:30:40' prior: 50695601!
isPartOf: anActive
	
        (anActive isKindOf: Portfolio) ifTrue: [
		(anActive root has: self) ifTrue: [^self error: Portfolio canNotAddSameAccountTwice ].
	
	].
	^ transactions = (anActive transactions).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:30:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:30:44'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:30:48'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:30:48'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:48'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:30:48'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:30:49'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:30:52'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:30:53'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:36:26' prior: 50695697!
isPartOf: anActive

	anActive contains: self. 
        (anActive isKindOf: Portfolio) ifTrue: [
		(anActive root has: self) ifTrue: [^self error: Portfolio canNotAddSameAccountTwice ].
	].
	^ transactions = (anActive transactions).! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'N 5/20/2023 16:36:51'!
contains: anAccount
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:37:05' prior: 50695874!
isPartOf: anActive

	anActive contains: self. 
        (anActive isKindOf: Portfolio) ifTrue: [
		(anActive root has: self) ifTrue: [^self error: Portfolio canNotAddSameAccountTwice ].
	].
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'N 5/20/2023 16:37:17' prior: 50695884!
contains: anAccount
	^transactions = (anAccount transactions).! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:38:20'!
contains: anAccount
	! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:38:56' prior: 50695903!
contains: anAccount
	(self root has: anAccount) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:38:59'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:38:59'!
FAILURE!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:38:59'!
FAILURE!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:38:59'!
ERROR!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:38:59'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:39:14' prior: 50695888!
isPartOf: anActive

	^anActive contains: self. 
        "(anActive isKindOf: Portfolio) ifTrue: [
		(anActive root has: self) ifTrue: [^self error: Portfolio canNotAddSameAccountTwice ].
	]."
	! !
!Portfolio methodsFor: 'testing' stamp: 'N 5/20/2023 16:39:21' prior: 50695907!
contains: anAccount
	(self root has: anAccount) ifTrue: [
		^self error: self class canNotAddSameAccountTwice
	].
	^false! !

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:39:30'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:39:31'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'N 5/20/2023 16:39:41' prior: 50695971!
isPartOf: anActive

	^anActive contains: self. 
       	! !
!PortfolioTest methodsFor: 'operations test' stamp: 'N 5/20/2023 16:42:43' prior: 50685286!
test05APortfolioTransactionWithOneAccount
        
	| portfolio anAccount  |
	anAccount := ReceptiveAccount new.
	
	 Deposit register: 50 on: anAccount.
	portfolio := Portfolio new.
        	portfolio add: anAccount.


         self assert: (anAccount transactions) equals: portfolio transactions! !

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:42:44'!
PASSED!
!PortfolioTest methodsFor: 'operations test' stamp: 'N 5/20/2023 16:44:05' prior: 50685927!
test09PortfolioHasRegisteredATransactionWithOneAccount
        
	| portfolio anAccount aTransaction|
	anAccount := ReceptiveAccount new.
	aTransaction := Deposit register: 200 on: anAccount.

	 portfolio := Portfolio new.
        	portfolio add: anAccount.

 	
         self assert: (anAccount hasRegistered: aTransaction) equals: (portfolio hasRegistered: aTransaction)! !
!PortfolioTest methodsFor: 'valid adding test' stamp: 'N 5/20/2023 16:45:38' prior: 50691216!
test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount
        "
			parentPortfolio  <- anAccount 
			 | 
			portfolio
			 |
			anAccount
	
	"
	| portfolio anAccount parentPortfolio|
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.

	portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
       	portfolio add: anAccount.
        parentPortfolio add: portfolio.
 	 
	self
		should: [ parentPortfolio add: anAccount ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:46:15'!
PASSED!
!PortfolioTest methodsFor: 'valid adding test' stamp: 'N 5/20/2023 16:46:49' prior: 50688682!
test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount
        "  portfolio   <-  portfolioToAdd 
                 |                            |
          anAccount              aPortfolio3 
                                              |        \
                                   anAccount   anAccount1"    
	| portfolio portfolioToAdd anAccount anAccount1 portfolio3|
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	Deposit register: 200 on: anAccount1.
	Deposit register: 200 on: anAccount.
        portfolioToAdd := Portfolio new.
        portfolio3 := Portfolio new.
        portfolio3 add: anAccount.
	portfolio3 add: anAccount1.
	portfolioToAdd add: portfolio3.
	portfolio := Portfolio new.
        portfolio add: anAccount.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !
!PortfolioTest methodsFor: 'valid adding test' stamp: 'N 5/20/2023 16:47:37' prior: 50690791!
test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount
 "        							parentPortfolio
                                                     							/		\
          portfolio     < -    portfolioToAdd  									anAccount
               |                               /					            \
          anAccount         anAccount1     anAccount2

"    
	| portfolio parentPortfolio portfolioToAdd anAccount anAccount1 anAccount2 |
	
	anAccount := ReceptiveAccount new.
	anAccount1 :=ReceptiveAccount new. 
	anAccount2 :=ReceptiveAccount new. 
	
	Deposit register: 200 on: anAccount.
	Deposit register: 100 on: anAccount1.
	Deposit register: 300 on: anAccount2.

	
        portfolioToAdd := Portfolio new.
        portfolio := Portfolio new.
	parentPortfolio := Portfolio new.
	
        portfolio add: anAccount.

	portfolioToAdd add: anAccount1.
	portfolioToAdd add: anAccount2.
	
	parentPortfolio add: anAccount.
        parentPortfolio add: portfolioToAdd.
        
 	 self
		should: [ portfolio add: portfolioToAdd ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Portfolio canNotAddSameAccountTwice ].
		
        ! !

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:47:40'!
PASSED!

!testRun: #PortfolioTest #test01AnEmptyPortfolio stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioBalanceWithOneAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test03APortfolioBalanceWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test04AnEmptyPortfolioTransactions stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test05APortfolioTransactionWithOneAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioHasRegisteredATransactionWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test07APortfolioTransactionsWithOneAccountAndOnePortfolio stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test08AnEmptyPortfolioHasRegisteredATransaction stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHasRegisteredATransactionWithOneAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test10CanNotAddSameAccountTwiceToAPortfolioWithOnlyOneAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test11CanNotAddSameAccountTwiceToAPortfolioWithAPortfolioWithThisAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test12CanNotAddSameAccountTwiceToAPortfolioWhoseParentHasThisAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test13CanNotAddAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test14CanNotAddAPortfolioWithAPortfolioWithOneAccountToAPortfolioThatHasTheSameAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #PortfolioTest #test15CanNotAddAPortfolioWhoseParentPortfolioHasTheSameAccount stamp: 'N 5/20/2023 16:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'N 5/20/2023 16:48:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'N 5/20/2023 16:48:10'!
PASSED!

----QUIT----(20 May 2023 16:49:04) CuisUniversity-5706.image priorSource: 11555902!